<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.yzsun.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.yzsun.me/" rel="alternate" type="text/html" /><updated>2021-01-31T16:43:57+00:00</updated><id>https://blog.yzsun.me/feed.xml</id><title type="html">孙耀珠的博客</title><entry><title type="html">HTML 模板语言纵览</title><link href="https://blog.yzsun.me/html-templating/" rel="alternate" type="text/html" title="HTML 模板语言纵览" /><published>2020-08-09T00:00:00+00:00</published><updated>2020-08-09T00:00:00+00:00</updated><id>https://blog.yzsun.me/html-templating</id><content type="html" xml:base="https://blog.yzsun.me/html-templating/">&lt;p&gt;前端开发的本质，是把结构化的数据映射到 HTML。HTML 本身是静态的，因此模板引擎应运而生，接下了动态生成 HTML 的任务，直到近年来在前后端分离的浪潮下被面面俱到的前端框架所兼并。本文试图梳理出模板语言的主流范式，不过注意本文并非按照时间线编排，如果要还原历史的话，应该是 PHP (1995) → Zope 2 (1998) → JSTL (2002) → Django (2005) → Haml (2006) → Mustache (2009) → AngularJS (2010)。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#php-风格&quot; id=&quot;markdown-toc-php-风格&quot;&gt;PHP 风格&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mustache&quot; id=&quot;markdown-toc-mustache&quot;&gt;Mustache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#django-风格&quot; id=&quot;markdown-toc-django-风格&quot;&gt;Django 风格&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#模板属性语言&quot; id=&quot;markdown-toc-模板属性语言&quot;&gt;模板属性语言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#标签库&quot; id=&quot;markdown-toc-标签库&quot;&gt;标签库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#haml&quot; id=&quot;markdown-toc-haml&quot;&gt;Haml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#结语&quot; id=&quot;markdown-toc-结语&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;php-风格&quot;&gt;PHP 风格&lt;/h2&gt;

&lt;p&gt;虽然 PHP 早已是一门通用编程语言了，不过它最早是作为 HTML 模版引擎而出现的。从它现在的全称「超文本预处理器」也可以想象出，PHP 代码可以嵌入到 HTML 中，在用户请求该网页时，后端预先执行 PHP 代码并生成插入了运行结果的 HTML。下面便是一个最简单的例子：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Personal Home Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$world&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$world&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;包裹在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;?php … ?&amp;gt;&lt;/code&gt; 标签里面的便是服务器要执行的 PHP 代码，直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo&lt;/code&gt; 一个表达式可以简写为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;?= … ?&amp;gt;&lt;/code&gt;。像这种在 HTML 里用特殊标签插入后端脚本的做法，从互联网诞生开始就相当普遍，至今仍屡见不鲜，本文称其为「PHP 风格」。这些 PHP 风格的模板引擎大同小异，区别主要在于内嵌语言用什么、代码块用什么标签包裹。&lt;/p&gt;

&lt;p&gt;几乎每一门后端编程语言都有自己的 PHP 风格的模板引擎，因为在 HTML 直接嵌入后端脚本对于后端开发者来说最容易上手，没有任何学习上的负担。这些模板引擎中较为知名的有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;微软公司推出的 &lt;strong&gt;ASP&lt;/strong&gt;，默认脚本语言为 VBScript；&lt;/li&gt;
  &lt;li&gt;昇阳公司推出的 &lt;strong&gt;JSP&lt;/strong&gt;，相当于 ASP 的 Java 版本；&lt;/li&gt;
  &lt;li&gt;Ruby on Rails 框架默认使用的 &lt;strong&gt;eRuby&lt;/strong&gt;；&lt;/li&gt;
  &lt;li&gt;JavaScript 也有类似的 &lt;strong&gt;EJS&lt;/strong&gt;，博客框架 Hexo 在用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSP / eRuby / EJS 都继承了 ASP 的习惯，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;% … %&amp;gt;&lt;/code&gt; 来包裹脚本，还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;%= … %&amp;gt;&lt;/code&gt; 渲染表达式结果等其他便利的标签。&lt;/p&gt;

&lt;h2 id=&quot;mustache&quot;&gt;Mustache&lt;/h2&gt;

&lt;p&gt;PHP 风格的模板引擎虽然历史悠久，但在设计上有一个比较明显的问题：代码逻辑和 HTML 模板混杂在一起。因此，GitHub 的联合创始人 Chris Wanstrath 发明了广为人知的 Mustache。Mustache 的语法非常简洁，没有任何显式的控制流语句，完全由数据驱动，因而自称 logic-less。它不与任何编程语言耦合，几乎所有主流语言都有 Mustache 模板引擎的实现。&lt;/p&gt;

&lt;p&gt;Mustache 有两种基本的标签形式：一种是像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{variable}}&lt;/code&gt; 这样渲染变量的值，另一种则是像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{#section}} … {{/section}}&lt;/code&gt; 这样的区块。根据键值的不同，区块隐含四种语义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果是假值或者空列表，就完全不渲染；&lt;/li&gt;
  &lt;li&gt;如果既不是假值也不是列表，就会渲染一次；&lt;/li&gt;
  &lt;li&gt;如果是非空列表，就渲染列表长度次；&lt;/li&gt;
  &lt;li&gt;如果是函数，则会以区块包裹的原始文本调用该函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{^inverted}} … {{/inverted}}&lt;/code&gt; 与正常的区块相反，如果是假值或空列表则渲染一次，否则不渲染。下面是 Mustache 模板的一个典型用例：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{header}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
{{#items}}
  {{#first}}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;{{name}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  {{/first}}
  {{#link}}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{url}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{name}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  {{/link}}
{{/items}}
{{^items}}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The list is empty.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
{{/items}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假设我们的输入数据是用下面这个 JSON 表示的：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Colors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么 Mustache 便会渲染出如下 HTML：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Colors&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Red&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#green&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Green&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然 Mustache 的设计小而美，但实际使用起来难免捉襟见肘。&lt;strong&gt;Handlebars&lt;/strong&gt; 是对 Mustache 语言的扩展，最大的区别在于它引入了辅助函数。值得一提的是，其内置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#unless&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#each&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#with&lt;/code&gt; 辅助函数明确了 Mustache 区块的隐式语义，譬如前面例子中的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{#items}} … {{/items}}&lt;/code&gt; 可以显式写成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{#each items}} … {{/each}}&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{#first}} … {{/first}}&lt;/code&gt; 可以显式写成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{#if first}} … {{/if}}&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{^items}} … {{/items}}&lt;/code&gt; 可以显式写成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{#unless items}} … {{/unless}}&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;django-风格&quot;&gt;Django 风格&lt;/h2&gt;

&lt;p&gt;Mustache 完全去除了代码逻辑，而 Handlebars 又稍稍加回了一些；不过更多的模板引擎出于实用性考量，不吝于引入更多逻辑，但也不愿复杂到直接内嵌后端脚本，换句话说就是试图在 Mustache 和 PHP 风格之间寻找平衡。如果要给这些中庸的模板引擎选个代表，最早为人所知的应该是 Django Template Language（以下简称 DTL），实际上它的出现要早于 Mustache。&lt;/p&gt;

&lt;p&gt;与先前的话术稍有不同，DTL 将渲染表达式的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ variable }}&lt;/code&gt; 称为变量，将控制流程的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% tag %}&lt;/code&gt; 称为标签，其内置了二十多个标签，包括常用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elif&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; 等等。DTL 最大的特色是过滤器，譬如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ list | length }}&lt;/code&gt; 能够获取列表的长度、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ text | escape | linebreaks }}&lt;/code&gt; 能先将文本转义再把换行符替换成 HTML 标签等等，大约有六十个过滤器内置其中。下面是一段 Django 模板语言的简单示例：&lt;/p&gt;

&lt;div class=&quot;language-django highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endblock&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user.url&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;user.username&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后来，Flask 的作者 Armin Ronacher 参考 DTL 的设计实现了独立于后端框架的 &lt;strong&gt;Jinja&lt;/strong&gt; 模板引擎；而 Mozilla 提供了一个 JavaScript 上的实现 &lt;strong&gt;Nunjucks&lt;/strong&gt;；Shopify 在 Ruby 上也有十分相似的 &lt;strong&gt;Liquid&lt;/strong&gt; 模板引擎，并被用于 GitHub Pages 默认的静态站点生成器 Jekyll。&lt;/p&gt;

&lt;p&gt;Go 语言标准库的模板也可以算是 Django 风格，但它没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% … %}&lt;/code&gt; 只有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ … }}&lt;/code&gt;。比如前面 DTL 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% for user in users %} … {% endfor %}&lt;/code&gt; 写作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ range $user := .Users }} … {{ end }}&lt;/code&gt;，而渲染变量和字段写作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ $variable }}&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ .Field }}&lt;/code&gt;，函数链式调用亦可用管道表达。&lt;/p&gt;

&lt;h2 id=&quot;模板属性语言&quot;&gt;模板属性语言&lt;/h2&gt;

&lt;p&gt;上述三种风格，其实都可以归类于往 HTML 里面插各种 HTML 语法以外的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;% … %&amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ … }}&lt;/code&gt;，那么还有没有别的方式嵌入动态内容呢？有一种有趣的设计叫做「模板属性语言」(TAL)，也就是说我们把动态内容写在正常 HTML 标签的自定义属性里。TAL 最大的好处是简化了开发者和设计师的协作，因为 TAL 能直接加在设计原型上，加上之后仍然是照常显示的 HTML，不经后端渲染直接用浏览器打开也不会感知到动态代码的存在。最早提出 TAL 的是 Python 编写的 Zope 2，其模板引擎 &lt;strong&gt;Zope Page Templates&lt;/strong&gt; 使用了一系列 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tal:&lt;/code&gt; 属性来引入动态内容。&lt;/p&gt;

&lt;p&gt;如今较为纯粹的例子是 Java 上的模板引擎 &lt;strong&gt;Thymeleaf&lt;/strong&gt;，自称「自然模板」。下面是自然模板的一个示例，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;th:text&lt;/code&gt; 会替换掉标签内的原有内容、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;th:each&lt;/code&gt; 会进行迭代：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{msgs.headers.name}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;th&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{msgs.headers.price}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Price&lt;span class=&quot;nt&quot;&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:each=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prod: ${allProducts}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${prod.name}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Oranges&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;th:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${#numbers.formatDecimal(prod.price, 1, 2)}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0.99&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;标签库&quot;&gt;标签库&lt;/h2&gt;

&lt;p&gt;既然能自定义 HTML 属性，那么可不可以自定义 HTML 标签呢？JSP 标准标签库（JSR-52: JSTL）便实践了这一想法，虽然自定义标签不再有自然模板的好处，但写起来会更方便不少。JSTL 定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;c:if test=&quot;${age &amp;gt;= 20}&quot;&amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;fmt:message key=&quot;i18n&quot;&amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;sql:query … &amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;x:parse … &amp;gt;&lt;/code&gt; 等四类标签，在属性上还可以使用表达式语言（JSR-341: EL）来插入动态内容，就像前述 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;c:if&amp;gt;&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${age &amp;gt;= 20}&lt;/code&gt; 那样。&lt;/p&gt;

&lt;p&gt;JSP 也允许用户定义 JSTL 以外的自定义标签，这不禁让我们联想起了如今的 &lt;strong&gt;Web Components&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PopUpInfo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;……&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// write element functionality in here&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;customElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;popup-info&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PopUpInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上代码便可以创建一个自定义标签 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;popup-info&amp;gt;&lt;/code&gt;，而该元素的行为和语义均可由用户自行决定。 React / Angular / Vue 等前端框架非常提倡这种可复用的组件，不过它们提供了更高层的抽象，让自定义组件更易写易用。&lt;/p&gt;

&lt;h2 id=&quot;haml&quot;&gt;Haml&lt;/h2&gt;

&lt;p&gt;前面的模板语言说到底都还是 HTML 的超集，而 Haml 则完全抛弃了 HTML 原有的语法，走向了截然不同的方向。Haml 全称 HTML 抽象标记语言，由 Sass 之父 Hampton Catlin 发明。Haml 的写法有点像 CSS selector，譬如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%p.sample#welcome Hello, World!&lt;/code&gt; 会被渲染为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p class=&quot;sample&quot; id=&quot;welcome&quot;&amp;gt;Hello, World!&amp;lt;/p&amp;gt;&lt;/code&gt;。Haml 有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; 前缀分别用来渲染表达式结果和控制流程，另外它跟 Python / Haskell 一样采用了越位规则，也就是说以缩进来界定文档结构。&lt;/p&gt;

&lt;p&gt;不过 Haml 需要在每个标签前面写 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt; 还是有点麻烦的，JavaScript 上的 &lt;strong&gt;Pug&lt;/strong&gt;（原名 Jade）对其进行了一些语法上的改进，后来又出口转内销，&lt;strong&gt;Slim&lt;/strong&gt; 把相似的语法带回了 Ruby：&lt;/p&gt;

&lt;div class=&quot;language-slim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;doctype&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;html
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Slim&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Examples
    &lt;span class=&quot;nt&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image/png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;favicon.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;#content&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;This&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;example&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;shows&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;you&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;what&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;a&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;basic&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Slim&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;file&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;looks&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;like&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;#items&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;tr&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.price&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;No&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;items&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;found&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;Please&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;add&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;some&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;inventory&lt;span class=&quot;nc&quot;&gt;.&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;Thank&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;you!
    &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;footer&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Copyright &lt;span class=&quot;ni&quot;&gt;&amp;amp;copy;&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说句题外话，我在用 Spring 写网站的时候曾经一度很困惑，过去不支持 Java 注解的时候，大家是如何忍受手写 XML 配置文件的呢？然而我开始写 Thymeleaf 模板的时候突然意识到，我自己对于手写 HTML 不也习以为常了吗？XML 配置文件正逐渐被 YAML / TOML 等新兴格式所取代，HTML 模板的未来又会如何呢？&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;虽然上述六种分类特意将 HTML 模板语言的范式孤立开来，但如今流行的前端框架往往集成了多种范式，譬如 Angular 和 Vue 都支持 Django 风格的插值和管道 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ interpolation | pipe }}&lt;/code&gt;，而写在 HTML 属性上的指令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p *ngIf=&quot;true&quot;&amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p v-if=&quot;true&quot;&amp;gt;&lt;/code&gt; 则类似于模板属性语言，众所周知它们也都支持自定义标签的组件化开发。这里我有意忽略了 React 的 JSX：在 JSX 中 JS 反客为主，HTML 组件变成了 JS 代码的一部分，恕我不算它是 HTML 模板语言了。&lt;/p&gt;

&lt;p&gt;总而言之，本文力求归纳了主流的 HTML 模板范式，但 Web 开发毕竟不是我的主业，行文难免有所疏漏，但愿不会贻笑大方。&lt;/p&gt;</content><author><name>孙耀珠</name></author><category term="领域专用语言" /><summary type="html">前端开发的本质，是把结构化的数据映射到 HTML。HTML 本身是静态的，因此模板引擎应运而生，接下了动态生成 HTML 的任务，直到近年来在前后端分离的浪潮下被面面俱到的前端框架所兼并。本文试图梳理出模板语言的主流范式，不过注意本文并非按照时间线编排，如果要还原历史的话，应该是 PHP (1995) → Zope 2 (1998) → JSTL (2002) → Django (2005) → Haml (2006) → Mustache (2009) → AngularJS (2010)。</summary></entry><entry><title type="html">Linux 内核性能演变</title><link href="https://blog.yzsun.me/linux-performance/" rel="alternate" type="text/html" title="Linux 内核性能演变" /><published>2020-04-10T00:00:00+00:00</published><updated>2020-04-10T00:00:00+00:00</updated><id>https://blog.yzsun.me/linux-performance</id><content type="html" xml:base="https://blog.yzsun.me/linux-performance/">&lt;blockquote&gt;
  &lt;p&gt;本文是我在《系统设计与实现》课程的热点话题阅读报告，内容来源于 Xiang (Jenny) Ren, et al. 发表在 SOSP 2019 的论文《&lt;a href=&quot;https://doi.org/10.1145/3341301.3359640&quot;&gt;An Analysis of Performance Evolution of Linux’s Core Operations&lt;/a&gt;》（下文简称 [&lt;em&gt;Ren19&lt;/em&gt;]）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#内核操作&quot; id=&quot;markdown-toc-内核操作&quot;&gt;内核操作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安全补丁&quot; id=&quot;markdown-toc-安全补丁&quot;&gt;安全补丁&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#幽灵补丁&quot; id=&quot;markdown-toc-幽灵补丁&quot;&gt;幽灵补丁&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#熔毁补丁&quot; id=&quot;markdown-toc-熔毁补丁&quot;&gt;熔毁补丁&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#slab-自由表随机化&quot; id=&quot;markdown-toc-slab-自由表随机化&quot;&gt;Slab 自由表随机化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#用户空间拷贝强化检查&quot; id=&quot;markdown-toc-用户空间拷贝强化检查&quot;&gt;用户空间拷贝强化检查&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#新增特性&quot; id=&quot;markdown-toc-新增特性&quot;&gt;新增特性&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#控制组内存控制器&quot; id=&quot;markdown-toc-控制组内存控制器&quot;&gt;控制组内存控制器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#透明大页&quot; id=&quot;markdown-toc-透明大页&quot;&gt;透明大页&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#缺页的局部性原理&quot; id=&quot;markdown-toc-缺页的局部性原理&quot;&gt;缺页的局部性原理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#用户空间缺页处理&quot; id=&quot;markdown-toc-用户空间缺页处理&quot;&gt;用户空间缺页处理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#错误配置&quot; id=&quot;markdown-toc-错误配置&quot;&gt;错误配置&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#强制上下文追踪&quot; id=&quot;markdown-toc-强制上下文追踪&quot;&gt;强制上下文追踪&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cpu-闲置状态&quot; id=&quot;markdown-toc-cpu-闲置状态&quot;&gt;CPU 闲置状态&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tlb-大小识别&quot; id=&quot;markdown-toc-tlb-大小识别&quot;&gt;TLB 大小识别&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#结语&quot; id=&quot;markdown-toc-结语&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1991年9月17日，赫尔辛基大学的大四学生 Linus Torvalds 向 ftp.funet.fi 上传了自己课余时间编写的 Linux 0.01 源代码，由此揭开了开源操作系统的崭新篇章。如今，Linux 已成为最主流的服务器操作系统，TOP500 榜单中的超级计算机更是悉数采用。在高性能计算对 Linux 依赖越来越强的大背景下，[&lt;em&gt;Ren19&lt;/em&gt;] 对近年来 Linux 内核的核心操作性能进行了系统性的评估，得到一个骇人听闻的结论：绝大多数内核操作的性能均有退化。不过值得庆幸的是，研究团队发现可以通过编译配置或是简单的补丁来禁用掉那些导致性能退化的内核改动。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;[&lt;em&gt;Ren19&lt;/em&gt;] 之所以选择对内核操作（包括 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epoll&lt;/code&gt; 等系统调用以及上下文切换等）进行分析，是因为随着硬盘读写和网络设备速度的提升，今后服务器的性能瓶颈可能会是操作系统的内核操作。以前相关的操作系统性能研究大多着眼于不同处理器架构上的性能差异，而如今 x86-64 架构已经一统天下了，因此保持硬件参数不变对操作系统进行时间尺度的分析更具有现实意义。研究团队基于 Ubuntu 发行版的默认配置，选取了 Linux 内核 3.0 到 4.20 共 41 个版本进行了基准测试，它们的发布时间横跨 2011 年到 2018 年。为了确定哪些是实际场景中常用的系统调用，研究团队用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace&lt;/code&gt; 命令统计了 Spark、Redis、PostgreSQL、Chromium 和 GCC 等典型应用的计算任务，从中选取了八组总用时最多的内核操作进行基准测试。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/linux-performance.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基准测试的最终结果如上图 (a) 所示：以 4.0 版本的内核为基准，除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;big-write&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;big-munmap&lt;/code&gt; 之外的所有内核操作都不同程度地变慢了，其中退步最大的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; 甚至比之前慢了 136%。为了找出导致这些内核操作性能退化的原因，研究团队调查了 Linux 内核各版本之间的代码变化，最终确认了 11 处关键性改动，如上图 (b) 所示。这些严重影响了 Linux 内核性能的改动可以被归为三类：安全补丁、新增特性和错误配置。&lt;/p&gt;

&lt;p&gt;不过在解释这些导致性能退化的原因之前，我们先盘点一下研究团队筛选出的内核操作都有哪些。&lt;/p&gt;

&lt;h2 id=&quot;内核操作&quot;&gt;内核操作&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;上下文切换：当中断发生时，系统需要将当前进程的状态保存进进程控制块（PCB），以便处理器切换到下一个进程。该测试让两个进程通过管道不停地互相通信，以强制进行上下文切换。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt;：读写文件。为了测试不同规模文件的读写性能，文件大小定为了一、十、万页三个档次（1 页 ＝ 4096 字节）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;munmap&lt;/code&gt;：将文件映射到内存，或取消其映射。测试文件大小同上。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork&lt;/code&gt;：创建一个跟自身一样的新进程。big-fork 在进程复制前映射了 12000 页文件。&lt;/li&gt;
  &lt;li&gt;线程创建：使用 POSIX threads 创建线程（本质上是 Linux 轻量级进程）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recv&lt;/code&gt;：使用 Berkeley sockets 进行本地进程间通信。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epoll&lt;/code&gt;：均为 Reactor 模式的 I/O 多路复用（multiplexing）机制，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; 列入了 POSIX 标准但性能不够好，而新的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epoll&lt;/code&gt; 于 Linux 2.5.44 加入。&lt;/li&gt;
  &lt;li&gt;缺页：当进程试图访问其地址空间中的数据时，若内存管理单元（MMU）发现该虚拟地址尚未映射到内存，则会触发缺页中断。该测试会访问刚刚 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap&lt;/code&gt; 上来的页，触发缺页让系统真正把文件从硬盘拷贝到内存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;盘点了基准测试中的内核操作之后，让我们按照分类逐一解释导致 Linux 内核性能退化的原因。关于头两个补丁所涉及的幽灵和熔毁漏洞的详细介绍，可以参考&lt;a href=&quot;/spectre-meltdown-foreshadow/&quot;&gt;我之前的文章&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;安全补丁&quot;&gt;安全补丁&lt;/h2&gt;

&lt;h3 id=&quot;幽灵补丁&quot;&gt;幽灵补丁&lt;sup id=&quot;fnref:spectre&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:spectre&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;第一个安全补丁针对的是 Spectre-V2 的分支目标注入，其为 Linux 内核编译配置加入了默认开启的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RETPOLINE&lt;/code&gt; 选项。该选项会向 GCC 添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-mindirect-branch=thunk-extern&lt;/code&gt; 参数，从而绕过处理器对间接跳转指令的预测执行。该补丁让半数测试慢了 10% 以上，而影响较为严重的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; 一下子慢了 68%。研究团队对其中的原因进行了调查，发现 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; 系列函数的代码有三处频繁执行的间接跳转，譬如其中一处位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs/select.c&lt;/code&gt;（4.18 版本之前）：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f_op-&amp;gt;poll&lt;/code&gt; 是个函数指针，因此该函数调用会被编译为间接跳转指令。因为我们通过编译选项愚弄了分支预测器，导致每次都会有三十多个时钟周期的延时，这也就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt; 系列函数变慢的原因。研究团队尝试用 if-else 枚举函数指针所有可能的值，将间接跳转改为了直接跳转，成功地将减速比从 68% 降到了 5.7%。&lt;/p&gt;

&lt;h3 id=&quot;熔毁补丁&quot;&gt;熔毁补丁&lt;sup id=&quot;fnref:spectre:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:spectre&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;第二个安全补丁针对的是臭名昭著的 Meltdown 漏洞，也就是广为人知的内核页表隔离（KPTI）补丁。为了防止恶意程序读取任意内存数据，KPTI 分离了用户态和内核态的页表，用户态无法再访问绝大部分内核地址空间。KPTI 最大的开销来源于进出内核态需要切换页表和清空转译后备缓冲器（TLB），这包括页表指针寄存器（CR3）的两次写入和 TLB 的大量未命中。以前进出内核态的开销少于 100 个时钟周期，而 CR3 写入带来了 400 多个周期的开销，而后续 TLB 未命中的中断处理程序能为 big-read 带来 6000 个周期的额外开销。&lt;/p&gt;

&lt;p&gt;为了改善这种情况，Linux 内核开发者利用英特尔处理器的上下文标识符（PCID）避免了每次清空 TLB：不同的 PCID 对应不同的地址空间，每个 TLB 条目可以附上 PCID 以同时管理多个地址空间的页表缓存。PCID 优化给 KPTI 带来了巨大的性能提升，能将小规模测试的减速比从 113% 从 47%，不过这无法优化掉 CR3 写入的开销，因为当前活跃的 PCID 仍需写入 CR3 寄存器。&lt;/p&gt;

&lt;p&gt;如果对于性能有极致的追求，想要彻底关掉 KPTI，有两种办法：一是编译内核的时候就在配置中关掉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_TABLE_ISOLATION&lt;/code&gt;，二是在内核启动参数中加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nopti&lt;/code&gt;。AMD 的用户则完全不必担心，因为 Meltdown 攻击完全不影响 AMD 处理器，所以 KPTI 已被自动禁用了。&lt;/p&gt;

&lt;h3 id=&quot;slab-自由表随机化&quot;&gt;Slab 自由表随机化&lt;sup id=&quot;fnref:slab&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:slab&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Slab 分配器最初是为 SunOS 内核数据结构设计的内存分配器，如今被 Linux 和 FreeBSD 等操作系统广泛使用，譬如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork&lt;/code&gt; 就在用它来分配 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mm_struct&lt;/code&gt; 对象。Slab 分配器使用一个自由表（free list）串联未分配的内存区域，因为邻接的往往都是连续的内存地址，因此这种可预测性容易被用来进行缓冲区溢出攻击。从 Linux 4.7 开始，编译配置加入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SLAB_FREELIST_RANDOM&lt;/code&gt; 选项，启用后会用 Fisher-Yates 随机排列算法打乱自由表的顺序。不过安全性也伴随着性能的代价，big-fork 变慢了 37%，big-select 系列函数平均变慢了 41%，这背后有两个原因：一是随机化自由表本身需要时间，二是不连续分配的内存破坏了访存局部性。&lt;/p&gt;

&lt;h3 id=&quot;用户空间拷贝强化检查&quot;&gt;用户空间拷贝强化检查&lt;sup id=&quot;fnref:usercopy&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:usercopy&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Linux 内核代码常常需要在内核空间和用户空间之间拷贝数据，这就需要用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_from_user&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_to_user&lt;/code&gt; 两个函数。如果内核开发者没有处理好相关调用，从用户空间拷贝了过多数据会导致缓冲区溢出，向用户空间拷贝了过多数据会造成内核空间数据泄漏。之前这两个函数只检查用户空间指针，从 Linux 4.8 引入的 Hardened Usercopy 补丁开始，内核空间指针也会进行非常严格的安全性检查，包括不允许为空指针、不允许指向 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kmalloc&lt;/code&gt; 分配的零长度区域、不允许指向内核代码段、如果指向 Slab 则不允许超过 Slab 分配器分配的长度、如果涉及到栈则不允许超出当前进程的栈空间等等。这些繁琐的检查使得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poll&lt;/code&gt; 测试变慢了将近 18%，不过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;epoll&lt;/code&gt; 很少进行拷贝所以影响不大；而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read&lt;/code&gt; 虽然会向用户空间拷贝数据，但由于不是 Slab 所以也几乎不受影响。&lt;/p&gt;

&lt;h2 id=&quot;新增特性&quot;&gt;新增特性&lt;/h2&gt;

&lt;h3 id=&quot;控制组内存控制器&quot;&gt;控制组内存控制器&lt;sup id=&quot;fnref:cgroups&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:cgroups&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;控制组（cgroups）及其内存控制器早在 Linux 2.6.24 就引入了，这也是 LXC 和 Docker 等容器化技术的基础之一。不过即使在没有使用控制组功能时，内存控制器对内存使用额的监控工作仍然造成了 big-munmap 81% 的性能损失。直到 Linux 3.17，内核开发者才对其做了批处理的优化，将性能损失降到了 9%。&lt;/p&gt;

&lt;h3 id=&quot;透明大页&quot;&gt;透明大页&lt;sup id=&quot;fnref:thp&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:thp&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;饱受争议的透明大页（transparent hugepage）也是影响访存性能的一大因素。众所周知，页是虚拟内存管理的最小单位，通常一页默认是 4KiB，但也可以手动设定为诸如 2MiB 的大页。不过由于手动管理页的大小比较麻烦，于是 Linux 等操作系统提供了透明大页功能，系统能够自动提升或下调页的大小。积极来讲，大页能够减少页表占用空间、降低缺页频率、并且能提高 TLB 命中率，对于大量使用内存的程序来说会有性能提升；然而另一方面，透明大页容易导致内部碎片化，低缺页率的代价是每次缺页加载时间显著增加，并且其后台进程也带来了额外开销。如今透明大页已经被默认禁用了，但禁用透明大页给极端的内存密集型测试 huge-read 带来了 83% 的性能退化。&lt;/p&gt;

&lt;h3 id=&quot;缺页的局部性原理&quot;&gt;缺页的局部性原理&lt;sup id=&quot;fnref:faultaround&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:faultaround&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Linux 3.15 新增的 fault around 策略旨在减少次要缺页（minor page fault）。如果当前请求的这一页没有页表项，但实际上已经装进页缓存了，只需通知 MMU 建立映射关系即可，则这种缺页被称为次要缺页。在遇到次要缺页时，Linux 不仅会处理当前页，还会帮前后的若干页都建立映射关系。当然，这种优化策略是建立在访存局部性的基础之上的，像 big-pagefault 这种极端的不满足局部性的测试，就出现了高达 54% 的性能退化。&lt;/p&gt;

&lt;h3 id=&quot;用户空间缺页处理&quot;&gt;用户空间缺页处理&lt;sup id=&quot;fnref:userfaultfd&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:userfaultfd&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Linux 4.6 新增的系统调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userfaultfd&lt;/code&gt; 支持了在用户态处理指定范围内的缺页，这对于用户态的虚拟机监视器（VMM / Hypervisor）相当有帮助。譬如在进行虚拟机迁移之后，VMM 可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userfaultfd&lt;/code&gt; 按需拷贝内存页，这种模式被称为 post-copy。不过 big-fork 由于这个新特性损失了 4% 的性能，因为在进程复制时需要检查父进程内存区域关联的用户空间缺页处理信息。&lt;/p&gt;

&lt;h2 id=&quot;错误配置&quot;&gt;错误配置&lt;/h2&gt;

&lt;h3 id=&quot;强制上下文追踪&quot;&gt;强制上下文追踪&lt;/h3&gt;

&lt;p&gt;在 Ubuntu 发行版中，Linux 内核编译配置中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTEXT_TRACKING_FORCE&lt;/code&gt; 选项曾被错误开启，这是在开发降低调度时钟滴答频率&lt;sup id=&quot;fnref:rsct&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rsct&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;（RSCT）功能时用来测试上下文追踪的调试选项。时钟滴答（tick）本质上就是定时器芯片产生的时钟中断，源源不绝的时钟中断为更新系统时间、执行进程调度提供了时机，但在处理器闲置时过于频繁的中断会增加功耗，而且在运行单个计算密集型程序时会造成干扰。因此，Linux 内核编译配置提供了三种 RSCT 选项（选项中的 HZ 意为每秒的时钟中断数，Linux 目前默认为 250）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HZ_PERIODIC&lt;/code&gt; 表示永不忽略时钟滴答；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO_HZ_IDLE&lt;/code&gt; 表示在处理器闲置时忽略时钟滴答，这是默认选项；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NO_HZ_FULL&lt;/code&gt; 表示在处理器闲置或只有一个可执行的任务时忽略时钟滴答，建议只在进行实时计算或某些高性能计算任务时开启此选项。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在开启了 RSCT 后，平时在时钟中断时做的工作就得挪到用户态和内核态切换的时候做，这些工作就被称为上下文追踪。这些工作包括统计在用户态和内核态的执行时间，以及处理 read-copy-update 同步机制注册的回调。强制上下文追踪会在所有处理器核心上都进行上下文追踪，不管有没有开启 RSCT，这导致前面的所有测试平均变慢了 50%。&lt;/p&gt;

&lt;h3 id=&quot;cpu-闲置状态&quot;&gt;CPU 闲置状态&lt;/h3&gt;

&lt;p&gt;Linux 3.9 为英特尔处理器的 Haswell 架构（研究团队在用）引入了一个补丁，让内核的驱动模块能够更加细粒度地控制处理器的功耗和闲置状态。不过这个补丁并没有移植到当时尚未停止维护的旧版本上，导致之前的版本容易陷入更深的闲置状态从而降频，打了补丁能将有效工作频率提高 31%。&lt;/p&gt;

&lt;h3 id=&quot;tlb-大小识别&quot;&gt;TLB 大小识别&lt;/h3&gt;

&lt;p&gt;Linux 3.14 又为英特尔处理器引入了一个补丁，能够识别其二级 TLB 的大小以对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;munmap&lt;/code&gt; 的实现进行优化。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;munmap&lt;/code&gt; 时让 TLB 项失效有两种策略：一是就处理那些失效项，二是清空整个 TLB。在这个补丁之前，只有一级 TLB 的大小会被纳入考虑，导致只要超过一项就会清空整个 TLB，大大降低了之后页表缓存的命中率。&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;研究团队通过时间维度上的对比分析，揪出了 11 条造成 Linux 内核性能退化的原因，其中 88% 的影响是强制上下文追踪、熔毁补丁、粗粒度 CPU 闲置状态、幽灵补丁四项导致的。因为错误配置属于可以避免的人为错误，而新增特性对性能的影响面并不大，所以真正给 Linux 性能带来致命一击的就是幽灵系列漏洞的安全补丁。所以说，预测执行是一把双刃剑，想要绝对的安全就不得不放弃性能。&lt;/p&gt;

&lt;p&gt;另外，正如研究团队所说，内核性能调优是个相当费时费力的工作。如果没有大量的精力投入到 Linux 这个快速迭代的庞然大物上，还是购买 RHEL 等高度调优的商业发行版更加划算。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:spectre&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/744287/&quot;&gt;https://lwn.net/Articles/744287/&lt;/a&gt; &lt;a href=&quot;#fnref:spectre&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:spectre:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:slab&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/685047/&quot;&gt;https://lwn.net/Articles/685047/&lt;/a&gt; &lt;a href=&quot;#fnref:slab&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:usercopy&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/695991/&quot;&gt;https://lwn.net/Articles/695991/&lt;/a&gt; &lt;a href=&quot;#fnref:usercopy&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:cgroups&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/256389/&quot;&gt;https://lwn.net/Articles/256389/&lt;/a&gt; &lt;a href=&quot;#fnref:cgroups&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:thp&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/359158/&quot;&gt;https://lwn.net/Articles/359158/&lt;/a&gt; &lt;a href=&quot;#fnref:thp&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:faultaround&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/588802/&quot;&gt;https://lwn.net/Articles/588802/&lt;/a&gt; &lt;a href=&quot;#fnref:faultaround&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:userfaultfd&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/636226/&quot;&gt;https://lwn.net/Articles/636226/&lt;/a&gt; &lt;a href=&quot;#fnref:userfaultfd&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rsct&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://lwn.net/Articles/549580/&quot;&gt;https://lwn.net/Articles/549580/&lt;/a&gt; &lt;a href=&quot;#fnref:rsct&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>孙耀珠</name></author><category term="文献阅读" /><summary type="html">本文是我在《系统设计与实现》课程的热点话题阅读报告，内容来源于 Xiang (Jenny) Ren, et al. 发表在 SOSP 2019 的论文《An Analysis of Performance Evolution of Linux’s Core Operations》（下文简称 [Ren19]）。 1991年9月17日，赫尔辛基大学的大四学生 Linus Torvalds 向 ftp.funet.fi 上传了自己课余时间编写的 Linux 0.01 源代码，由此揭开了开源操作系统的崭新篇章。如今，Linux 已成为最主流的服务器操作系统，TOP500 榜单中的超级计算机更是悉数采用。在高性能计算对 Linux 依赖越来越强的大背景下，[Ren19] 对近年来 Linux 内核的核心操作性能进行了系统性的评估，得到一个骇人听闻的结论：绝大多数内核操作的性能均有退化。不过值得庆幸的是，研究团队发现可以通过编译配置或是简单的补丁来禁用掉那些导致性能退化的内核改动。</summary></entry><entry><title type="html">跨越国境的汉字</title><link href="https://blog.yzsun.me/cjkv/" rel="alternate" type="text/html" title="跨越国境的汉字" /><published>2020-03-29T00:00:00+00:00</published><updated>2020-03-29T00:00:00+00:00</updated><id>https://blog.yzsun.me/cjkv</id><content type="html" xml:base="https://blog.yzsun.me/cjkv/">&lt;p&gt;我身边的同学们大都只懂汉语和英语，聊天时偶尔会发现他们对日本、韩国、朝鲜和越南的汉字使用知之甚少。比如有人见到汉字就觉得是汉语，但实际上日韩朝越都在以自己的方式使用着汉字，比如很难说「大変面白」「本当上手」也算是规范汉语，虽然这些字我们都认识。&lt;/p&gt;

&lt;p&gt;另一个常见的误解是：为什么 Matsumoto Yukihiro 被翻译成了松本行弘？为什么 Jang Won-young 被翻译成了张员瑛？首先要意识到英语不是日韩的母语，因此上面的罗马字也只是音译。实际上 Matz 的姓名本来就是汉字「松本行弘」，只是这四个字都用了日语训读，导致中日读音大相径庭。而韩国的情况更麻烦一点，因为他们现在几乎不用汉字了，所以姓名里的谚文对应哪个汉字要么靠猜要么询问本人。张员瑛的原名是「장원영」，一开始大家猜测其对应的汉字是「張元英」，不过很遗憾猜错了，后来官方宣布她的姓名汉字是「張員瑛」。当然日本人名也有要猜的时候，比如说「松山ケンイチ」「石原さとみ」（也都猜错过，哈哈哈哈）。不过如今对汉字如此执着的也只有中国了，日韩互译对方人名的时候并不会追溯到汉字，而是简单粗暴地使用音译：松本行弘在韩语里就叫 마츠모토 유키히로，张员瑛在日语里就叫 チャン・ウォニョン。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;我去日本交流的时候，遇到的第一个难题就是我的名字在日本应该怎么叫。在登记在留卡的时候，外国人的姓名默认都用拉丁字母，也就是我护照上的拼音「SUN YAOZHU」。不过之后在办学籍或者银行账户的时候，还需要提供振假名，也就是姓名的读法，于是士大夫擅作主张照着拼音帮我填上了「スン・ヤオズ」……其实日本对于姓名的读法是相当宽容的，完全遵照名从主人的原则，像「村山彩希」的名字念作「ゆいり」这种毫无根据的读法也不会提出异议。只是给我起的这个振假名发音过于奇怪，以及这读法跟汉字脱钩让我有点不爽。后来我自己使用的读法都是「ソン・ヨウジュ」，是我姓名的汉字在日语中的音读，这也是日本对中国人名的正统处理方式。&lt;/p&gt;

&lt;p&gt;上面提到的音读与训读是汉字文化圈特有的读音现象，以日语为例，所谓音读就是保留汉字传入日本时的汉语读音（包括吴音、汉音、唐音等），而所谓训读就是用日本固有词汇的读音来念同义的汉字。换句话说，音读词都是以中国为源头的汉语词（不过后来日本也发明了相当多的和制汉语并回流了中国），训读词都是借用汉字表记的和语词。比如「人」字，在单独出现时用训读 ひと，这是日本固有的和语词，而在汉语词「&lt;ruby&gt;人間&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;にんげん&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」中读吴音、「&lt;ruby&gt;人類&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;じんるい&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」中读汉音。不仅如此，日语词汇中还有好多和汉混血儿，比如「&lt;ruby&gt;湯桶&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;ゆとう&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」前训读后音读，相反地「&lt;ruby&gt;重箱&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;じゅうばこ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」前音读后训读，所以很多生僻词不注音的话日本人也是不会念的。现代韩语在这方面就简单得多，除了少数多音字之外汉字一字一音（都是音读），其固有词不用汉字只用谚文表记；而越南语的汉字也几乎都读汉越音（即音读），极少有训读现象。&lt;/p&gt;

&lt;h2 id=&quot;书写系统&quot;&gt;书写系统&lt;/h2&gt;

&lt;p&gt;过去，中日朝越等国都有用文言文作为书面语言，因此各国受过高等教育的文人都能跨越语言障碍进行笔谈。然而随着各国语言文字的演进，文言文已全面被白话文所取代，并且中国和日本各自简化了汉字，韩朝和越南渐渐废止了汉字，东亚汉字文化圈的联系已大不如从前了。下面先引用一张来自&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:漢字文化圈%EF%BC%8F汉字文化圈_·_한자_문화권_·_Vòng_văn_hóa_chữ_Hán_·_漢字文化圏.svg&quot;&gt;维基百科&lt;/a&gt;的图片来形象地展示一下汉字文化圈内存在的书写系统（黑色为汉语词、绿色为固有词、蓝色为外来词）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cjkv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;日语不仅读法复杂，其书写系统也相当复杂，有汉字（漢字）、平假名（ひらがな）、片假名（カタカナ）三套体系，假名只表音不表意，各有约五十音。汉字是从中国舶来的自不必说，而平假名和片假名则由汉字草书和偏旁演变而来，他们分别扮演不同的角色：汉字多用来表记实词、平假名多用来表记虚词，片假名多用来表记外来语。虽然日语中的汉字也完全可以被读音所对应的假名取代，但为了视觉上方便断句以及消除同音词的歧义，大多数人还是用汉字写实词的。&lt;/p&gt;

&lt;p&gt;而朝鲜半岛过去跟日本相仿，是汉谚混写的，但朝鲜从 1948 年完全废除了汉字，而韩国也从上世纪末开始渐渐停止了汉字的使用，现在几乎只使用谚文。谚文在韩国现称韩字（한글），是一套非常有意思的表音系统，其诞生时间很晚，直到 15 世纪才发明出来。谚文由声母、韵母和韵尾三部分拼成，譬如 한 的声母是 ㅎ (h)、韵母是 ㅏ (a)、韵尾是 ㄴ (n)，合起来就是 han。得益于这种模块化的组合方式，谚文理论上可以拼装出 19×21×28 = 11172 种音节，信息密度远高于其他表音文字。&lt;/p&gt;

&lt;p&gt;在 19 世纪中叶越南被法国占领之前，越南语也是主要使用汉字的，他们把源自中国的汉字称为儒字，把汉语词称为汉越词。不过儒字并不能准确记录越南的固有词汇，于是他们基于儒字发明了喃字（𡨸喃）。这些字大部分都是形声字，譬如「&lt;ruby&gt;𡨸&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;chữ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」，它借了「&lt;ruby&gt;宁&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;trữ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」的音和「&lt;ruby&gt;字&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;tự&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」的意。这种为本土语言造字的现象有点像粤语字，「哋」「啲」等字在汉语官话中也没有，但在粤语地区广泛使用。然而后来在法属印度支那时期，越南语的罗马化方案渐渐流行起来，并于 20 世纪中叶越南独立后取代了儒字和喃字成为越南唯一官方文字，被称为国语字（chữ quốc ngữ）。&lt;/p&gt;

&lt;h2 id=&quot;各地汉字&quot;&gt;各地汉字&lt;/h2&gt;

&lt;p&gt;正如前面所介绍，日本仍在广泛使用汉字，韩国、朝鲜和越南曾经使用过汉字，而中国大陆、港澳、台湾、新加坡目前以汉语为官方语言，当然也在用汉字，那么各地汉字长得一样吗？答案是否定的。这个问题既涉及到汉字简化，也涉及到字形标准，甚至还涉及到日本当用汉字的问题。&lt;/p&gt;

&lt;p&gt;中国最早推行汉字简化是在国民政府时期，中华民国教育部于 1935 年公布《&lt;a href=&quot;https://zh.wikisource.org/wiki/第一批简体字表&quot;&gt;第一批简体字表&lt;/a&gt;》，共计 324 字，但因考试院院长戴季陶坚决反对，最终未能实行。第二个尝试简化汉字的是日本，1946 年日本内阁发布了《&lt;a href=&quot;https://www.bunka.go.jp/kokugo_nihongo/sisaku/joho/joho/kakuki/syusen/tosin02/index.html&quot;&gt;当用汉字表&lt;/a&gt;》，共计 1850 字，其中一百余字采用新字体，也就是简化汉字。不过这份《当用汉字表》后来在 1981 年被《&lt;a href=&quot;https://www.bunka.go.jp/kokugo_nihongo/sisaku/joho/joho/kijun/naikaku/kanji/&quot;&gt;常用汉字表&lt;/a&gt;》所取代，2010 年最新版本共收录 2136 字，其中三百余字采用新字体，另外《人名用汉字表》和《表外汉字字体表》亦引入了一些新字体。中华人民共和国成立后，文字改革委员会重启了汉字简化工作，并于 1955 年发表了《&lt;a href=&quot;https://zh.wikisource.org/wiki/漢字簡化方案&quot;&gt;汉字简化方案&lt;/a&gt;（草案）》，次年国务院通过决议确立了其规范汉字的地位，后来又于 1964 年推出了改进版本《&lt;a href=&quot;https://zh.wikisource.org/wiki/简化字总表&quot;&gt;简化字总表&lt;/a&gt;》。1977 年，文字改革委员会发表《&lt;a href=&quot;https://zh.wikipedia.org/wiki/二简字&quot;&gt;第二次汉字简化方案&lt;/a&gt;（草案）》，尝试进一步简化汉字，不过最终遭到废止。因此，中国最新的汉字规范 2013 年《&lt;a href=&quot;https://zh.wikisource.org/wiki/通用规范汉字表&quot;&gt;通用规范汉字表&lt;/a&gt;》仍沿用第一次汉字简化方案，共简化了 2461 字。新加坡则于 1969 年推出过自己的《&lt;a href=&quot;https://zh.wikipedia.org/wiki/新加坡漢字&quot;&gt;简体字表&lt;/a&gt;》，但 1976 年开始完全转用中国的简化方案。&lt;/p&gt;

&lt;p&gt;综上所述，中国大陆和新加坡采用同一套汉字简化方案，而日本用自己的新字体，剩下的港澳台韩朝越都没有官方推行汉字简化。中日两国的简化方案，既有简化相同的「國／国」，也有简化不同的「譯／译／訳」，既有中国简化日本没简的「東／东」，也有日本简化中国没简的「假／仮」，不过总体来说中国比日本简化了更多汉字。另外有一个跟繁简相近的概念是异体字，也就是长期存在的读音和意思相同、但字形不同的汉字。不同的地区会选择不同的异体字作为正字，譬如中国大陆以「够」为正字而港台以「夠」为正字，香港用「裏」而台湾用「裡」等等。日本还有一个更复杂的情况是《当用汉字表》引起的同音假借现象：1946 年的《当用汉字表》将出版物的汉字使用限制在了最常用的 1850 字内，致使大量表外汉字需要用同音汉字进行替代。日本国语审议会为此发表了《&lt;a href=&quot;https://www.bunka.go.jp/kokugo_nihongo/sisaku/joho/joho/kakuki/03/bukai03/03.html&quot;&gt;同音汉字转写&lt;/a&gt;》的报告供出版业参考，譬如「綜合」转写为「総合」、「智慧」转写为「知恵」等等。虽然当用汉字的限制已于 1981 年废除，但大量日语词汇的用字已经不可逆转地改变了。&lt;/p&gt;

&lt;p&gt;各国的印刷字形标准也不尽相同。举前面那张图中的「圈」为例，这里中国大陆和台湾字形基本相同，除了台湾将捺改成了点，日本字形则把下边的「㔾」改成了「己」并且捺会贯穿上面一横，而韩国字形上边不是「丷」而是「ハ」。韩国字形与传统的康熙字典体最为接近，而中国大陆和台湾则有成文的新字形标准——《印刷通用汉字字形表》《常用国字标准字体表》，各有各的不同。&lt;/p&gt;

&lt;h2 id=&quot;罗马字&quot;&gt;罗马字&lt;/h2&gt;

&lt;p&gt;对于西方人来说，汉字已经是极大的障碍了。不仅如此，日语使用假名、韩语使用谚文，没背过字母表的人根本无法认读它们。因此日语和韩语都有各自的罗马化（拉丁字母转写）方案，就像汉语拼音和越南国语字一样。上面提到的 Matsumoto Yukihiro 和 Jang Won-young 就分别是 まつもと ゆきひろ 和 장원영 的罗马字。日韩的罗马字方案有很多种，日语常用的是&lt;a href=&quot;https://zh.wikipedia.org/wiki/平文式罗马字&quot;&gt;平文式罗马字&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/训令式罗马字&quot;&gt;训令式罗马字&lt;/a&gt;，而韩语常用的是&lt;a href=&quot;https://zh.wikipedia.org/wiki/馬科恩-賴肖爾表記法&quot;&gt;马科恩-赖肖尔表记法&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/文化观光部2000年式&quot;&gt;文观部2000年式&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;日语平文式和训令式的主要区别在于 し/しゃ/じ/じゃ、ち/ちゃ/ぢ/ぢゃ、つ/づ、ふ 相关的表记，平文式记为 shi/sha/ji/ja、chi/cha/ji/ja、tsu/zu、fu，而训令式记为 si/sya/zi/zya、ti/tya/di/dya、tu/du、hu。换句话说，平文式更接近真实读音，而训令式更加规则。因此，虽然训令式是 ISO 3602 标准，但日常生活中还是平文式用得更多，譬如 Matsumoto Yukihiro 就是平文式罗马字。&lt;/p&gt;

&lt;p&gt;韩语马赖式和文观部式的主要区别在于元音 ㅓ、ㅕ、ㅝ、ㅡ、ㅢ 和辅音 ㄱ、ㄷ、ㅂ、ㅈ、ㅉ 用在声母时的表记，马赖式记为 ŏ、yŏ、wŏ、ŭ、ŭi 和 k、t、p、ch、tch，而文观部式记为 eo、yeo、wo、eu、ui 和 g、d、b、j、jj。目前朝鲜官方使用稍作修改的马赖式，韩国官方使用文观部式，但韩国民众日常转写时并不一定遵循，譬如 Jang Won-young 就不是两种方案的任何一种。&lt;/p&gt;

&lt;p&gt;这里顺便提一下汉语的罗马化方案，其中我们最熟悉的当然是已经成为 ISO 7098 标准的汉语拼音，然而汉语拼音在港澳台并不通行。首先，台湾跟中国大陆最不同的是他们使用注音符号（ㄅㄆㄇㄈ）而非拉丁字母来给汉字注音，所以台湾人并没有在课堂上学过如何拼注罗马拼音。台湾政府早期采用过&lt;a href=&quot;https://zh.wikipedia.org/wiki/國語羅馬字&quot;&gt;国语罗马字&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/國語注音符號第二式&quot;&gt;注音符号第二式&lt;/a&gt;，陈水扁时代则推行过&lt;a href=&quot;https://zh.wikipedia.org/wiki/通用拼音&quot;&gt;通用拼音&lt;/a&gt;，马英九时代又开始推行汉语拼音，而民众大多基于&lt;a href=&quot;https://zh.wikipedia.org/wiki/威妥瑪拼音&quot;&gt;威妥玛拼音&lt;/a&gt;来拼写自己的名字。威妥玛拼音早在 19 世纪中叶由英国驻华公使发明，相对比较符合英语使用者的习惯，譬如台北（Taipei）、台中（Taichung）、高雄（Kaohsiung）等都约定俗成地使用了威妥玛拼音，而没有遵循任何时期的政府规范。以威妥玛拼音为基础的&lt;a href=&quot;https://zh.wikipedia.org/wiki/郵政式拼音&quot;&gt;邮政式拼音&lt;/a&gt;在中国大陆也留下了深远的影响，譬如北京（Peking）、苏州（Soochow）等，北大、苏大的英文名用的就是这套邮政式拼音。香港亦有数套粤语拼音方案并行，人名和地名一般使用&lt;a href=&quot;https://zh.wikipedia.org/wiki/香港政府粵語拼音&quot;&gt;香港政府粤语拼音&lt;/a&gt;，而香港语言学学会则在推行&lt;a href=&quot;https://zh.wikipedia.org/wiki/香港語言學學會粵語拼音方案&quot;&gt;粤拼&lt;/a&gt;以求统一教育界的粤语拼音使用。&lt;/p&gt;

&lt;h2 id=&quot;输入法&quot;&gt;输入法&lt;/h2&gt;

&lt;p&gt;输入法也是汉字文化圈的特产，因为西方国家通过调整键盘布局就能键入各种表音文字，常用语言只有汉字才非得要输入法才能键入。因为中国大陆一般使用拼音输入法、台湾一般用注音输入法，所以我一直很好奇香港人是不是会用粤拼输入法。后来发现粤拼在粤语地区仍不普及，香港人一般用仓颉输入法或其简化版本速成输入法，都属于字形输入法。&lt;/p&gt;

&lt;p&gt;日韩本身也有自己的键盘布局，用来快捷地键入假名和谚文。但对于我们用 QWERTY 键盘的外国人来说，就只能学习罗马字输入法了。macOS 自带的日语输入法还好，能兼容平文式和训令式罗马字，但韩语输入法就相当令人迷惑了。macOS 列出的韩语键盘共有五种：2-Set、3-Set、390 Sebulshik、&lt;ruby&gt;工振厅罗马字&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;GongjinCheong Romaja&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;、HNC 罗马字。前三个对应的是三种不同的&lt;a href=&quot;https://en.wikipedia.org/wiki/Keyboard_layout#Hangul_(for_Korean)&quot;&gt;韩语键盘布局&lt;/a&gt;，这里就不深究了，我也不吐槽苹果标新立异地把 Sebeolsik 拼成 Sebulshik 是什么心态了。后面两个明显是我们需要的罗马字输入法，但问题来了：这里的工振厅和 HNC 都是啥呢？&lt;/p&gt;

&lt;p&gt;调查一番可以发现，工振厅是已于 1996 年撤销的韩国工业振兴厅，HNC 是韩国办公软件公司 Hancom (Haansoft)。从现存资料来看，工振厅并没有发布过罗马字方案，但经过我抽丝剥茧地考证，终于发现有韩国媒体报道过工振厅参与了韩朝双方关于 &lt;a href=&quot;https://www.iso.org/standard/20564.html&quot;&gt;ISO/TR 11941:1996&lt;/a&gt; 的谈判，不过双方并没有就最终草案达成一致（正因如此韩语罗马字尚无国际标准可循）。所以我认为工振厅罗马字就是指这份已撤回的国际标准草案的韩方版本，其与韩国现行的文观部罗马字的比较可以参见&lt;a href=&quot;http://www.eki.ee/wgrs/rom2_ko.pdf&quot;&gt;这份报告&lt;/a&gt;或者&lt;a href=&quot;http://sori.org/hangul/romanizations.html&quot;&gt;这篇文章&lt;/a&gt;。而 HNC 罗马字指的是 Hancom 的旧式罗马字方案，其辅音部分跟工振厅罗马字相同，但复合元音的罗马字是由基本元音直接相加而成，具体差异见下表（工振厅罗马字中 y/i 和 w/u 两对字母没有区别，HNC 中 y/i 没有区别）：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;ㅡ&lt;/th&gt;
      &lt;th&gt;ㅓ&lt;/th&gt;
      &lt;th&gt;ㅕ&lt;/th&gt;
      &lt;th&gt;ㅐ&lt;/th&gt;
      &lt;th&gt;ㅒ&lt;/th&gt;
      &lt;th&gt;ㅔ&lt;/th&gt;
      &lt;th&gt;ㅖ&lt;/th&gt;
      &lt;th&gt;ㅘ&lt;/th&gt;
      &lt;th&gt;ㅙ&lt;/th&gt;
      &lt;th&gt;ㅚ&lt;/th&gt;
      &lt;th&gt;ㅝ&lt;/th&gt;
      &lt;th&gt;ㅞ&lt;/th&gt;
      &lt;th&gt;ㅟ&lt;/th&gt;
      &lt;th&gt;ㅢ&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;工振&lt;/td&gt;
      &lt;td&gt;eu&lt;/td&gt;
      &lt;td&gt;eo&lt;/td&gt;
      &lt;td&gt;yeo&lt;/td&gt;
      &lt;td&gt;ae&lt;/td&gt;
      &lt;td&gt;yae&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;ye&lt;/td&gt;
      &lt;td&gt;wa&lt;/td&gt;
      &lt;td&gt;wae&lt;/td&gt;
      &lt;td&gt;oe&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;weo&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;we&lt;/td&gt;
      &lt;td&gt;wi&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;yi&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HNC&lt;/td&gt;
      &lt;td&gt;w&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;ye&lt;/td&gt;
      &lt;td&gt;ai&lt;/td&gt;
      &lt;td&gt;yai&lt;/td&gt;
      &lt;td&gt;ei&lt;/td&gt;
      &lt;td&gt;yei&lt;/td&gt;
      &lt;td&gt;oa&lt;/td&gt;
      &lt;td&gt;oai&lt;/td&gt;
      &lt;td&gt;oi&lt;/td&gt;
      &lt;td&gt;ue&lt;/td&gt;
      &lt;td&gt;uei&lt;/td&gt;
      &lt;td&gt;ui&lt;/td&gt;
      &lt;td&gt;wi&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;字符编码&quot;&gt;字符编码&lt;/h2&gt;

&lt;p&gt;最后简单聊聊汉字文化圈的字符编码，管中窥豹地看看 Unicode 的汉字编码遇到了怎样的困难。在 Unicode 以前，西方世界最常用的字符集标准是 ISO/IEC 8859，它将 ASCII 从 7-bit 扩展到了 8-bit，定义了 15 种变体服务于以欧洲为主的常用表音文字。但这样的单字节编码显然是不够存放汉字的，于是东亚各国基于可变长的 EUC 编码各自制定了自己的字符集。&lt;/p&gt;

&lt;p&gt;中国大陆的字符集标准经历了 GB 2312、GBK、GB 18030 三个阶段，现行的 GB 18030 单字节兼容 ASCII、双字节兼容 GBK、四字节则映射到了其余的 Unicode 码位；台湾的业界标准则是双字节的 Big5，香港则在此基础上制定了香港增补字符集。而日韩朝三国也有各自的工业标准 JIS X 0208、KS X 1001、KPS 9566，收录了本国所需的汉字以及假名或是谚文等，越南则有 TCVN 5773 收录喃字、TCVN 6056 收录儒字。看到这么多眼花缭乱的字符集标准，Unicode 的最大难题就是如何把各国标准中相同的汉字合并起来。因为 Unicode 也是国际标准 ISO/IEC 10646，所以国际标准化组织旗下有一个表意文字小组（ISO/IEC JTC1/SC2/WG2/IRG）来专门负责各国汉字的统一工作，现任召集人是香港理工大学的陆勤教授。&lt;/p&gt;

&lt;p&gt;Unicode 的汉字部分被称为中日韩统一表意文字，而统一各国汉字的工作被称为认同。表意文字小组的工作曾有两项基本原则：汉字认同原则和字源分离原则。在汉字认同原则下，起源相同、字形相似的汉字会被赋予相同的码位，其不同字形则交由异体字选择器处理，或是由符合各地标准的字体自行渲染。而在字源分离原则下，如果某列为字源的字符集收录了同一汉字的不同字形，则 Unicode 也同时收录它们，以便与原字符集一一对应。这两项原则的本质对立导致了一些自相矛盾的决定，譬如「&lt;ruby&gt;戶&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;U+6236&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」「&lt;ruby&gt;户&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;U+6237&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」「&lt;ruby&gt;戸&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;U+6238&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」有三个码位，而「&lt;ruby&gt;房&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;U+623F&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」却只有一个。字源分离原则破坏了 Unicode 只对字而不对字形进行编码的大方针，因此如今已经不再遵循了。这项旷日持久的汉字认同工作还衍生了 Unihan 数据库，为每一个收录的汉字提供了在各国字源中的编码、各国字典中的索引、各地区的读音、英语释义、相关异体字等等，为汉字的国际标准化作出了巨大的贡献。&lt;/p&gt;</content><author><name>孙耀珠</name></author><category term="杂谈" /><summary type="html">我身边的同学们大都只懂汉语和英语，聊天时偶尔会发现他们对日本、韩国、朝鲜和越南的汉字使用知之甚少。比如有人见到汉字就觉得是汉语，但实际上日韩朝越都在以自己的方式使用着汉字，比如很难说「大変面白」「本当上手」也算是规范汉语，虽然这些字我们都认识。 另一个常见的误解是：为什么 Matsumoto Yukihiro 被翻译成了松本行弘？为什么 Jang Won-young 被翻译成了张员瑛？首先要意识到英语不是日韩的母语，因此上面的罗马字也只是音译。实际上 Matz 的姓名本来就是汉字「松本行弘」，只是这四个字都用了日语训读，导致中日读音大相径庭。而韩国的情况更麻烦一点，因为他们现在几乎不用汉字了，所以姓名里的谚文对应哪个汉字要么靠猜要么询问本人。张员瑛的原名是「장원영」，一开始大家猜测其对应的汉字是「張元英」，不过很遗憾猜错了，后来官方宣布她的姓名汉字是「張員瑛」。当然日本人名也有要猜的时候，比如说「松山ケンイチ」「石原さとみ」（也都猜错过，哈哈哈哈）。不过如今对汉字如此执着的也只有中国了，日韩互译对方人名的时候并不会追溯到汉字，而是简单粗暴地使用音译：松本行弘在韩语里就叫 마츠모토 유키히로，张员瑛在日语里就叫 チャン・ウォニョン。</summary></entry><entry><title type="html">Megaparsec: Haskell 的语法分析组合子</title><link href="https://blog.yzsun.me/megaparsec/" rel="alternate" type="text/html" title="Megaparsec: Haskell 的语法分析组合子" /><published>2019-11-24T00:00:00+00:00</published><updated>2019-11-24T00:00:00+00:00</updated><id>https://blog.yzsun.me/megaparsec</id><content type="html" xml:base="https://blog.yzsun.me/megaparsec/">&lt;blockquote&gt;
  &lt;p&gt;原文标题：Megaparsec tutorial from IH book&lt;br /&gt;
原文链接：&lt;a href=&quot;https://markkarpov.com/tutorial/megaparsec.html&quot;&gt;https://markkarpov.com/tutorial/megaparsec.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;本篇 Megaparsec 教程原本是为《&lt;a href=&quot;https://intermediatehaskell.com/&quot;&gt;中级 Haskell&lt;/a&gt;》一书写的一章。但由于这本书在过去的一年里没有什么进展，于是其他合著者同意将本文发表为一篇独立的教程，以飨读者。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#parsect-和-parsec-单子&quot; id=&quot;markdown-toc-parsect-和-parsec-单子&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 单子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#字符和二进制流&quot; id=&quot;markdown-toc-字符和二进制流&quot;&gt;字符和二进制流&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#单子式和可应用函子式语法&quot; id=&quot;markdown-toc-单子式和可应用函子式语法&quot;&gt;单子式和可应用函子式语法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#用-eof-耗尽输入&quot; id=&quot;markdown-toc-用-eof-耗尽输入&quot;&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eof&lt;/code&gt; 耗尽输入&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#处理多种选择&quot; id=&quot;markdown-toc-处理多种选择&quot;&gt;处理多种选择&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#用-try-控制回溯&quot; id=&quot;markdown-toc-用-try-控制回溯&quot;&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 控制回溯&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#调试语法分析器&quot; id=&quot;markdown-toc-调试语法分析器&quot;&gt;调试语法分析器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#标签和隐藏&quot; id=&quot;markdown-toc-标签和隐藏&quot;&gt;标签和隐藏&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#运行语法分析器&quot; id=&quot;markdown-toc-运行语法分析器&quot;&gt;运行语法分析器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monadparsec-类型类&quot; id=&quot;markdown-toc-monadparsec-类型类&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 类型类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#词法分析&quot; id=&quot;markdown-toc-词法分析&quot;&gt;词法分析&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#空格&quot; id=&quot;markdown-toc-空格&quot;&gt;空格&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#字符和字符串字面量&quot; id=&quot;markdown-toc-字符和字符串字面量&quot;&gt;字符和字符串字面量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#数字&quot; id=&quot;markdown-toc-数字&quot;&gt;数字&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notfollowedby-和-lookahead&quot; id=&quot;markdown-toc-notfollowedby-和-lookahead&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notFollowedBy&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookAhead&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#表达式的语法分析&quot; id=&quot;markdown-toc-表达式的语法分析&quot;&gt;表达式的语法分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#缩进敏感的语法分析&quot; id=&quot;markdown-toc-缩进敏感的语法分析&quot;&gt;缩进敏感的语法分析&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#nonindented-和-indentblock&quot; id=&quot;markdown-toc-nonindented-和-indentblock&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nonIndented&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;indentBlock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#简单的缩进列表&quot; id=&quot;markdown-toc-简单的缩进列表&quot;&gt;简单的缩进列表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#嵌套缩进列表&quot; id=&quot;markdown-toc-嵌套缩进列表&quot;&gt;嵌套缩进列表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#加入折行&quot; id=&quot;markdown-toc-加入折行&quot;&gt;加入折行&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#编写高效的语法分析器&quot; id=&quot;markdown-toc-编写高效的语法分析器&quot;&gt;编写高效的语法分析器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#语法分析错误&quot; id=&quot;markdown-toc-语法分析错误&quot;&gt;语法分析错误&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#错误的定义&quot; id=&quot;markdown-toc-错误的定义&quot;&gt;错误的定义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#如何触发错误&quot; id=&quot;markdown-toc-如何触发错误&quot;&gt;如何触发错误&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#显示错误&quot; id=&quot;markdown-toc-显示错误&quot;&gt;显示错误&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#在运行时接住错误&quot; id=&quot;markdown-toc-在运行时接住错误&quot;&gt;在运行时接住错误&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#控制错误的位置&quot; id=&quot;markdown-toc-控制错误的位置&quot;&gt;控制错误的位置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#报告多个错误&quot; id=&quot;markdown-toc-报告多个错误&quot;&gt;报告多个错误&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#测试-megaparsec-语法分析器&quot; id=&quot;markdown-toc-测试-megaparsec-语法分析器&quot;&gt;测试 Megaparsec 语法分析器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用自定义输入流&quot; id=&quot;markdown-toc-使用自定义输入流&quot;&gt;使用自定义输入流&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在上一章「例：编写自己的语法分析组合子」中编写的玩具性质的语法分析组合子并不适合实际使用，因此我们继续来看看 Haskell 生态圈中能够解决相同问题的库，并请留意它们各自的利弊权衡：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/parsec&quot;&gt;parsec&lt;/a&gt; 过去一直是 Haskell 的「默认」语法分析库。该库比较关注错误信息的质量，但其测试覆盖率不高，并且目前处于仅维护的状态。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/attoparsec&quot;&gt;attoparsec&lt;/a&gt; 是个健壮而高性能的语法分析库。它是在列的库中唯一一个完整支持增量语法分析的，其缺点是错误信息质量不佳、不支持单子变换、只支持部分输入流类型。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/trifecta&quot;&gt;trifecta&lt;/a&gt; 错误信息的质量不错，但文档不足导致难以理解。对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt; 的语法分析可以做到开箱即用，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 则不行。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hackage.haskell.org/package/megaparsec&quot;&gt;megaparsec&lt;/a&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsec&lt;/code&gt; 的一个分支，在过去数年里保持着积极的开发。当前版本尝试在速度、灵活性和错误信息质量之间找到一个最佳平衡。因为是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsec&lt;/code&gt; 的非官方继任者，使用过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsec&lt;/code&gt; 或者读过其教程的用户一定会对它感到十分亲切。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;把上述语法解析库全部讲一遍是不现实的，因此本文聚焦 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt;。更准确地说，我们将会讲解该库的版本 8.0，其于本书正式发行时应该已经取代旧版本成为主流版本了。&lt;/p&gt;

&lt;h2 id=&quot;parsect-和-parsec-单子&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 单子&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 中主要的语法分析单子变换和核心数据类型。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT e s m a&lt;/code&gt; 各参数分别表示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 是用来表示错误信息的自定义组件的类型。如果我们不想做自定义（目前我们确实不想），那么用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data.Void&lt;/code&gt; 模块中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Void&lt;/code&gt; 就行了。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 是输入流的类型。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;、严格或惰性的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;、严格或惰性的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt; 都是开箱即用的，当然自定义输入流也是可用的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 单子变换的内部单子。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 是单子中的值，作为语法分析的结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为大多数时候 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identity&lt;/code&gt;，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 这个类型别名非常有用：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;简而言之，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 就是没有单子变换的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们还可以把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 的单子变换类比于 MTL 单子变换和类型类。确实，我们还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 类型类的用途与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadState&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadReader&lt;/code&gt; 相近。我们会在&lt;a href=&quot;#monadparsec-类型类&quot;&gt;后面的章节&lt;/a&gt;详细讨论 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;说到类型别名，开始使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 的最佳方式就是为自己的语法分析器定义一个类型别名。这有两个好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加顶级签名会更容易，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser Int&lt;/code&gt;，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; 是你的语法分析单子。没有签名，诸如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 之类的参数会有歧义，这是多态 API 不利的一面。&lt;/li&gt;
  &lt;li&gt;使用固定所有类型变量的具体类型可以帮助 GHC 更好地进行优化，如果你的语法分析器保持多态则 GHC 难以开展优化工作。尽管 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; API 是多态的，但预计最终用户都会使用具体类型的语法分析单子，这样便可进行内联工作，并将大多数函数定义转储到接口文件，这让 GHC 能够生成非常高效的非多态代码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;让我们定义一个类型别名（一般都叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt;）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--                   ^    ^&lt;/span&gt;
&lt;span class=&quot;cd&quot;&gt;--                   |    |&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Custom error component Type of input stream&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在本文中出现的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; 假定为此类型，直到我们开始自定义语法分析错误为止。&lt;/p&gt;

&lt;h2 id=&quot;字符和二进制流&quot;&gt;字符和二进制流&lt;/h2&gt;

&lt;p&gt;我们之前说了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 对于五种输入流类型是开箱即用的：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;、严格或惰性的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;、严格或惰性的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt;。之所以可以这样，是因为在该库中这些类型都是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 类型类的实例，其对所有可用作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 语法分析器输入的数据类型做了功能上的抽象。&lt;/p&gt;

&lt;p&gt;简化版本的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 可以表示如下：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take1_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- aka uncons&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tokensToChunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实际的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 定义包含更多方法，但我们不用知道那些就能使用该库。&lt;/p&gt;

&lt;p&gt;注意这个类型类关联了两个类型函数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token s&lt;/code&gt; 是单个词法单词的类型。一般来说是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Word8&lt;/code&gt;，但对于自定义流来说也可能是其他类型。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s&lt;/code&gt; 是流的「一大块」的类型，此概念是为性能考虑而引入的。确实常常有相当于单词列表 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Token s]&lt;/code&gt; 但又更加高效的表示方法，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 类型的输入流有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s ~ Text&lt;/code&gt;，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 的一大块就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;。虽然类型等式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s ~ s&lt;/code&gt; 常常是成立的，但在自定义流中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 可能不同，所以我们将这两个类型分开了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以把所有默认的输入流列进一张表格：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token s&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;strict &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;strict &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lazy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Char&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lazy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;strict &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Word8&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;strict &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lazy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Word8&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lazy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们得习惯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens&lt;/code&gt; 这两个类型函数，因为它们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; API 的类型声明中无处不在。&lt;/p&gt;

&lt;p&gt;你可能会注意到，如果我们把所有默认输入流按照单词类型分类，可以得到两类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;字符流，满足 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token s ~ Char&lt;/code&gt;：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;、严格或惰性的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;二进制流，满足 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token s ~ Word8&lt;/code&gt;：严格或惰性的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 就不需要为每种输入流类型都编写一个同样的语法分析器（比如用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attoparsec&lt;/code&gt; 就需要），但我们仍要为不同的单词类型编写不同的代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用字符流的组合子，要导入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char&lt;/code&gt; 模块；&lt;/li&gt;
  &lt;li&gt;使用二进制流的组合子，要导入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte&lt;/code&gt; 模块。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些模块包含两组相似的语法分析工具，例如：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newline&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(MonadParsec e s m, Token s ~ Char) =&amp;gt; m (Token s)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(MonadParsec e s m, Token s ~ Word8) =&amp;gt; m (Token s)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eol&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(MonadParsec e s m, Token s ~ Char) =&amp;gt; m (Tokens s)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(MonadParsec e s m, Token s ~ Word8) =&amp;gt; m (Tokens s)&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;为了更好地理解我们将使用的工具函数，我们先引入几个它们所依赖的原语。&lt;/p&gt;

&lt;p&gt;第一个原语是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt;，相应地它让我们能够对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token s&lt;/code&gt; 类型的值做语法分析：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Matching function for the token to parse&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Expected items (in case of an error)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; 的第一个参数是要分析的单词的匹配函数，如果该函数返回了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Just&lt;/code&gt; 那么其值就会成为语法分析的结果，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; 则表明语法分析器不接受该单词并且原语会失败。&lt;/p&gt;

&lt;p&gt;第二个参数是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;（来自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containers&lt;/code&gt; 包），它包含在失败的情况下所有可能显示给用户的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorItem&lt;/code&gt;。当我们讨论语法分析错误时会详细解说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorItem&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为了更好地理解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; 是怎样工作的，让我们看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec&lt;/code&gt; 模块中适用于所有输入流类型的一些组合子的定义。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 是其中一个相当常见的组合子，我们给它一个对匹配单词返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; 的断言，它就会返回一个对应的语法分析器：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Predicate to apply&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testToken&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testToken&lt;/code&gt; 的工作就是把返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bool&lt;/code&gt; 值的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt; 函数转换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; 期待的返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe (Token s)&lt;/code&gt; 的函数。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 中我们不知道想要匹配的确切单词序列，所以我们传了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set.empty&lt;/code&gt; 作为第二个参数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 看起来很好懂，让我们看看怎么使用它。我们需要一个能跑语法分析器的工具函数，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseTest&lt;/code&gt; 让我们在 GHCi 中测试。&lt;/p&gt;

&lt;p&gt;首先，让我们启动 GHCi 并导入一些模块：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; import Text.Megaparsec
λ&amp;gt; import Text.Megaparsec.Char
λ&amp;gt; import Data.Text (Text)
λ&amp;gt; import Data.Void
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们接着添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; 类型别名，以明确语法分析器的类型：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; type Parser = Parsec Void Text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们还需要开启 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OverloadedStrings&lt;/code&gt; 语言扩展，这样我们就能把字符串字面量用作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 类型的值：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; :set -XOverloadedStrings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (satisfy (== 'a') :: Parser Char) &quot;&quot;
1:1:
  |
1 | &amp;lt;empty line&amp;gt;
  | ^
unexpected end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (satisfy (== 'a') :: Parser Char) &quot;a&quot;
'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (satisfy (== 'a') :: Parser Char) &quot;b&quot;
1:1:
  |
1 | b
  | ^
unexpected 'b'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (satisfy (&amp;gt; 'c') :: Parser Char) &quot;a&quot;
1:1:
  |
1 | a
  | ^
unexpected 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (satisfy (&amp;gt; 'c') :: Parser Char) &quot;d&quot;
'd'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 本身是多态的，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:: Parser Char&lt;/code&gt; 类型标注是必要的，否则 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseTest&lt;/code&gt; 无法得知 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec e s m&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 是什么（在这里 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 假定为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identity&lt;/code&gt;）。如果我们使用的是一个事先存在的有类型签名的语法分析器，那么就不需要这些显式的类型标注了。&lt;/p&gt;

&lt;p&gt;看起来是正常工作的。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 有个问题是它没有在失败时告诉我们它期待什么单词，因为我们无法分析 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 调用者提供的函数。另外还有一些不那么通用的组合子，但它们生成更有用的错误信息。例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;single&lt;/code&gt;（还有在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Texy.Megaparsec.Char&lt;/code&gt; 中限定了类型的别名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt;）可以匹配一个特定的单词：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:|&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens&lt;/code&gt; 数据类型构造器跟我们之前讨论的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens&lt;/code&gt; 类型函数没有关系。实际上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorItem&lt;/code&gt; 的一个构造器，用来指定我们期望匹配的具体单词序列。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (char 'a' :: Parser Char) &quot;b&quot;
1:1:
  |
1 | b
  | ^
unexpected 'b'
expecting 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (char 'a' :: Parser Char) &quot;a&quot;
'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们现在可以定义之前表格中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newline&lt;/code&gt; 了：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个原语叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens&lt;/code&gt;，它让我们能够语法分析 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s&lt;/code&gt;，即用来匹配输入的一大块：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Predicate to check equality of chunks&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Chunk of input to match against&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也有两个语法分析器是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens&lt;/code&gt; 定义的：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- from &quot;Text.Megaparsec&quot;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- from &quot;Text.Megaparsec.Char&quot; and &quot;Text.Megaparsec.Byte&quot;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FoldCase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;string'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它们会匹配输入中固定的一大块，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunk&lt;/code&gt;（在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Texy.Megaparsec.Char&lt;/code&gt; 中有限定了类型的别名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;）区分大小写，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string'&lt;/code&gt; 不区分。不区分大小写的匹配要用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case-insensitive&lt;/code&gt; 包，并且加上了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FoldCase&lt;/code&gt; 约束。&lt;/p&gt;

&lt;p&gt;让我们也来试试这些新的组合子：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (string &quot;foo&quot; :: Parser Text) &quot;foo&quot;
&quot;foo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (string &quot;foo&quot; :: Parser Text) &quot;bar&quot;
1:1:
  |
1 | bar
  | ^
unexpected &quot;bar&quot;
expecting &quot;foo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (string' &quot;foo&quot; :: Parser Text) &quot;FOO&quot;
&quot;FOO&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (string' &quot;foo&quot; :: Parser Text) &quot;FoO&quot;
&quot;FoO&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (string' &quot;foo&quot; :: Parser Text) &quot;FoZ&quot;
1:1:
  |
1 | FoZ
  | ^
unexpected &quot;FoZ&quot;
expecting &quot;foo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好的，我们可以匹配单个单词和一大块输入了。下一步我们将要学习如何组合这些积木来编写更有趣的语法分析器。&lt;/p&gt;

&lt;h2 id=&quot;单子式和可应用函子式语法&quot;&gt;单子式和可应用函子式语法&lt;/h2&gt;

&lt;p&gt;最简单的组合语法分析器的方式是连续执行它们。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 是单子，而单子绑定正好可以顺序执行语法分析器：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mySequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mySequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们来运行一下看看是不是按照预期工作：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest mySequence &quot;abc&quot;
('a','b','c')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest mySequence &quot;bcd&quot;
1:1:
  |
1 | bcd
  | ^
unexpected 'b'
expecting 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest mySequence &quot;adc&quot;
1:2:
  |
1 | adc
  |  ^
unexpected 'd'
expecting 'b'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为所有单子亦是可应用函子，所以我们也可以使用可应用函子式的语法来顺序执行：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mySequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mySequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(,,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二种方法跟第一种运行结果完全相同，使用哪种风格通常取决于个人品味。单子风格可以说是更冗长但有时更清晰，而可应用函子风格通常更简洁。话说回来，显然单子风格的表达能力更强，因为单子比可应用函子更强大。&lt;/p&gt;

&lt;h2 id=&quot;用-eof-耗尽输入&quot;&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eof&lt;/code&gt; 耗尽输入&lt;/h2&gt;

&lt;p&gt;可应用函子通常已经足够强大，足以做一些有趣的事情。如果配上拥有单位元且满足结合律的运算符，我们就得到了可应用函子上的单位半群，在 Haskell 中表示为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 类型类。&lt;a href=&quot;https://hackage.haskell.org/package/parser-combinators&quot;&gt;parser-combinators&lt;/a&gt; 包提供了不少基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applicative&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 概念的抽象组合子，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec&lt;/code&gt; 模块重新导出了这些来自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control.Applicative.Combinators&lt;/code&gt; 的组合子。&lt;/p&gt;

&lt;p&gt;一个最常见的组合子是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;many&lt;/code&gt;，它允许我们将给定的语法分析器运行零次或多次：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (many (char 'a') :: Parser [Char]) &quot;aaa&quot;
&quot;aaa&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (many (char 'a') :: Parser [Char]) &quot;aabbb&quot;
&quot;aa&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个结果可能有点令人惊讶，语法分析器吃掉了匹配的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;，但随后就停了下来。好吧，我们并没有交代在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;many (char 'a')&lt;/code&gt; 之后要做些什么。&lt;/p&gt;

&lt;p&gt;在大多数情况下，我们实际需要强制语法分析器吃掉整个输入，并报告语法分析错误，而不是害羞地默默中止。这就需要我们吃到输入结束。幸运的是，虽然输入结束只是一个概念，但有个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eof :: MonadParsec e s m =&amp;gt; m ()&lt;/code&gt; 不吃任何单词，仅会在输入结束时成功。让我们把它加进去再试一次：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (many (char 'a') &amp;lt;* eof :: Parser [Char]) &quot;aabbb&quot;
1:3:
  |
1 | aabbb
  |   ^
unexpected 'b'
expecting 'a' or end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们在语法分析器中没有提到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;，所以它们肯定是预期之外的。&lt;/p&gt;

&lt;h2 id=&quot;处理多种选择&quot;&gt;处理多种选择&lt;/h2&gt;

&lt;p&gt;从现在开始我们将开发一个实际有用的语法分析器，它能处理下述形式的 URI：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们记住方括号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; 中的部分是可选的，不论它们出不出现 URI 都是合法的，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt; 甚至可以进行嵌套。我们会完整支持该语法&lt;sup id=&quot;fnref:modern-uri&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:modern-uri&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;让我们从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheme&lt;/code&gt; 开始，我们仅仅接受已知的协议名，譬如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ftp&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irc&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailto&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 匹配固定的字符序列，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 类型类中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 方法表示「选择」。代码如下：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE RecordWildCards   #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hiding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ftp&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;irc&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mailto&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;试着运行一下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pScheme &quot;&quot;
1:1:
  |
1 | &amp;lt;empty line&amp;gt;
  | ^
unexpected end of input
expecting &quot;data&quot;, &quot;file&quot;, &quot;ftp&quot;, &quot;http&quot;, &quot;https&quot;, &quot;irc&quot;, or &quot;mailto&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pScheme &quot;dat&quot;
1:1:
  |
1 | dat
  | ^
unexpected &quot;dat&quot;
expecting &quot;data&quot;, &quot;file&quot;, &quot;ftp&quot;, &quot;http&quot;, &quot;https&quot;, &quot;irc&quot;, or &quot;mailto&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pScheme &quot;file&quot;
&quot;file&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pScheme &quot;irc&quot;
&quot;irc&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来不错，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pScheme&lt;/code&gt; 的定义有点啰嗦。我们可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choice&lt;/code&gt; 组合子重写 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pScheme&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ftp&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;irc&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mailto&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choice&lt;/code&gt; 只是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asum&lt;/code&gt; 的别名，后者会用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 对列表元素进行折叠，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pScheme&lt;/code&gt; 的这两个定义其实是一样的，只是用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;choice&lt;/code&gt; 更好看一些。&lt;/p&gt;

&lt;p&gt;协议名后面是个冒号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;。回忆一下，如果我们要接着对其他东西做语法分析，我们要用单子绑定或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do&lt;/code&gt; 记法：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我们运行一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt;，我们会看到它现在要求协议名后面跟着一个冒号：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;irc&quot;
1:4:
  |
1 | irc
  |    ^
unexpected end of input
expecting ':'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;irc:&quot;
Uri {uriScheme = &quot;irc&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但我们还没完成协议名的语法分析。一位优秀的 Haskell 程序员编写的类型，能让错误数据无处遁形。并不是任何 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 值都代表合法的协议名，因此让我们定义一个表示协议名的数据类型，并让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pScheme&lt;/code&gt; 返回它：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scheme&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeData&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeFile&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeFtp&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeHttp&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeHttps&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeIrc&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeMailto&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scheme&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeData&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;data&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeFile&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeFtp&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ftp&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeHttp&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeHttps&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeIrc&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;irc&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SchemeMailto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mailto&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scheme&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;$)&lt;/code&gt; 运算符仅仅把左边的值放入函子上下文，而不管里面原来是什么。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a &amp;lt;$ f&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const a &amp;lt;$&amp;gt; f&lt;/code&gt; 等价，但对于一些函子来说更高效。&lt;/p&gt;

&lt;p&gt;让我们再来试一下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;https:&quot;
1:5:
  |
1 | https:
  |     ^
unexpected 's'
expecting ':'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;唔……&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt; 应该是个合法的协议名，你能看出哪里出错了吗？语法分析器逐个尝试这些选择，一旦 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; 匹配就不会再往下试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt; 了。解决方法就是把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SchemeHttps &amp;lt;$ string &quot;https&quot;&lt;/code&gt; 放到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schemeHttp &amp;lt;$ string &quot;http&quot;&lt;/code&gt; 上面去。一定要记住：顺序会影响选择！&lt;/p&gt;

&lt;p&gt;现在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt; 正常工作了：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;http:&quot;
Uri {uriScheme = SchemeHttp}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;https:&quot;
Uri {uriScheme = SchemeHttps}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;mailto:&quot;
Uri {uriScheme = SchemeMailto}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &quot;foo:&quot;
1:1:
  |
1 | foo:
  | ^
unexpected &quot;foo:&quot;
expecting &quot;data&quot;, &quot;file&quot;, &quot;ftp&quot;, &quot;http&quot;, &quot;https&quot;, &quot;irc&quot;, or &quot;mailto&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;用-try-控制回溯&quot;&gt;用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 控制回溯&lt;/h2&gt;

&lt;p&gt;下一步是处理 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[//[user:password@]host[:port]]&lt;/code&gt;，这里我们需要嵌套可选部分，因此让我们更新一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uri&lt;/code&gt; 类型：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scheme&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uriAuthority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (user, password)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我们需要讨论一个重要概念，也就是回溯。回溯是指及时返回而不吃掉任何输入，这在处理分支是非常重要。下面是一个例子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alternatives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alternatives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来很合理，我们来试一下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest alternatives &quot;ab&quot;
('a','b')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest alternatives &quot;ac&quot;
1:2:
  |
1 | ac
  |  ^
unexpected 'c'
expecting 'b'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;发生了什么呢？最先尝试的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char 'a'&lt;/code&gt; 部分成功了，所以输入流里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 被吃掉了。接着 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char 'b'&lt;/code&gt; 没能匹配 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;，所以我们得到了这样的错误信息。重要的一点是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 根本没有尝试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt;，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 已经把一些输入吃掉了。&lt;/p&gt;

&lt;p&gt;一方面这是为性能考虑，另一方面把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 剩下来的东西喂给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; 也没什么意义。我们期望在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; 运行的时候，输入流正处于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; 开始的位置。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 并不会自动回溯（与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attoparsec&lt;/code&gt; 或是上一章中的玩具组合子不同），所以我们需要用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 原语来显式表达我们想要回溯。如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 失败了，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try p&lt;/code&gt; 就会进行回溯，就像没有输入被吃掉一样（实际上它回溯了整个语法分析状态）。这就允许 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 尝试右边的选择了：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alternatives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alternatives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(,)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest alternatives &quot;ac&quot;
('a','c')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所有会吃输入的原语（当然也有诸如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 这样改变现有语法分析器行为的原语）的输入消耗是「原子性」的。也就是说，它们失败时会自动回溯，所以它们不会吃掉部分输入而中途失败。这就是为什么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pScheme&lt;/code&gt; 的所有选择能正常工作：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens&lt;/code&gt; 定义的，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens&lt;/code&gt; 是原语。我们要么匹配整个字符串，要么直接失败而不吃掉任何输入流。&lt;/p&gt;

&lt;p&gt;回到 URI 的语法分析上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 能够用来构建一个方便的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optional&lt;/code&gt; 组合子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optional p&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 匹配成功了，那么我们能得到包装在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Just&lt;/code&gt; 中的结果，否则返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt;。这就是我们想要的！但我们没必要自己定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optional&lt;/code&gt;，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec&lt;/code&gt; 帮我们重新导出了这个组合子。我们现在可以把它用在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt; 上了：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriAuthority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- (1)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;//&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;-- (2)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- (3)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (4)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;-- (5)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;-- (6)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我擅自让所有字母和数字都可用作用户名和密码，主机名也做了相似的简化。&lt;/p&gt;

&lt;p&gt;有几点需要留意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在 (1) 和 (2) 中我们需要把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optional&lt;/code&gt; 的参数用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 包起来，因为其参数是组合起来的语法分析器，而不是原语。&lt;/li&gt;
  &lt;li&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;many&lt;/code&gt; 很像，但要求至少匹配一次：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some p = (:) &amp;lt;$&amp;gt; p &amp;lt;*&amp;gt; many p&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;(4) 如非必要请勿使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;！这里如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char ':'&lt;/code&gt; 成功了（它本身是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; 定义的，不需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;），我们知道紧接着一定是端口号，所以我们只需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.decimal&lt;/code&gt; 来匹配十进制数。在匹配完 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 之后，我们并不需要回溯。&lt;/li&gt;
  &lt;li&gt;在 (5) 和 (6) 中我们用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecordWildCards&lt;/code&gt; 语言扩展组装了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authority&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uri&lt;/code&gt; 的值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 GHCi 中试试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt;，你会发现它能正常工作：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark:secret@example.com&quot;
Uri
  { uriScheme = SchemeHttps
  , uriAuthority = Just (Authority
    { authUser = Just (&quot;mark&quot;,&quot;secret&quot;)
    , authHost = &quot;example.com&quot;
    , authPort = Nothing } ) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark:secret@example.com:123&quot;
Uri
  { uriScheme = SchemeHttps
  , uriAuthority = Just (Authority
    { authUser = Just (&quot;mark&quot;,&quot;secret&quot;)
    , authHost = &quot;example.com&quot;
    , authPort = Just 123 } ) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://example.com:123&quot;
Uri
  { uriScheme = SchemeHttps
  , uriAuthority = Just (Authority
    { authUser = Nothing
    , authHost = &quot;example.com&quot;
    , authPort = Just 123 } ) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark@example.com:123&quot;
1:13:
  |
1 | https://mark@example.com:123
  |             ^
unexpected '@'
expecting '.', ':', alphanumeric character, or end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;调试语法分析器&quot;&gt;调试语法分析器&lt;/h2&gt;

&lt;p&gt;不过，你可能会发现这样一个问题：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark:@example.com&quot;
1:7:
  |
1 | https://mark:@example.com
  |       ^
unexpected '/'
expecting end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个语法分析错误的提示信息有待改进！怎么改进呢？弄清问题所在的最简单方法是用内置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbg&lt;/code&gt; 工具：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Debugging label&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to debug&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- ^ Parser that prints debugging messages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们把它加进 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scheme&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriAuthority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;auth&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;//&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbg&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;port&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再用刚才的输入运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt; 看看：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark:@example.com&quot;
scheme&amp;gt; IN: &quot;https://mark:@example.com&quot;
scheme&amp;gt; MATCH (COK): &quot;https&quot;
scheme&amp;gt; VALUE: SchemeHttps

user&amp;gt; IN: &quot;mark:@example.com&quot;
user&amp;gt; MATCH (EOK): &amp;lt;EMPTY&amp;gt;
user&amp;gt; VALUE: Nothing

host&amp;gt; IN: &quot;mark:@example.com&quot;
host&amp;gt; MATCH (COK): &quot;mark&quot;
host&amp;gt; VALUE: &quot;mark&quot;

port&amp;gt; IN: &quot;:@example.com&quot;
port&amp;gt; MATCH (CERR): ':'
port&amp;gt; ERROR:
port&amp;gt; 1:14:
port&amp;gt; unexpected '@'
port&amp;gt; expecting integer

auth&amp;gt; IN: &quot;//mark:@example.com&quot;
auth&amp;gt; MATCH (EOK): &amp;lt;EMPTY&amp;gt;
auth&amp;gt; VALUE: Nothing

1:7:
  |
1 | https://mark:@example.com
  |       ^
unexpected '/'
expecting end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到内部到底发生什么了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheme&lt;/code&gt; 匹配成功了。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; 失败了：虽然有个用户名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mark&lt;/code&gt;，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 后面没有密码（我们这里要求密码非空）。虽然我们失败了，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 带我们回溯了。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt; 从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; 开始的位置运作，并尝试把输入解释成主机名。我们可以看到它成功了，并返回了主机名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mark&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;主机名后面可以有端口号，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt; 开始运作。它看见了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;，但发现后面没有数字，因此也失败了。&lt;/li&gt;
  &lt;li&gt;因此整个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt; 语法分析失败了（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt; 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt; 里面失败了）。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt; 语法分析器返回了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt;，因为它什么都分析不出来。现在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eof&lt;/code&gt; 要求吃到输入结束，但现实并非如此，因此我们得到了最终的错误信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们怎么办呢？这是一个用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 包住一大堆代码导致错误信息不可读的例子。让我们再看一下我们要处理的语法：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们在找什么？在找可以让我们确定特定分支的东西，就像我们看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; 就肯定后面跟着端口号一样。如果仔细找的话，你会发现双斜杠是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; 是进入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authority&lt;/code&gt; 部分的标志。因为我们是用原子性的语法分析器（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;）来匹配 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; 的，它会自动回溯，而一旦匹配到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; 我们就能确定我们需要匹配到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authority&lt;/code&gt; 部分。让我们把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt; 的第一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; 删掉吧：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriAuthority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- removed 'try' on this line&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;//&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我们得到了更可读的错误信息：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark:@example.com&quot;
1:14:
  |
1 | https://mark:@example.com
  |              ^
unexpected '@'
expecting integer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然有点误导人，但这是个比较微妙的例子。里面有太多 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optional&lt;/code&gt; 了。&lt;/p&gt;

&lt;h2 id=&quot;标签和隐藏&quot;&gt;标签和隐藏&lt;/h2&gt;

&lt;p&gt;有时完整列出我们期待的东西会有点长，记得我们用未知的协议名进行测试的时候吗？&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;foo://example.com&quot;
1:1:
  |
1 | foo://example.com
  | ^
unexpected &quot;foo://&quot;
expecting &quot;data&quot;, &quot;file&quot;, &quot;ftp&quot;, &quot;http&quot;, &quot;https&quot;, &quot;irc&quot;, or &quot;mailto&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 提供了对提示信息进行自定义的方法，即使用「标签」。我们可以这样使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt; 原语（它有个别名是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; 运算符）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valid scheme&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- the rest stays the same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;foo://example.com&quot;
1:1:
  |
1 | foo://example.com
  | ^
unexpected &quot;foo://&quot;
expecting valid scheme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以继续加入更多标签，以使错误信息更加可读：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pScheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valid scheme&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uriAuthority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;//&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authUser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authHost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hostname&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;port number&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pUri &amp;lt;* eof) &quot;https://mark:@example.com&quot;
1:14:
  |
1 | https://mark:@example.com
  |              ^
unexpected '@'
expecting port number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另一个原语叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hidden&lt;/code&gt;。如果说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt; 是在为提示信息进行重命名，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hidden&lt;/code&gt; 就是把它们直接移除了。做个比较：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (many (char 'a') &amp;gt;&amp;gt; many (char 'b') &amp;gt;&amp;gt; eof :: Parser ()) &quot;d&quot;
1:1:
  |
1 | d
  | ^
unexpected 'd'
expecting 'a', 'b', or end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (many (char 'a') &amp;gt;&amp;gt; hidden (many (char 'b')) &amp;gt;&amp;gt; eof :: Parser ()) &quot;d&quot;
1:1:
  |
1 | d
  | ^
unexpected 'd'
expecting 'a' or end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我们想让错误信息不那么啰嗦，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hidden&lt;/code&gt; 会很有用。比如说，在对编程语言做语法分析时，最好丢弃「expecting white space」的提示信息，因为几乎所有单词后面都可以有空格。&lt;/p&gt;

&lt;p&gt;【练习】我们把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pUri&lt;/code&gt; 的剩余部分留给读者完成，所有要用到的工具都已经讲解过了。&lt;/p&gt;

&lt;h2 id=&quot;运行语法分析器&quot;&gt;运行语法分析器&lt;/h2&gt;

&lt;p&gt;我们已经探索了如何构建语法分析器，但我们还没审视能让我们运行它们的函数，除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseTest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;传统上来说，从你的程序运行语法分析器的「默认」函数一直是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt;，但&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; 其实是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser&lt;/code&gt; 的别名：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;runParser&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- ^ Name of source file&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Input for parser&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseErrorBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二个参数只是用来在错误信息中显示的文件名，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 并不会尝试去读这个文件，因为真正的输入是这个函数的第三个参数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser&lt;/code&gt; 允许我们运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 单子，我们已经知道，它就是没有单子变换的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser&lt;/code&gt; 有三个姊妹：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser'&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParserT&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParserT'&lt;/code&gt;。有后缀 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; 的版本可以进行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 单子变换，而有一撇的版本接受并返回语法分析器状态。让我们把它们列进一张表：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数&lt;/th&gt;
      &lt;th&gt;运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt;&lt;/th&gt;
      &lt;th&gt;运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;输入和文件名&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParserT&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义初始状态&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParserT'&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;比如当你需要设置制表符宽度（默认是 8）的时候，自定义初始状态就很有用。举了例子，下面是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser'&lt;/code&gt; 的类型签名：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;runParser'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;-- ^ Initial state&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseErrorBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;手动修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; 是该库的高级用法，我们不会在这里介绍。&lt;/p&gt;

&lt;h2 id=&quot;monadparsec-类型类&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 类型类&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 中的所有工具都可用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 类型类的任何实例。该类型类抽象了「组合子原语」，即所有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 语法分析器的基本单元，这些组合子无法用其它组合子来表示。&lt;/p&gt;

&lt;p&gt;将组合子原语定义为类型类，让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 具体的主要单子变换得以包装在我们熟悉的 MTL 系单子变换中，从而实现在单子栈各层之间的不同交互。为了更好地理解其动机，请回忆一下单子栈各层的顺序很重要。如果我们这样组合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在外层，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 无法检查里面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 层的内部结构。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monad&lt;/code&gt; 实例描述了绑定策略：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runReaderT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runReaderT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实际上，我们对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 的唯一了解是它是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monad&lt;/code&gt; 的一个实例，因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 的状态只能通过单子绑定传给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;。总之，这就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; 起到的典型作用。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 方法有着不同的作用：它「分裂」了状态，并且这两个语法分析分支不再有交集，因此在某种意义上我们可以回溯状态。也就是说，如果第一个分支被丢弃，那么它对状态的修改也会被丢弃，并不会影响到第二个分支（相当于我们在第一个分支失败时回溯了状态）。&lt;/p&gt;

&lt;p&gt;举个例子，我们可以看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 实例：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;liftReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReaderT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这很棒，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 是个「无状态」的单子变换，并且很容易将实际工作委托给内部单子（在这里 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 实例很有用），而无需组合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 自身的单子状态（它并没有）。&lt;/p&gt;

&lt;p&gt;现在我们来看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt;，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State s a&lt;/code&gt; 只是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT s Identity a&lt;/code&gt; 的别名，我们应该看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT s m&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 实例：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们看到了状态 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 的分裂，正如我们看到了上下文 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; 的共享。它们的区别是，表达式 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m s&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n s&lt;/code&gt; 会产生有状态的结果：除了单子中的值，它们还会在元组中返回新的状态。这里我们要么走 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m s&lt;/code&gt; 要么走 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n s&lt;/code&gt;，自然实现了回溯。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 又如何呢？让我们考虑像下面这样把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; 放进 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 比 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReaderT&lt;/code&gt; 更复杂，所以它的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 实现得做更多工作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;管理语法分析器本身的状态；&lt;/li&gt;
  &lt;li&gt;合并语法分析错误，如果有的话。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 实例中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 实现无法将其工作委托给内部单子 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State MyState&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 实例，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyState&lt;/code&gt; 不会分裂，我们也不能回溯。&lt;/p&gt;

&lt;p&gt;让我们用一个例子来证明这一点：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.State.Strict&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hiding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch A&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch B&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch B&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runParserT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser1&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Parser 0&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Result:      &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Final state: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Parser 1&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Result:      &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Final state: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是程序的运行结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parser 0
Result:      &quot;foo&quot;
Final state: &quot;branch A&quot;
Parser 1
Result:      &quot;branch A&quot;
Final state: &quot;branch B&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser0&lt;/code&gt; 的分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; 没有被尝试过。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parser1&lt;/code&gt; 的最终结果（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; 返回的值）显然来自分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;，即使它因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt; 而失败了，成功的是分支 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt; 在这里表示立即失败，并且不会提供任何提示信息）。并没有发生回溯。&lt;/p&gt;

&lt;p&gt;如果我们想要回溯自定义的状态怎么办呢？如果允许将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 包装在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt; 里面的话，就可以做到：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在我们在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyStack&lt;/code&gt; 上用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 作用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt; 的实例：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它会帮我们回溯状态，并会把剩下的工作委托给内部单子 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alternative&lt;/code&gt; 实例。这样的行为就是我们想要的：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.Identity&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad.State.Strict&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hiding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch A&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;branch B&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runStateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial&quot;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Result:      &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Final state: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程序输出为：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Result:      &quot;initial&quot;
Final state: &quot;branch B&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了让这种方法可行，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt; 应当支持所有组合子原语，这样我们就能像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 一样使用它们。换句话说，它们应当是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 的实例，就像它们不仅是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadState&lt;/code&gt; 的实例，还是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadWriter&lt;/code&gt; 的实例，只要它们的内部单子也是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadWriter&lt;/code&gt; 的实例：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实际上，我们可以将原语从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 的内部实例提升到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;StateT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 为所有 MTL 单子变换定义了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MonadParsec&lt;/code&gt; 的实例，这样用户就可以自由地在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 中插入单子变换，或是把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 包装在那些单子变换中，从而实现在单子栈各层之间的不同交互。&lt;/p&gt;

&lt;h2 id=&quot;词法分析&quot;&gt;词法分析&lt;/h2&gt;

&lt;p&gt;词法分析是将输入流转换为词法单词流的过程：整数、关键字、符号等等，它们比原始输入更加容易直接分析，或者可以送作生成的语法分析器的输入。词法分析可以用外部工具（如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alex&lt;/code&gt;）单独一个流程去做，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 也提供了可以无缝衔接编写词法分析器的函数。&lt;/p&gt;

&lt;p&gt;共有两个词法分析器模块：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; 用来处理字符流，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte.Lexer&lt;/code&gt; 用来处理字节流。因为我们的输入流是严格求值的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;，所以我们会用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt;，不过大多数函数在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte.Lexer&lt;/code&gt; 里面长得差不多。&lt;/p&gt;

&lt;h3 id=&quot;空格&quot;&gt;空格&lt;/h3&gt;

&lt;p&gt;我们要讨论的第一个话题是如何处理空格。在消耗空格的时候保持一致性比较好，即要么在单词前要么在后。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 的词法分析器模块遵循的策略是：假设单词前没有空格，消耗单词后的空格。&lt;/p&gt;

&lt;p&gt;我们需要一种特殊的词法分析器来消耗空格，我们叫它空格消耗器。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; 模块提供了构建通用的空格消耗器的工具：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ A parser for space characters which does not accept empty input (e.g. 'space1')&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ A parser for a line comment (e.g. 'skipLineComment')&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ A parser for a block comment (e.g. 'skipBlockComment')&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;space&lt;/code&gt; 函数的文档挺好理解的，但还是让我们来举例说明吧：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (1)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;space1&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;-- (2)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skipLineComment&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;//&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- (3)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skipBlockComment&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (4)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;(1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; 应当限定导入，因为它包含会与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char&lt;/code&gt; 等模块冲突的名字，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;space&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;(2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt; 的第一个参数是个挑选空格的词法分析器。要注意它不能接受空输入，否则 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt; 会陷入死循环。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char&lt;/code&gt; 里的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;space1&lt;/code&gt; 完美符合要求。&lt;/li&gt;
  &lt;li&gt;(3) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt; 的第二个参数定义了如何跳过行注释，即以给定单词序列开始、以行末结束的注释。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skipLineComment&lt;/code&gt; 可以帮我们轻松创建一个这样的词法分析器。&lt;/li&gt;
  &lt;li&gt;(4) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt; 的第三个参数定义了如何跳过块注释，即包裹在给定的始末单词序列中的注释。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skipBlockComment&lt;/code&gt; 可以帮我们处理非嵌套的块注释，若要支持嵌套则可使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;skipBlockCommentNested&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;操作上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt; 会不停地轮流尝试以上三个词法分析器，直到三个都不再消耗空格。如果你的语法不包含注释，那么可以直接把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt; 作为第二或第三个参数送给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt;，作为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; 的单位元，仅仅会让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.space&lt;/code&gt; 尝试下一个词法分析器。&lt;/p&gt;

&lt;p&gt;有了空格消耗器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc&lt;/code&gt;，我们可以定义各种空格相关的工具：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lexeme&lt;/code&gt; 是对词汇分析器的一种包装，能用已给定的空格消耗器挑选出所有尾随空格；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol&lt;/code&gt; 在内部使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 来匹配文本，类似地能够挑选出所有的尾随空格。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;稍后我们将看到它们如何协同工作，但在此之前我们需要引入更多来自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; 的工具。&lt;/p&gt;

&lt;h3 id=&quot;字符和字符串字面量&quot;&gt;字符和字符串字面量&lt;/h3&gt;

&lt;p&gt;对字符和字符串字面量进行词法分析比较微妙，因为有太多转义规则。简单起见，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charLiteral&lt;/code&gt; 词法分析器：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;charLiteral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charLiteral&lt;/code&gt; 的工作是根据 Haskell 报告中描述的字符字面量语法来对可能转义了的单个字符进行词法分析。但注意它不会管字面量两边的引号，这有两个原因：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户可以控制字符字面量用什么作为引号；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charLiteral&lt;/code&gt; 也可以用来对字符串字面量进行词法分析。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;charLiteral&lt;/code&gt; 构建词法分析器的例子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;charLiteral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;charLiteral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charLiteral&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stringLiteral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringLiteral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manyTill&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charLiteral&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;要把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.charLiteral&lt;/code&gt; 改造成我们所需的字符字面量的词法分析器，只需要加上两边的引号。这里我们遵循 Haskell 语法用了单引号。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;between&lt;/code&gt; 组合子是这样定义的：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;between open close p = open *&amp;gt; p &amp;lt;* close&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stringLiteral&lt;/code&gt; 用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L.charLiteral&lt;/code&gt; 来对每个字符进行词法分析，两边则用双引号包裹。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第二个函数也很有趣，因为它用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manyTill&lt;/code&gt; 组合子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;manyTill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Alternative&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;manyTill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每一轮 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manyTill&lt;/code&gt; 先尝试运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; 词法分析器，如果失败了就运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 并把结果装进列表。也有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;someTill&lt;/code&gt; 保证 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 至少成功一次。&lt;/p&gt;

&lt;h3 id=&quot;数字&quot;&gt;数字&lt;/h3&gt;

&lt;p&gt;最后，一个非常常见的需求是对数字进行词法分析。对于整数来说，有三种工具分别处理十进制、八进制和十六进制数：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;octal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hexadecimal&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用起来很简单：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (integer &amp;lt;* eof) &quot;123  &quot;
123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (integer &amp;lt;* eof) &quot;12a  &quot;
1:3:
  |
1 | 12a
  |   ^
unexpected 'a'
expecting end of input or the rest of integer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scientific&lt;/code&gt; 接受整数和小数的语法，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; 只接受小数。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scientific&lt;/code&gt; 会返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scientific&lt;/code&gt; 包的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scientific&lt;/code&gt; 类型，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; 的返回类型是多态的，可能会返回任何 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RealFloat&lt;/code&gt; 的实例：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scientific&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scientific&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RealFloat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;举个例子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (float &amp;lt;* eof) &quot;123&quot;
1:4:
  |
1 | 123
  |    ^
unexpected end of input
expecting '.', 'E', 'e', or digit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (float &amp;lt;* eof) &quot;123.45&quot;
123.45
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (float &amp;lt;* eof) &quot;123d&quot;
1:4:
  |
1 | 123d
  |    ^
unexpected 'd'
expecting '.', 'E', 'e', or digit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意所有这些词法分析器都无法处理有符号数，要支持这个我们得把它们包装在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signed&lt;/code&gt; 组合子中：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;signedInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;signedInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;signedFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;signedFloat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signed&lt;/code&gt; 的第一个参数是空格消耗器，用来控制正负号和实际数字之间的空格。如果你不允许中间有空格，传 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return ()&lt;/code&gt; 进去就行了。&lt;/p&gt;

&lt;h2 id=&quot;notfollowedby-和-lookahead&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notFollowedBy&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookAhead&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;，还有另外两种原语可以对输入流进行前瞻，而不会实际挪动当前位置。&lt;/p&gt;

&lt;p&gt;第一种是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notFollowedBy&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;notFollowedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只有当其参数语法分析失败了它才会成功，并且不会吃掉任何输入或是修改当前状态。&lt;/p&gt;

&lt;p&gt;作为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notFollowedBy&lt;/code&gt; 的例子，我们考虑一下关键字：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pKeyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pKeyword&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个语法分析器有个毛病：如果我们匹配到的只是标识符的前缀怎么办呢？这个情况下它显然不是关键字。因此我们必须用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notFollowedBy&lt;/code&gt; 排除这种情况：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pKeyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pKeyword&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notFollowedBy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另一种原语是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookAhead&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lookAhead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookAhead&lt;/code&gt; 的参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 成功了，那么整个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookAhead p&lt;/code&gt; 也会成功，但输入流和整个语法分析状态不会改变。&lt;/p&gt;

&lt;p&gt;一个例子是对已分析的输入进行检查，要么失败要么成功地进行下去。这可以用下述代码表达：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;withPredicate1&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- ^ The check to perform on parsed input&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Message to print when the check fails&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Resulting parser that performs the check&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withPredicate1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookAhead&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这演示了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lookAhead&lt;/code&gt; 的一种用法，但我们还应注意，如果检查成功我们会进行两次语法分析，这不太好。我们可以改用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOffset&lt;/code&gt; 函数解决这个问题：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;withPredicate2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- ^ The check to perform on parsed input&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Message to print when the check fails&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Resulting parser that performs the check&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withPredicate2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOffset&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在失败时，我们只需将输入流的偏移量设置回运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; 之前的位置即可。但现在消耗量跟偏移量会不匹配，但在这里没有关系，因为我们调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail&lt;/code&gt; 立即结束了语法分析。但这在其它地方可能会出问题，我们将在后面的章节中看到如何改进。&lt;/p&gt;

&lt;h2 id=&quot;表达式的语法分析&quot;&gt;表达式的语法分析&lt;/h2&gt;

&lt;p&gt;「表达式」是指由一些项和应用于这些项的运算符组成的结构。运算符可以前置、中置、后置，可以左结合、右结合，可以有不同的优先级。这种构造的一个例子是学校里教的算术表达式：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a * (b + 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们可以看到两种不同的项：变量（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;）和整数（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;）。另外还有两种运算符：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;为表达式编写一个正确的语法分析器大概需要假以时日。为此，&lt;a href=&quot;https://hackage.haskell.org/package/parser-combinators&quot;&gt;parser-combinators&lt;/a&gt; 包提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control.Monad.Combinators.Expr&lt;/code&gt; 模块，它一共导出了两样东西：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Operator&lt;/code&gt; 数据类型和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makeExprParser&lt;/code&gt; 工具函数。两者均文档齐全，所以本节我们不会复述文档，而是编写一个简单但功能完备的表达式语法分析器。&lt;/p&gt;

&lt;p&gt;让我们先定义一个表示抽象语法树的数据结构：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Negation&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sum&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subtr&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Product&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Division&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;makeExprParser&lt;/code&gt; 我们得给它一个项语法分析器和一个运算符表：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;makeExprParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ Term parser&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- ^ Operator table, see 'Operator'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ Resulting expression parser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们从项语法分析器开始。我们可以把项视为一个盒子，当处理结合性和优先级之类的东西时，表达式的语法分析算法会将其视为不可分割的整体。在我们例子中，有三类东西属于项：变量、整数和括号中的整个表达式。沿用前面几章节的定义，我们可以把项语法分析器定义为：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letterChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;variable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;parens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pTerm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pTerm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parens&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pExpr&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pVariable&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pInteger&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pExpr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pExpr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeExprParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTerm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operatorTable&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;operatorTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;operatorTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- TODO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pVariable&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pInteger&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parens&lt;/code&gt; 的定义应该没什么疑问。这里幸运的是我们不需要在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pTerm&lt;/code&gt; 中使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;，因为项的语法没有重叠之处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果我们看到左括号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;，那紧接着肯定是一个表达式；&lt;/li&gt;
  &lt;li&gt;如果我们看到一个字母，那肯定是标识符的开始；&lt;/li&gt;
  &lt;li&gt;如果我们看到一个数字，那肯定是整数的开始。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，为了完成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pExpr&lt;/code&gt;，我们需要定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operatorTable&lt;/code&gt;，从类型可以看出它是个嵌套列表。每个内层列表装着相同优先级的运算符，而整个外层列表以优先级降序排列。一组运算符的优先级越高，它们结合得就越紧。&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- N.B.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InfixN&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Non-associative infix&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InfixL&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Left-associative infix&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InfixR&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Right-associative infix&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prefix&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;-- ^ Prefix&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Postfix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;-- ^ Postfix&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;operatorTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;operatorTable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Negation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Product&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Division&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sum&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Subtr&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InfixL&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Operator&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Expr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prefix&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;postfix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Postfix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binary&lt;/code&gt; 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InfixL&lt;/code&gt; 接受的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser (Expr -&amp;gt; Expr -&amp;gt; Expr)&lt;/code&gt; 我们是怎么写的，相似的还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prefix&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postfix&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser (Expr -&amp;gt; Expr)&lt;/code&gt;。也就是说，我们先运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symbol name&lt;/code&gt; 然后返回一个函数，它会依次接受各项作为参数并返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Expr&lt;/code&gt; 类型的结果。&lt;/p&gt;

&lt;p&gt;准备好了，现在可以试试我们的语法分析器了！&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pExpr &amp;lt;* eof) &quot;a * (b + 2)&quot;
Product (Var &quot;a&quot;) (Sum (Var &quot;b&quot;) (Int 2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pExpr &amp;lt;* eof) &quot;a * b + 2&quot;
Sum (Product (Var &quot;a&quot;) (Var &quot;b&quot;)) (Int 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pExpr &amp;lt;* eof) &quot;a * b / 2&quot;
Division (Product (Var &quot;a&quot;) (Var &quot;b&quot;)) (Int 2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pExpr &amp;lt;* eof) &quot;a * (b $ 2)&quot;
1:8:
  |
1 | a * (b $ 2)
  |        ^
unexpected '$'
expecting ')' or operator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Control.Monad.Combinators.Expr&lt;/code&gt; 模块的文档里有一些提示，在不太标准的情况下很有用，最好也读一下。&lt;/p&gt;

&lt;h2 id=&quot;缩进敏感的语法分析&quot;&gt;缩进敏感的语法分析&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; 模块还包含一些工具，在处理对缩进敏感的语法时很有用。我们会先综述一下可用的组合子，然后再把它们组装成一个对缩进敏感的语法分析器。&lt;/p&gt;

&lt;h3 id=&quot;nonindented-和-indentblock&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nonIndented&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;indentBlock&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;让我们从最简单的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nonIndented&lt;/code&gt; 开始：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nonIndented&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;-- ^ How to consume indentation (white space)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ Inner parser&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它允许内部语法分析器吃掉所有没缩进的输入，这是缩进敏感语法分析背后模型的一部分。我们规定，未缩进的部分是顶层定义，而所有缩进的部分直接或间接地从属于顶层定义。在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 中，我们不需要任何额外的状态来表达这个想法。因为缩进是相对的，所以我们的想法是显式地把参考单词和缩进单词都传给语法分析器，这样就能通过纯的语法分析器组合来定义对缩进敏感的语法。&lt;/p&gt;

&lt;p&gt;那么我们应当如何为缩进块定义语法分析器呢？让我们看一眼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;indentBlock&lt;/code&gt; 的签名：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;indentBlock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;-- ^ How to consume indentation (white space)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndentOpt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ How to parse “reference” token&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;首先，我们指定如何吃掉缩进。要注意的是这里的空格消耗器必须也吃掉换行符，但正常来讲单词后面的换行符是不应该吃掉的。&lt;/p&gt;

&lt;p&gt;如你所见，第二个参数允许我们对参考单词进行语法分析，并返回一个告诉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;indentBlock&lt;/code&gt; 接下来做什么的数据结构。下面是几种选择：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndentOpt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndentNone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Parse no indented tokens, just return the value&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndentMany&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Parse many indented tokens (possibly zero), use given indentation level&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- (if 'Nothing', use level of the first indented token);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- the second argument tells how to get the final result, and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- the third argument describes how to parse an indented token&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndentSome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Just like 'IndentMany', but requires at least one indented token to be present&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以改变主意不对缩进单词进行语法分析，也可以处理许多缩进单词。我们可以让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;indentBlock&lt;/code&gt; 检测首个缩进单词的缩进层级并使用它，也可以手动指定缩进层级。&lt;/p&gt;

&lt;h3 id=&quot;简单的缩进列表&quot;&gt;简单的缩进列表&lt;/h3&gt;

&lt;p&gt;让我们试着对一个简单的缩进列表进行语法分析，我们从导入部分开始：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE TupleSections     #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Monad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们需要两种空格消耗器：一种 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scn&lt;/code&gt; 会吃掉换行符，另一种 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc&lt;/code&gt; 不会（实际上在这里它只处理空格和制表符）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lineComment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lineComment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skipLineComment&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineComment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineComment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了好玩，我们还允许 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; 开头的行注释。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pItemList&lt;/code&gt; 是顶层形式，它包括参考单词（表头）和缩进单词（表项）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pItemList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- header and list items&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pItemList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonIndented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indentBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndentMany&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于我们来讲，表项就是一串字母、数字和短横线组成的序列：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lexeme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;list item&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们将代码载入到 GHCi，用内置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseTest&lt;/code&gt; 试试：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;&quot;
1:1:
  |
1 | &amp;lt;empty line&amp;gt;
  | ^
unexpected end of input
expecting list item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something&quot;
(&quot;something&quot;,[])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;  something&quot;
1:3:
  |
1 |   something
  |   ^
incorrect indentation (got 3, should be equal to 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\none\ntwo\nthree&quot;
2:1:
  |
2 | one
  | ^
unexpected 'o'
expecting end of input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;记住我们用的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndentMany&lt;/code&gt; 选项，所以空列表是可以的。另一方面，内置的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;space&lt;/code&gt; 组合子已在错误信息中隐藏了「expecting more space」，所以现在的错误信息是完全合理的。&lt;/p&gt;

&lt;p&gt;让我们继续试试：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\n  one\n    two\n  three&quot;
3:5:
  |
3 |     two
  |     ^
incorrect indentation (got 5, should be equal to 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\n  one\n  two\n three&quot;
4:2:
  |
4 |  three
  |  ^
incorrect indentation (got 2, should be equal to 3)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\n  one\n  two\n  three&quot;
(&quot;something&quot;,[&quot;one&quot;,&quot;two&quot;,&quot;three&quot;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndentMany&lt;/code&gt; 换成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IndentSome&lt;/code&gt;，把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nothing&lt;/code&gt; 换成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Just (mkPos 5)&lt;/code&gt;（缩进层级从 1 开始数，所以这表示需要 4 个空格的缩进）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pItemList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pItemList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonIndented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indentBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndentSome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkPos&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\n&quot;
2:1:
  |
2 | &amp;lt;empty line&amp;gt;
  | ^
incorrect indentation (got 1, should be greater than 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\n  one&quot;
2:3:
  |
2 |   one
  |   ^
incorrect indentation (got 3, should be equal to 5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pItemList &amp;lt;* eof) &quot;something\n    one&quot;
(&quot;something&quot;,[&quot;one&quot;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一条错误信息可能有点令人惊讶，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 知道列表里至少得有一项，所以它检查了缩进层级发现是 1，于是报告了错误。&lt;/p&gt;

&lt;h3 id=&quot;嵌套缩进列表&quot;&gt;嵌套缩进列表&lt;/h3&gt;

&lt;p&gt;让我们允许表项拥有子项，为此我们创建了一个新的语法分析器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pComplexItem&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pComplexItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pComplexItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indentBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndentMany&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pItemList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pItemList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonIndented&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indentBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndentSome&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pComplexItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我们把下面这样的列表喂进去：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;first-chapter
  paragraph-one
      note-A # an important note here!
      note-B
  paragraph-two
    note-1
    note-2
  paragraph-three
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那我们的语法分析器会返回：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Right
  ( &quot;first-chapter&quot;
  , [ (&quot;paragraph-one&quot;,   [&quot;note-A&quot;,&quot;note-B&quot;])
    , (&quot;paragraph-two&quot;,   [&quot;note-1&quot;,&quot;note-2&quot;])
    , (&quot;paragraph-three&quot;, [])
    ]
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上演示了这个方法是如何扩展到嵌套缩进结构上的，我们并没有引入额外的状态。&lt;/p&gt;

&lt;h3 id=&quot;加入折行&quot;&gt;加入折行&lt;/h3&gt;

&lt;p&gt;「折行」可以包含多行元素，不过后续元素的缩进层级必须高于首个元素。&lt;/p&gt;

&lt;p&gt;让我们来试用一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lineFold&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pComplexItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pComplexItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indentBlock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pItem&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IndentMany&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pLineFold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pLineFold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pLineFold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineFold&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sc'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sepBy1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc'&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unwords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scn&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lineFold&lt;/code&gt; 的工作方式是：我们先给它一个接受换行符的空格消耗器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scn&lt;/code&gt;，然后它还回来一个特殊的空格消耗器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc'&lt;/code&gt;，让我们能够在回调中吃掉折行元素之间的空格。&lt;/p&gt;

&lt;p&gt;为什么 (1) 处要用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try sc'&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scn&lt;/code&gt; 呢？情况是这样的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;折行元素只会比首个元素缩进更多。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc'&lt;/code&gt; 吃掉空格（也会吃换行符）之后，该列应该比起始列更大。&lt;/li&gt;
  &lt;li&gt;相反，如果吃掉空格后该列小于等于起始列，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc'&lt;/code&gt; 会停下来。它失败时不会吃掉任何输入（感谢 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt;），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scn&lt;/code&gt; 会被用来挑选空格。&lt;/li&gt;
  &lt;li&gt;前面使用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc'&lt;/code&gt; 已利用会吃换行符的空格消耗器来探测空格，所以它逻辑上也会在挑选尾随空格时吃掉换行符。这就是为什么我们在 (1) 处用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scn&lt;/code&gt; 而不用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sc&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;【练习】我们语法分析器的最终版本留给读者做测试。你可以创建多个折行元素，语法分析之后它们会用一个空格拼接在一起。&lt;/p&gt;

&lt;h2 id=&quot;编写高效的语法分析器&quot;&gt;编写高效的语法分析器&lt;/h2&gt;

&lt;p&gt;让我们讨论一下怎么才能提高 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 语法分析器的性能。不过首先要指出，我们应当用性能分析和基准测试来验证我们的改进。这是我们在性能调优时检查是否有效的唯一方法。&lt;/p&gt;

&lt;p&gt;这里有一些常见的建议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果你的语法分析器用的是单子栈而非普通的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 单子（回忆一下，这是使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identity&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 单子变换，非常轻量），请确保 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transformers&lt;/code&gt; 库的版本不低于 0.5，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 的版本不低于 7.0。这两个库在上述版本均有关键性的性能提升，只要升级就能变快。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsec&lt;/code&gt; 单子总是比基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParsecT&lt;/code&gt; 的单子变换更快。除非绝对必要，请避免使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WriterT&lt;/code&gt; 或者其它单子变换。往单子栈里加得越多，语法分析就越慢。&lt;/li&gt;
  &lt;li&gt;回溯是个代价高昂的操作。请避免构建冗长的选择链，其中的每个选择都有可能在失败前陷得很深。&lt;/li&gt;
  &lt;li&gt;除非确实有理由，请避免让语法分析器保持多态。最好指定一下语法分析器的具体类型，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type Parser = Parsec Void Text&lt;/code&gt;。这样能让 GHC 更好地进行优化。&lt;/li&gt;
  &lt;li&gt;尽可能内联（当然，是在合理的地方）。内联的巨大作用可能会令你难以置信，特别是对于那些很短的函数。这对跨模块使用的语法分析器尤其有用，因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INLINE&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INLINEABLE&lt;/code&gt; 编译指令能让 GHC 把函数定义转储到接口文件，这有助于进行特化。&lt;/li&gt;
  &lt;li&gt;尽可能使用快速的原语，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhileP&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhile1P&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeP&lt;/code&gt;。&lt;a href=&quot;https://markkarpov.com/post/megaparsec-more-speed-more-power.html#there-is-hope&quot;&gt;这篇博客&lt;/a&gt;解释了为什么它们这么快。&lt;/li&gt;
  &lt;li&gt;尽可能使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;satisfy&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notChar&lt;/code&gt;，而不要使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oneOf&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noneOf&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尽量上面大多数建议不需要进一步解释，但我觉得最好养成习惯使用这三个新的原语：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhileP&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhile1P&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeP&lt;/code&gt;。前两个尤其常见，能帮我们替换掉一些基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;many&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some&lt;/code&gt; 的结构，它们更快并且会改而返回一大块输入流，也就是我们之前说的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens s&lt;/code&gt; 类型。&lt;/p&gt;

&lt;p&gt;举例来说，回忆一下我们对 URI 的用户名进行语法分析时用到下面的代码：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alphaNumChar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以把它替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhile1P&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takeWhile1P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alpha num character&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAlphaNum&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;--                  ^                            ^&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;--                  |                            |&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- label for tokens we match against         predicate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteString&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 进行语法分析时，这会比原来的方法快很多。顺便注意一下，我们能从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhile1P&lt;/code&gt; 直接拿到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt;，所以就不再需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T.pack&lt;/code&gt; 了。&lt;/p&gt;

&lt;p&gt;下面这些等式对于理解 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhileP&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeWhile1P&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe String&lt;/code&gt; 参数很有帮助：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;takeWhileP&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;takeWhileP&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;many&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;takeWhile1P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;takeWhile1P&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;satisfy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;语法分析错误&quot;&gt;语法分析错误&lt;/h2&gt;

&lt;p&gt;到现在我们已经探索了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 的大多数特性，是时候来学习一下语法分析错误了：它们如何定义、如何触发、如何在运行时处理它们。&lt;/p&gt;

&lt;h3 id=&quot;错误的定义&quot;&gt;错误的定义&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt; 类型有如下定义：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrivialError&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Trivial errors, generated by Megaparsec's machinery. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- The data constructor includes the offset of error, unexpected token (if any), and expected tokens.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FancyError&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Fancy, custom errors.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用中文来讲：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt; 要么是个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrivialError&lt;/code&gt; 要么是个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FancyError&lt;/code&gt;，前者会提供偏移量信息、不期而遇的单词（一个或没有）和我们期待的单词集合（可能为空）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError s e&lt;/code&gt; 有下面两个类型参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; 是输入流的类型；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; 是自定义错误的类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorItem&lt;/code&gt; 是这样定义的：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;-- ^ Non-empty stream of tokens&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;-- ^ Label (cannot be empty)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EndOfInput&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ End of input&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorFancy&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorFail&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ 'fail' has been used in parser monad&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ordering&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pos&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pos&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Incorrect indentation error:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;--     desired ordering between reference level and actual level,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;--     reference indentation level,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;--     actual indentation level&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ Custom error data, can be conveniently disabled by indexing 'ErrorFancy' by 'Void'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorFancy&lt;/code&gt; 包括两个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 常见错误的数据构造器：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail&lt;/code&gt; 函数会让语法分析器失败并报告任意 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;因为该库原生支持对缩进敏感的语法，所以错误类型也能方便地存储缩进相关信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorCustom&lt;/code&gt; 是允许将任意数据嵌入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorFancy&lt;/code&gt; 类型的「扩展槽」。如果我们不需要在语法分析错误中使用自定义数据，我们可以把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Void&lt;/code&gt; 传给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorFancy&lt;/code&gt;。由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Void&lt;/code&gt; 不接受非底类型的值，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorCustom&lt;/code&gt; 就相当于「取消」了，用抽象数据类型做类比的话，就是「与零的积」。&lt;/p&gt;

&lt;p&gt;在旧版本中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt; 会直接被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; 等函数返回，但版本 7.0 推迟了每个错误的行和列的计算，以及用于显示错误的相关行内容的获取。这能让语法分析更快，因为这些信息通常只有在语法分析失败时才有用。另一个旧版本的问题是，同时显示多个错误需要每次重新遍历输入来获取正确的行。&lt;/p&gt;

&lt;p&gt;这个问题现在由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseErrorBundle&lt;/code&gt; 数据类型解决了：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;-- | A non-empty collection of 'ParseError's equipped with 'PosState' that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- allows to pretty-print the errors efficiently and correctly.&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseErrorBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseErrorBundle&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundleErrors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ A collection of 'ParseError's that is sorted by parse error offsets&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundlePosState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PosState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;-- ^ State that is used for line\/column calculation&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所有运行语法分析的函数都会返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseErrorBundle&lt;/code&gt;，里面会有设置好的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundlePosState&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt;。里面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt; 列表可以由用户自行扩展，不过这样得由用户来保证它们仍按照偏移量有序排列。&lt;/p&gt;

&lt;h3 id=&quot;如何触发错误&quot;&gt;如何触发错误&lt;/h3&gt;

&lt;p&gt;让我们讨论一下触发语法分析错误的几种不同方式，最简单的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail&lt;/code&gt; 函数：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (fail &quot;I'm failing, help me!&quot; :: Parser ()) &quot;&quot;
1:1:
  |
1 | &amp;lt;empty line&amp;gt;
  | ^
I'm failing, help me!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于很多熟悉其它简单的语法分析库（比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parsec&lt;/code&gt;）的人来讲，这通常已经足够了。然而，除了向用户显示语法分析错误之外，我们还有可能需要分析或是处理它，这时候 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; 就不是很方便了。&lt;/p&gt;

&lt;p&gt;平凡的语法分析错误通常都是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 生成的，但我们也能自己用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failure&lt;/code&gt; 组合子触发这样的错误：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Unexpected item (if any)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Expected items&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unfortunateParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unfortunateParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EndOfInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromList&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest unfortunateParser &quot;&quot;
1:1:
  |
1 | &amp;lt;empty line&amp;gt;
  | ^
unexpected end of input
expecting 'a' or 'b'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;跟基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail&lt;/code&gt; 的方法不同，平凡的错误很容易进行模型匹配，或是审视和修改。&lt;/p&gt;

&lt;p&gt;对于花哨的错误，相应地我们有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fancyFailure&lt;/code&gt; 组合子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Fancy error components&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fancyFailure&lt;/code&gt;，我们通常会去定义一个工具函数，而不是直接调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fancyFailure&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;incorrectIndent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ordering&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;-- ^ Desired ordering between reference level and actual level&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pos&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ Reference indentation level&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Pos&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ Actual indentation level&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;incorrectIndent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;作为添加自定义语法分析错误组件的例子，让我们创建这样一个特殊的语法分析错误，它会报告给定的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; 值不是关键字。&lt;/p&gt;

&lt;p&gt;首先，我们需要定义一个数据类型，其构造器代表我们想要支持的场景：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NotKeyword&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;并告诉 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 如何显示这个错误：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;showErrorComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NotKeyword&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; is not a keyword&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来我们更新一下我们的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; 别名：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后我们定义一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notKeyword&lt;/code&gt; 工具函数：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;notKeyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;notKeyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NotKeyword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;customFailure&lt;/code&gt; 是来自 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec&lt;/code&gt; 模块的工具函数：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;customFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后，让我们试一下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (notKeyword &quot;foo&quot; :: Parser ()) &quot;&quot;
1:1:
  |
1 | &amp;lt;empty line&amp;gt;
  | ^
foo is not a keyword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;显示错误&quot;&gt;显示错误&lt;/h3&gt;

&lt;p&gt;显示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseErrorBundle&lt;/code&gt; 可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errorBundlePretty&lt;/code&gt; 函数完成：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;-- | Pretty-print a 'ParseErrorBundle'. All 'ParseError's in the bundle will&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- be pretty-printed in order together with the corresponding offending&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- lines by doing a single efficient pass over the input stream. The&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- rendered 'String' always ends with a newline.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;errorBundlePretty&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseErrorBundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Parse error bundle to display&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;-- ^ Textual rendition of the bundle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;99% 的情况下你只需要这么一个函数。&lt;/p&gt;

&lt;h3 id=&quot;在运行时接住错误&quot;&gt;在运行时接住错误&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 另一个有用的特性是它能够「接住」语法分析错误，并以某种方式改变它，然后再重新抛出错误，就像异常一样。这可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observing&lt;/code&gt; 原语实现：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;-- | @'observing' p@ allows to “observe” failure of the @p@ parser, should&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- it happen, without actually ending parsing, but instead getting the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 'ParseError' in 'Left'. On success parsed value is returned in 'Right'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- as usual. Note that this primitive just allows you to observe parse&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- errors as they happen, it does not backtrack or change how the @p@&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- parser works in any way.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;observing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;-- ^ The parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面是演示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observing&lt;/code&gt; 典型用法的完整程序：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE TypeApplications  #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intercalate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrivialWithLocation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- position stack&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FancyWithLocation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- position stack&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Void, because we do not want to allow to nest Customs&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;showErrorComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrivialWithLocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parseErrorTextPretty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrivialError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showPosStack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;showErrorComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FancyWithLocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parseErrorTextPretty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FancyError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showPosStack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;showPosStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;showPosStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intercalate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrivialError&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;TrivialWithLocation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FancyError&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;FancyWithLocation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rlvl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alvl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;FancyWithLocation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rlvl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alvl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrivialWithLocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;TrivialWithLocation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FancyWithLocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;FancyWithLocation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cs&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parseTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaacc&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parseTest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inside&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaacc&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【练习】深入理解这个程序是如何工作的。&lt;/p&gt;

&lt;p&gt;如果运行这个程序，会看到以下输出：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1:4:
  |
1 | aaacc
  |    ^
unexpected 'c'
expecting 'a' or 'b'
in foo
1:4:
  |
1 | aaacc
  |    ^
unexpected 'c'
expecting 'a' or 'b'
in foo, in bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因此，这个特性可以用来给语法分析错误附加位置标签，或是定义能以某种方式处理该错误的「区域」。这种惯用法很有用，所以甚至有一个基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observing&lt;/code&gt; 定义的工具函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;-- | Specify how to process 'ParseError's that happen inside of this&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- wrapper. This applies to both normal and delayed 'ParseError's.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- As a side-effect of the implementation the inner computation will start&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- with empty collection of delayed errors and they will be updated and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- “restored” on the way out of 'region'.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ How to process 'ParseError's&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;-- ^ The “region” that the processing applies to&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;observing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- see the next section&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【练习】用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt; 重写之前程序中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inside&lt;/code&gt; 函数。&lt;/p&gt;

&lt;h3 id=&quot;控制错误的位置&quot;&gt;控制错误的位置&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt; 的定义使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseError&lt;/code&gt; 原语：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;parseError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是错误报告的基础原语，我们目前见到的所有其它函数都基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseError&lt;/code&gt; 定义的：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Unexpected item (if any)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Expected items&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOffset&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TrivialError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Fancy error components&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fancyFailure&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOffset&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;parseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FancyError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseError&lt;/code&gt; 可以让你设置错误的偏移量（也就是位置），而不必是输入流的当前位置。让我们回到很久之前的那个例子：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;withPredicate2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- ^ The check to perform on parsed input&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Message to print when the check fails&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Resulting parser that performs the check&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withPredicate2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOffset&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们注意到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setOffset o&lt;/code&gt; 能让错误被正确定位，但它的副作用是会使语法分析状态失效，也就是说偏移量不再反映现实情况了。在更复杂的语法分析器中，这可能会是个现实的问题。举例来说，想象一下你用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observing&lt;/code&gt; 包住了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withPredicate2&lt;/code&gt;，那么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail&lt;/code&gt; 之后可能还会有代码运行。&lt;/p&gt;

&lt;p&gt;有了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseError&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt;，我们能够正确地解决这个问题了：要么使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseError&lt;/code&gt; 来重设错误位置，要么直接用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;region&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;withPredicate3&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- ^ The check to perform on parsed input&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Message to print when the check fails&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Resulting parser that performs the check&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withPredicate3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOffset&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setErrorOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;withPredicate4&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;-- ^ The check to perform on parsed input&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;-- ^ Message to print when the check fails&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;-- ^ Resulting parser that performs the check&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;withPredicate4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOffset&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FancyError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;报告多个错误&quot;&gt;报告多个错误&lt;/h3&gt;

&lt;p&gt;最后，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 允许我们在一次运行过程中触发多个语法分析错误。这能帮助我们一次修复多处错误，而不需要运行好几次语法分析器。&lt;/p&gt;

&lt;p&gt;拥有多错误语法分析器的前提条件是，它要能跳过一部分有问题的输入，并从一个已知没问题的位置继续进行语法分析。这部分工作要用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withRecovery&lt;/code&gt; 原语完成：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;-- | @'withRecovery' r p@ allows continue parsing even if parser @p@&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- fails. In this case @r@ is called with the actual 'ParseError' as its&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- argument. Typical usage is to return a value signifying failure to&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- parse this particular object and to consume some part of the input up&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- to the point where the next object starts.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- Note that if @r@ fails, original error message is reported as if&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- without 'withRecovery'. In no way recovering parser @r@ can influence&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- error messages.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;withRecovery&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ How to recover from failure&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;-- ^ Original parser&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;-- ^ Parser that can recover from failures&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 Megaparsec 8 之前，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 必须是包含成功和失败两种可能性的和类型，比如说 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either (ParseError s e) Result&lt;/code&gt;。语法分析错误在收集后会加入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseErrorBundle&lt;/code&gt; 以进行显示。不必说，这些都是对用户不友好的高级用法。&lt;/p&gt;

&lt;p&gt;Megaparsec 8 支持了「延迟错误」：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;-- | Register a 'ParseError' for later reporting. This action does not end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- parsing and has no effect except for adding the given 'ParseError' to the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- collection of “delayed” 'ParseError's which will be taken into&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- consideration at the end of parsing. Only if this collection is empty&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- parser will succeed. This is the main way to report several parse errors&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- at once.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;registerParseError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;cd&quot;&gt;-- | Like 'failure', but for delayed 'ParseError's.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;registerFailure&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Unexpected item (if any)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Expected items&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;cd&quot;&gt;-- | Like 'fancyFailure', but for delayed 'ParseError's.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;registerFancyFailure&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MonadParsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- ^ Fancy error components&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这些错误可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withRecovery&lt;/code&gt; 的错误处理回调中注册，所以结果类型会是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe Result&lt;/code&gt;。这样可以把延迟错误列入最后的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseErrorBundle&lt;/code&gt;，并且在错误列表非空的情况让语法分析失败。&lt;/p&gt;

&lt;p&gt;有了这些，我们希望编写多错误语法分析器的做法会在用户群中更加普遍。&lt;/p&gt;

&lt;h2 id=&quot;测试-megaparsec-语法分析器&quot;&gt;测试 Megaparsec 语法分析器&lt;/h2&gt;

&lt;p&gt;对语法分析器进行测试是大多数人迟早要面对的事情，所以我们有义务提一下。最推荐的方式是使用 &lt;a href=&quot;https://hackage.haskell.org/package/hspec-megaparsec&quot;&gt;hspec-megaparsec&lt;/a&gt; 包，里面有一些效用期望，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldParse&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseSatisfies&lt;/code&gt; 等等，能和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hspec&lt;/code&gt; 测试框架协同工作。&lt;/p&gt;

&lt;p&gt;让我们从一个用例开始：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Control.Applicative&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test.Hspec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Test.Hspec.Megaparsec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec.Char&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IO&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hspec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;myParser&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;returns correct result&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;result of parsing satisfies what it should&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaaa&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseSatisfies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldParse&lt;/code&gt; 接受 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either (ParseErrorBundle s e) a&lt;/code&gt;，即语法分析的结果和一个用来进行比较的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; 类型的值，这可能是用得最多的工具函数。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseSatisfies&lt;/code&gt; 跟它很相似，但不是跟期待的结果比较是否相等，而是用任意断言检查结果。&lt;/p&gt;

&lt;p&gt;其它简单的效用期望还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldSucceedOn&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldFailOn&lt;/code&gt;（但很少用到它们）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;should parse 'a's all right&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldSucceedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaaa&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;should fail on 'b's&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldFailOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 时，我们想要让语法分析错误更加精确。为了测试语法分析错误我们可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldFailWith&lt;/code&gt;，用法如下：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fails on 'b's producing correct error message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldFailWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;TrivialError&lt;/span&gt;
          &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;像这样写出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrivialError&lt;/code&gt; 挺让人厌烦的。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt; 的定义包含了像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NonEmpty&lt;/code&gt; 这样「不方便」的类型，就像我们上面见到的那样，写起来很麻烦。幸运的是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test.Hspec.Megaparsec&lt;/code&gt; 也重新导出了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Error.Builder&lt;/code&gt; 模块，里面提供了更方便地构建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ParseError&lt;/code&gt; 的 API。让我们来看看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fails on 'b's producing correct error message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldFailWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utok&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etok&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; 的第一个参数是错误的偏移量（在出错之前我们吃掉了多少单词），这里它就是 0。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utok&lt;/code&gt; 表示「不期而遇的单词」，类似地 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etok&lt;/code&gt; 表示「我们期待的单词」。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;【练习】要构建花哨的错误，也有类似的工具函数叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errFancy&lt;/code&gt;，请了解一下。&lt;/p&gt;

&lt;p&gt;最后，还可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failsLeaving&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;succeedLeaving&lt;/code&gt; 来测试输入的哪部分在语法分析后还没被吃掉：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;consumes all 'a's but does not touch 'b's&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;runParser'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaabbb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;succeedsLeaving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fails without consuming anything&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;runParser'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myParser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbbccc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failsLeaving&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbbccc&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这些函数应该用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParser'&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runParserT'&lt;/code&gt; 运行，因为它们支持自定义初始状态并且会返回最终状态（这就能检查输入流剩下的东西了）：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;runParser'&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;-- ^ Initial state&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;runParserT'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParsecT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;-- ^ Parser to run&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;-- ^ Initial state&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialState&lt;/code&gt; 函数接受输入流，返回该输入流构成的初始状态，而初始状态的其它记录字段会用默认值填充。&lt;/p&gt;

&lt;p&gt;关于使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hspec-megaparsec&lt;/code&gt;，下述代码会是你的灵感来源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hspec-megaparsec&lt;/code&gt; 编写的 &lt;a href=&quot;https://github.com/mrkkrp/megaparsec/tree/master/megaparsec-tests/tests&quot;&gt;Megaparsec 自己的测试套件&lt;/a&gt;；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hspec-megaparsec&lt;/code&gt; 自带的&lt;a href=&quot;https://github.com/mrkkrp/hspec-megaparsec/blob/master/tests/Main.hs&quot;&gt;玩具测试套件&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用自定义输入流&quot;&gt;使用自定义输入流&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;megaparsec&lt;/code&gt; 能用来对任何输入流进行语法分析，只要它是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 类型类的实例。这意味着它可以和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alex&lt;/code&gt; 之类的词法分析工具配合使用。&lt;/p&gt;

&lt;p&gt;为了不偏离我们的主题，我们不会展示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alex&lt;/code&gt; 是如何生成单词流的，我们就假定输入是下述形式：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE LambdaCase        #-}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE RecordWildCards   #-}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List.NonEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Proxy&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Void&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Text.Megaparsec&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DL&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.List.NonEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NE&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Data.Set&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OpenParen&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CloseParen&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了报告语法分析错误，我们需要一种方式知道单词的起始位置、终止位置和长度，因此我们添加了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WithPos&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SourcePos&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SourcePos&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这下我们就有数据类型表示自己的流了：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStreamInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- for showing offending lines&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unMyStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来，我们需要让 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyStream&lt;/code&gt; 成为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 类型类的实例。这需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeFamilies&lt;/code&gt; 语言扩展，因为我们想要定义关联类型函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Token&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tokens&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stream&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Token&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;-- …&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 的文档可以在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Stream&lt;/code&gt; 模块中找到。现在我们直接把剩下的方法定义完：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- …&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tokenToChunk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tokensToChunk&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chunkToTokens&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chunkLength&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chunkEmpty&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take1_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;take1_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokensLength&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pxy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:|&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;takeN_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokensLength&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;takeWhile_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokensLength&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;showTokens&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intercalate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showMyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tokensLength&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokenLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reachOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PosState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restOfLine&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PosState&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStreamInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postStr&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unMyStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateSourcePos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSourcePos&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateTabWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateTabWidth&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateLinePrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sameLine&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateLinePrefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preStr&lt;/span&gt;
          &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preStr&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sameLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSourcePos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateSourcePos&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;newSourcePos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateSourcePos&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unMyStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokensConsumed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myStreamInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pstateInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tokensConsumed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonEmpty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;of&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nePre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokensLength&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pxy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nePre&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;restOfLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;takeWhile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postStr&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Proxy&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;showMyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;showMyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;case&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Mul&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;OpenParen&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;CloseParen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多关于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; 类型类的背景资料（以及为什么它长这样）可以在&lt;a href=&quot;https://markkarpov.com/post/megaparsec-more-speed-more-power.html&quot;&gt;这篇博客&lt;/a&gt;中找到。&lt;/p&gt;

&lt;p&gt;现在我们可以为自定义的流定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parser&lt;/code&gt; 了：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parsec&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下一步是基于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokens&lt;/code&gt; 两个原语，定义基本的语法分析器了。对于原生支持的流我们有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Byte&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text.Megaparsec.Char&lt;/code&gt; 模块，但要使用自定义的单词，我们需要自定义工具函数。&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;liftMyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;liftMyToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myToken&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialPos&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyToken&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pToken&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tokens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;liftMyToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;integer&quot;&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后让我们写一个语法分析器测试一下加法表达式：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pInt&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pToken&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Plus&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pInt&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里是一个样例输入：&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;exampleStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exampleStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyStream&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;5 + 6&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Div&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;-- (1)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WithPos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;at'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SourcePos&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkPos&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;让我们试一下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pSum &amp;lt;* eof) exampleStream
(5,6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果我们把 (1) 处的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plus&lt;/code&gt; 改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Div&lt;/code&gt;，我们也能得到正确的错误信息：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;λ&amp;gt; parseTest (pSum &amp;lt;* eof) exampleStream
1:3:
  |
1 | 5 + 6
  |   ^^
unexpected /
expecting +
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;换言之，我们拥有一个能够处理自定义流的功能完备的语法分析器了。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:modern-uri&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;实际上有个 &lt;a href=&quot;https://hackage.haskell.org/package/modern-uri&quot;&gt;modern-uri&lt;/a&gt; 包，其 Megaparsec 语法分析器支持 RFC 3986 定义的 URI 格式，但它远比我们这里介绍的要复杂。 &lt;a href=&quot;#fnref:modern-uri&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Mark Karpov</name></author><category term="译文" /><summary type="html">原文标题：Megaparsec tutorial from IH book 原文链接：https://markkarpov.com/tutorial/megaparsec.html</summary></entry><entry><title type="html">日系偶像综述</title><link href="https://blog.yzsun.me/aidoru/" rel="alternate" type="text/html" title="日系偶像综述" /><published>2019-02-24T00:00:00+00:00</published><updated>2019-02-24T00:00:00+00:00</updated><id>https://blog.yzsun.me/aidoru</id><content type="html" xml:base="https://blog.yzsun.me/aidoru/">&lt;p&gt;刚刚过去的 2018 年，被一些媒体称为「中国偶像元年」，这一年里爱奇艺的《偶像练习生》和腾讯的《创造101》将偶像和粉丝经济的概念一下子推向了主流文化。很遗憾没有去萧山现场看《创造101》的录制，不过我去钱江世纪公园看了首届天猫亚洲偶像嘉年华（AIF2018），明显感觉在两大偶像综艺繁荣的背后，中国国内所谓的养成系偶像还不成气候。一般来说持续数日或者多舞台同时演出才称得上是音乐节，单日单舞台的 AIF 也就是地下偶像拼盘的水平吧，演出阵容和规模远不如日本的 TIF。不过在 AIF 上见证了 AKB48 Team SH 的首次公开亮相，我还是非常兴奋的，毕竟也算是跻身上海队的古参饭了。&lt;/p&gt;

&lt;p&gt;对「偶像」这个词的理解，一千个读者眼中就有一千个哈姆雷特。在日本虽然也有汉语词「偶像」，但只有崇拜对象之意；我们现在讨论的偶像则为「IDOL」的音译词「アイドル」。虽然「IDOL」仍然是偶像的意思，但经过音译的转换已经退化为了表音符号；因此在当代日语的语境中，「アイドル」并不会自然而然地跟崇拜对象之意关联起来，而是被赋予了新的含义：与粉丝分享成长过程、以其存在本身为魅力的人物（参见&lt;a href=&quot;https://ja.wikipedia.org/wiki/アイドル&quot;&gt;维基百科&lt;/a&gt;）。请允许我将这个语义下的偶像称为日系偶像，本文便是个人对日系偶像领域的国内外研究现状综述，其中也结合了我在东京一年的见学体验以及赴北上广参加偶像活动的经历。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#格子裙经济学&quot; id=&quot;markdown-toc-格子裙经济学&quot;&gt;格子裙经济学&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#主流偶像地下偶像&quot; id=&quot;markdown-toc-主流偶像地下偶像&quot;&gt;主流偶像・地下偶像&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#中国偶像&quot; id=&quot;markdown-toc-中国偶像&quot;&gt;中国偶像&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#公演&quot; id=&quot;markdown-toc-公演&quot;&gt;公演&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#call--mix&quot; id=&quot;markdown-toc-call--mix&quot;&gt;CALL / MIX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#握手会&quot; id=&quot;markdown-toc-握手会&quot;&gt;握手会&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#综艺&quot; id=&quot;markdown-toc-综艺&quot;&gt;综艺&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#结语&quot; id=&quot;markdown-toc-结语&quot;&gt;结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;格子裙经济学&quot;&gt;格子裙经济学&lt;/h2&gt;

&lt;p&gt;日系偶像的魅力，简而言之我认为是参与感。首先偶像基本上都是素人出身，是未经加工的原石，在粉丝的陪伴下最后能否打磨成闪闪发光的钻石，本身就是一场大型养成游戏。在此基础上，秋元康还独辟蹊径打造了一整套偶像商法，事实证明这非常成功，乃至现今日本所有的偶像团体几乎都有秋元康的影子。田中秀臣教授在《AKB48 的格子裙经济学：粉丝效应中的新生与创意》中阐述了帮助 AKB48 走向成功的粉丝经济模式，综合其理论和我自己的体验，日系偶像有几个值得注意的特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;剧场公演：AKB48 在秋叶原的唐吉诃德百货店八楼拥有专属剧场，Team A/K/B/4/8 五个队轮流公演，保证每周都有多场公演，这从演唱会时代粉丝被动调整日程安排，进化到了剧场公演时代粉丝主动自由挑选时间场次。同时剧场公演的票价还十分低廉，比如上海 SNH48 的普通座票只要 80 人民币。在高频率、低票价的剧场公演下，日本粉丝还发展出了自己独特的应援方式，也就是后面重点叙述的 CALL / MIX 等等，这极大提升了公演中粉丝的参与感。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;握手会：这大概是日系偶像最具代表性的制度了，真正兑现了粉丝和偶像可以面对面的承诺。所谓握手会，就是通过购买唱片获取握手券，凭券即可赴会场跟偶像近距离握手聊天，其变种还有签名会、合影会等等。正因如此，粉丝们会大量购买同一张唱片来拿里面的券，近十年来 AKB48 GROUP 和坂道系列只要发了单曲就一定是当周的公信榜榜首。根据国际唱片业协会对 2017 年的数据统计，日本是全球第二大音乐市场，不过其实体唱片比例 72% 远超第一大市场美国的 15%，这说到底少不了握手会制度的功劳，虽然反过来日本偶像也被称为日音毒瘤。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;总选举：AKB48 另一大代表性制度是通过粉丝投票来决定偶像们在歌曲中的站位，每年都会举办一次，这或许也是 PRODUCE 101 模式的起源。AKB48 总选举的投票券都是真金实银买来的，虽然各种官方会员也会送投票权，但数额的大头还是来自投票期间发行的那张单曲。自 2010 年以来，公信榜单曲年榜冠军就雷打不动一直是 AKB48 的投票单。而总选举的开票现场也会由富士电视台直播，算得上是非常隆重了，腾讯视频这几年也买下了国内的网络直播权。除此之外，AKB48 其实还有名为重温时间最佳曲目100（Request Hour Setlist Best 100）的歌曲票选活动，也是通过购买单曲来取得投票权；另外还有一年一度的猜拳大会，完全凭运气来决定单曲出道的人选。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;地元化：虽然东京都市圈聚集了日本近 30% 的人口，但让其他地方的居民也能够在自己家门口见到小偶像则是进一步发展的必由之路。AKB48 小有名气之时，秋元康便开始在名古屋等地开设分团，如今更是印尼、泰国、菲律宾、越南、中国大陆和台湾遍地开花。最能体现地元化理念的其实还是 AKB48 Team 8：这个队定员 47 人，分别来自日本的 47 个都道府县，她们的口号也从本部的「会いに行けるアイドル」（能见面的偶像）转变为了「会いに行くアイドル」（去见你的偶像），在日本全国各地巡回演出。顺带一提，Team 8 的构想大概是来源于 NHK 晨间剧《海女》中影射 AKB48 的 GMT47。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;毕业制度：用毕业一词代指退团，据说最早来源于上世纪秋元康策划的小猫俱乐部。在日系偶像的养成模式下，成员们是不会一辈子待在团里的，总要迎来毕业、迈向人生的下一个阶段，或是成为歌手、或是成为演员、或是成为模特、或是宣布引退……在多期招募和毕业制度下，AKB48 这样的大型偶像团体历经十余年的发展，比起特定的人的集合更像是一套制度的实体化，正所谓铁打的秋元康流水的小偶像。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;主流偶像地下偶像&quot;&gt;主流偶像・地下偶像&lt;/h2&gt;

&lt;p&gt;日本有主流偶像和地下偶像之分，前者经常能在大众媒体上见到，而后者鲜有人知、大多以小型剧场公演为中心进行活动。虽然这没有严格的界限，但常常会以主流出道（メジャー・デビュー）作为分界点，即在日本唱片协会的 &lt;a href=&quot;https://www.riaj.or.jp/about/member.html&quot;&gt;18&lt;/a&gt; 家会员公司发售过唱片。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/idol-00.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以我粗浅的认识，如今广为人知的主流偶像可以说有这么几大势力：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hello! Project：早安少女组、ANGERME、Juice=Juice、Country Girls、玉兰花工厂、山茶花工厂、BEYOOOOONDS。由淳君担任制作人，是 21 世纪日本女子偶像团体的开端，旗下组合经历了数次重组，早安少女组 1998 - 2007 连续十年登上过红白歌会。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AMUSE：Perfume、BABYMETAL 等等。Perfume 原为广岛地元偶像，上京后成为流行电音组合，2008 年开始每年都会登上红白歌会；BABYMETAL 原为樱花学院的重音部，现已成为世界知名的重金属乐团，多次在欧美巡演。虽然她们都是偶像出身，但现在的身份更像是主流歌手。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AKB48 GROUP：日本国内六团 AKB48（东京）、SKE48（名古屋）、NMB48（大阪）、HKT48（福冈）、NGT48（新潟）、STU48（濑户内），海外六团 JKT48（雅加达）、BNK48（曼谷）、MNL48（马尼拉）、SGO48（胡志明）、AKB48 Team SH（上海）、AKB48 Team TP（台北）。均由秋元康担任制作人，AKB48 从地下偶像一步步成长为国民偶像，为日本偶像团体开创了制度的蓝本，开启了「偶像战国时代」。在 2014 年，曾经出现过 AKB48、SKE48、NMB48、HKT48 四个团同时登上红白歌会的奇观。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;STARDUST PLANET：桃色幸运草Z、私立惠比寿中学、虎鱼组、彩虹章鱼烧等等。桃草大概是日本近十年来唯一能够撼动秋元康的偶像团体，于 2012 - 2014 连续三年登上过红白歌会的舞台。星尘近年来在名古屋、大阪、福冈、仙台都设了团，也在探索地元化拓展之路。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DEARSTAGE：电波组.inc、彩虹征服者等等。电波组诞生于秋叶原的女仆咖啡店 Dear Stage，慢慢发展为以御宅族为成员的偶像团体，2015 年曾两次出演 Music Station。虹控最初由 pixiv 创建，成员由插画师、编舞师、声优、Cosplayer 等组成，2017 年底宣布并入 DEARSTAGE。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;坂道系列：乃木坂46、欅坂46、日向坂46、吉本坂46。亦由秋元康担任制作人，前三个团由索尼音乐主导运营，吉本坂则由吉本兴业运营。乃团最初以 AKB48 官方对手的名义成立，抛弃了剧场公演而改走演唱会路线，从 2015 年开始成为红白歌会的常客；欅坂则是摇滚风格的姐妹团体，在 2016 年创造了出道当年就登上红白歌会的历史；日向坂原称平假名欅坂（けやき坂46），今年刚刚宣告独立；吉本坂与上述三个团的画风完全不同，是吉本兴业旗下艺人组成的团体，性别不限，年龄不限。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;WACK：BiS、BiSH 等等。由渡边淳之介担任制作人，松隈健太担任音乐制作，两团均为朋克系偶像。BiS 曾于 2014 年一度解散，后于 2016 年再度结成；BiSH 则于 2015 年结成，2017 年底登上过 Music Station，我觉得是目前最有潜力的偶像之一。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为基本上只有上述主流偶像才有能力上电视（这里以 Music Station 为标准），或者办武道馆以上的大型演唱会，所以其他主流出道的偶像在大众心目中很可能仍然是地下偶像。&lt;/p&gt;

&lt;p&gt;另外不得不提的一大类是声优偶像，这是偶像文化和二次元文化的交汇地带。光谱的一极是没有专属虚拟形象、只是招募了声优作为成员的偶像团体，譬如爱贝克思旗下的 i☆Ris、代代木动画学院旗下的 =LOVE 和 ≠ME；另一极则是以二次元作品中的虚拟形象为主体活动的偶像团体，譬如 THE IDOLM@STER 系列、Love Live! 系列和 BanG Dream! 系列；也有介于两者之间的，譬如秋元康担任制作人的 22/7。「家虎」等偶像 CALL / MIX 在中国的扩散便归功于部分 Aqours 粉丝把地下偶像的玩法引入了 Aqours 的演唱会，进而影响到了中国二次元圈。&lt;/p&gt;

&lt;h3 id=&quot;中国偶像&quot;&gt;中国偶像&lt;/h3&gt;

&lt;p&gt;国内日系偶像现在是 SNH48 GROUP 一家独大，其董事长是有日本留学背景的久游网创始人王子杰。SNH48 于 2013 年在浅水湾进行首次公演，现在已经开出了 SNH48（上海）、BEJ48（北京）、GNZ48（广州）、SHY48（沈阳・刚刚解散）、CKG48（重庆・刚刚解散）五个分团，分别在嘉兴路、悠唐、中泰、豫珑城、国瑞设有星梦剧院，这些地名常作为这些团的代称。因为合同纠纷 AKS 在 2016 年 6 月 9 日宣布 SNH48 不再是 AKB48 GROUP 的一部分，并在 2018 年成立了新的官方分团 AKB48 Team SH，丝芭则表示将继续独立走原创道路。&lt;/p&gt;

&lt;p&gt;SNH48 GROUP 也独立举办一年一度的总决选和金曲大赏，而总决选两连冠的鞠婧祎现在已经被收编为丝芭旗下独立艺人，这跟 AKS 让成员外签到大手事务所的模式相当不同。这一差异的主因是丝芭会让成员入团前签专属艺人合约，8 年内即使退团也不得参与其他演艺活动，否则需要缴纳巨额违约金，这从&lt;a href=&quot;http://wenshu.court.gov.cn/content/content?DocID=38eefb50-5601-4464-96c3-a9e000936c82&quot;&gt;赵嘉敏&lt;/a&gt;、&lt;a href=&quot;http://wenshu.court.gov.cn/content/content?DocID=4d8148fe-30b3-4958-aa07-a72000aecec1&quot;&gt;李豆豆&lt;/a&gt;和&lt;a href=&quot;http://wenshu.court.gov.cn/content/content?DocID=ccbb10a6-2061-4860-8600-a8f00134f155&quot;&gt;陈怡馨&lt;/a&gt;的民事判决书就可见一斑。目前 SNH48 成立还未满 8 年，因此任何成员退团都几乎等同于引退，不像 AKB48 GROUP 的成员毕业只是人生新的开始。一个很直观的感受就是，很多成员无声无息地就走了，丝芭从来不发表毕业公告或是安排正式的毕业公演。&lt;/p&gt;

&lt;p&gt;国内被普遍认可为日系偶像的团体还有上海的 Lunar、Idol School、ATF（这三家都参加过 @JAM in 上海），广州的 1931，香港的 Ariel Project 等等。其中 Lunar 的出道时间甚至早于 SNH48，脱胎于上海一家女仆咖啡厅，不过在 2017 年发生了&lt;a href=&quot;https://mp.weixin.qq.com/s/mSKz4RZ89iPynU02oCehLA&quot;&gt;丑闻&lt;/a&gt;和资本变动，运营重心迁移到了重庆新团 Lunar 雾队，但不到一年又杳无音信了。Idol School 由早安少女组毕业成员钱琳（リンリン）担任制作人，也是走剧场公演路线，不过近年陷入&lt;a href=&quot;https://www.ylzbl.com/article/1864&quot;&gt;欠薪风波&lt;/a&gt;前途未卜。1931 由欢聚时代（YY）投资组建，在广州拥有专属剧场，遗憾的是在 2017 年底宣布停止运营。ATF 由心动网络投资组建，未设剧场而走坂道系列路线，亦于 2017 年底发布公告并停止活动。上述团体的不少成员参加了去年腾讯制作的《创造101》，但都没能进入最终出道名单。相较之下香港的 Ariel Project 可能是中国最茁壮成长的地下偶像了，除了保持每月定期公演之外，至今已连续三年获邀出演 @JAM EXPO，并在日本成功发行了单曲。去年还诞生了 Ariel Project 的姐妹团体 ERЯOR，设定上是一支无乐器的摇滚乐队，两团都将参加今年三月份的 @JAM×TALE in HongKong 2019。&lt;/p&gt;

&lt;h2 id=&quot;公演&quot;&gt;公演&lt;/h2&gt;

&lt;p&gt;一般来说，偶像公演有这么三种形式：单独公演（ワンマン）、拼盘（対バン）、音乐节（フェス）。因为大多数地下偶像都没有实力租巨蛋、武道馆这样的万人场，所以大多数情况下都在数百到千人左右的小型剧场（ライブハウス）举办，票价十分便宜，偶像与粉丝也不会有什么距离感，终演后还会有物贩和特典会，于是这些活动都会以公演（ライブ）而不是演唱会（コンサート）来代称。&lt;/p&gt;

&lt;p&gt;除了 AKB48 GROUP 这类有专属剧场的，其他偶像团体大多都需要自己搜集情报来跑活动。一般都是去自己推的偶像的官网确认公演的日程安排，如果只是周末有闲暇想去打打尻跳跳高，也可以看看定期举办的偶像相关企划，比如「&lt;a href=&quot;https://akibalive.jp&quot;&gt;AKIBAカルチャーズ劇場&lt;/a&gt;」「&lt;a href=&quot;http://www.tokyoidolgekijo.com&quot;&gt;東京アイドル劇場&lt;/a&gt;」「&lt;a href=&quot;http://www.at-jam.jp&quot;&gt;@JAM&lt;/a&gt;」「&lt;a href=&quot;http://girlsbomb.com&quot;&gt;Girl’s Bomb!!&lt;/a&gt;」「&lt;a href=&quot;http://idolkoushien.com&quot;&gt;アイドル甲子園&lt;/a&gt;」「&lt;a href=&quot;http://marquee-mag.com/newevent.html&quot;&gt;MARQUEE祭&lt;/a&gt;」「&lt;a href=&quot;http://s.mxtv.jp/mip_mif/&quot;&gt;MX IDOL PROJECT&lt;/a&gt;」「&lt;a href=&quot;http://www.radionikkei.jp/idol_generation/&quot;&gt;アイドルジェネレーション&lt;/a&gt;」「&lt;a href=&quot;https://zamurai.tokyo&quot;&gt;アイドル侍&lt;/a&gt;」「&lt;a href=&quot;http://www.idol-pass.com&quot;&gt;楽遊 IDOL PASS&lt;/a&gt;」「&lt;a href=&quot;https://tiget.net/users/139&quot;&gt;IDOL CONTENT EXPO&lt;/a&gt;」「&lt;a href=&quot;https://ticket.rakuten.co.jp/features/tip/index.html&quot;&gt;TOKYO IDOL PROJECT&lt;/a&gt;」「&lt;a href=&quot;http://idorisefes.jp&quot;&gt;IDORISE!! FESTIVAL&lt;/a&gt;」等等等等。&lt;/p&gt;

&lt;p&gt;如果还没有特别心仪的偶像或是想要发掘地下偶像中的原石，大型偶像音乐节则是最佳去处。日本最大的偶像音乐节是富士电视台发起的「&lt;a href=&quot;http://www.idolfes.com&quot;&gt;TOKYO IDOL FESTIVAL&lt;/a&gt;」，其会场遍布整个台场，最近三年每年出演的偶像都超过了两百组。因为仍然有很多没得到出演权的地下偶像希望报名，TIF 还举办了「TIF への扉」系列企划来进行甄选，富士电视台亦推出了指原莉乃的冠番「この指と〜まれ！」进行联动。其次要数「&lt;a href=&quot;http://www.at-jam.jp&quot;&gt;@JAM EXPO&lt;/a&gt;」和「&lt;a href=&quot;http://summerfes.idolyokocho.com&quot;&gt;アイドル横丁夏まつり!!&lt;/a&gt;」，这两场都在离东京不远的横滨举办，分别是在室内的横滨体育馆（横浜アリーナ）和露天的横滨红砖仓库（横浜赤レンガ倉庫）。&lt;/p&gt;

&lt;p&gt;另外非常值得一去的是各所大学的学园祭，很多大学的偶像文化研究会都会邀请偶像来参加，而且原则上都是免费的。以 2018 年东京的学园祭为例，&lt;a href=&quot;https://gogatsusai.jp&quot;&gt;五月祭&lt;/a&gt;（东京大学本乡校区）邀请了 なんキニ！、FES☆TIVE、煌めき☆あんフォレント、lyrical school 等，&lt;a href=&quot;https://www.komabasai.net&quot;&gt;駒場祭&lt;/a&gt;（东京大学驹场校区）邀请了 NEO JAPONISM、メイビーME、天晴れ！原宿、フィロソフィーのダンス 等，&lt;a href=&quot;http://www.hosei.ac.jp/campuslife/club/daigakusai.html&quot;&gt;自主法政祭&lt;/a&gt;邀请了 STU48、アキシブproject 等，最强的是「早稲田アイドルフェスティバル!!! in &lt;a href=&quot;https://wasedasai.net&quot;&gt;早稲田祭&lt;/a&gt;2018」邀请了包括 =LOVE 和 AKB48 在内的 29 组偶像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/idol-01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果想酣畅淋漓地享受偶像公演的乐趣，下面介绍的 CALL / MIX 则是解乏的良方。&lt;/p&gt;

&lt;h2 id=&quot;call--mix&quot;&gt;CALL / MIX&lt;/h2&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;call&quot;&gt;CALL&lt;/h3&gt;

&lt;p&gt;所谓 CALL，就是附和歌曲的节奏或歌词进行声援。最简单而常见的 CALL 就是挥舞荧光棒、跟随歌曲的节奏喊 Hey / Hai / Oi，地下偶像粉丝则不怎么用荧光棒，更喜欢拍手或做肢体动作。虽然打 CALL 的时机可以用音乐理论知识分析，但我个人感觉还是去公演现场多体验几场学起来更快一些，到时候自然而然就对节拍产生条件反射了。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;人名-call&quot;&gt;人名 CALL&lt;/h4&gt;

&lt;p&gt;人名 CALL 非常好理解，就是在成员唱歌的时候喊她的名字。AKB48 剧场公演喊「超絶可愛い〇〇〇」比较常见，地下偶像公演喊「オーレーの〇〇〇」比较常见。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;ppph&quot;&gt;PPPH&lt;/h4&gt;

&lt;p&gt;PPPH 是「パンパパン、ヒュー」的缩写，先在身体左侧拍一次手，再在右侧连拍两次手，最后跳起来喊一声「ヒュー」。虽然 PPPH 这个名字很常见，但相同的节奏下现在更流行的是 Oh-ing。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;oh-ing&quot;&gt;Oh-ing&lt;/h4&gt;

&lt;p&gt;一开始大家是先上举荧光棒喊「オー」，再向前挥荧光棒喊「ハイ」；但地下偶像粉丝不怎么用荧光棒，就改成了先喊「オー」再拍手两次，这被称为「オーイング」（Oh-ing）。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;fufu-fuwafuwa&quot;&gt;Fufu-Fuwafuwa&lt;/h4&gt;

&lt;p&gt;在副歌的时候会打「オーフッフー 👏👏 フワフワ」，后面经常还会跟着「ハイセーノ、ハーイハイ、ハイハイハイハイ」，例如 まねきケチャ『&lt;a href=&quot;https://www.bilibili.com/video/av32045128?t=96&quot;&gt;冗談じゃないね&lt;/a&gt;』。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;家虎-&quot;&gt;家虎 🏠🐯&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;イエッタイガー！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「家」是「イエ」的谐音，「虎」是「タイガー」的意译，「家虎」现在已经成为地下偶像 CALL 的代名词。通常在副歌快要开始之前喊，大家经常会先重复「イエッ！」来预警，经典实战是 ベイビーレイズ JAPAN『&lt;a href=&quot;https://www.bilibili.com/video/av3923091?t=225&quot;&gt;夜明け Brand New Days&lt;/a&gt;』；有时后面还会接上「ファイボワイパー！」，比如 まねきケチャ『&lt;a href=&quot;https://www.bilibili.com/video/av32019029?t=165&quot;&gt;きみわずらい&lt;/a&gt;』。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;高低-call--松隆子-call&quot;&gt;高低 CALL &amp;amp; 松隆子 CALL&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;高まるよ！高まるよ！高まる低まるビスマルク！&lt;br /&gt;
シジマール！アルシンド！カズダンス！ニーハイ！オーハイ！&lt;br /&gt;
缶チューハイ！ウーロンハイ！ナチュラルハイ！アイ・キャン・フライ！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;パン、パン、パン、パン、ポケモンパン！&lt;br /&gt;
フレッシュブレッド、伊藤パン！&lt;br /&gt;
松たか子！松たか子！&lt;br /&gt;
ヤマザキ春のパンまつり！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这两个 CALL 没有上面几种那么普遍，也都是地下偶像 CALL。前者实战案例比如 天晴れ！原宿『&lt;a href=&quot;https://www.bilibili.com/video/av9063541?t=100&quot;&gt;アッパレルヤ!!&lt;/a&gt;』，后者比如 26時のマスカレイド『&lt;a href=&quot;https://www.bilibili.com/video/av39760291?t=490&quot;&gt;ハートサングラス&lt;/a&gt;』。如今这些 CALL 亦被国内聚聚引入了 SNH48 GROUP 的原创公演，因此在星梦剧院也能时常听到。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;世界-call&quot;&gt;世界 CALL&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;ruby&gt;世界&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;せかい&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;の、&lt;ruby&gt;一番&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;いちばん&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;、&lt;ruby&gt;可愛&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;かわい&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;い、〇〇〇！&lt;br /&gt;
〇〇〇、最可爱、超绝可爱、〇〇〇！&lt;br /&gt;
L・O・V・E、Lovely、〇〇〇！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这是 SNH48 粉丝原创的 CALL，糅合了日语、汉语和英语，虽然从语法上来说「世界の」应该是「世界で」才对。这个 CALL 在 SNH48 GROUP 十分常见，实战案例比如剧场公演曲『&lt;a href=&quot;https://www.bilibili.com/video/av15602616&quot;&gt;恋爱捉迷藏&lt;/a&gt;』，最早这是 Team NII 唐安琪的 SOLO 曲。&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;mix&quot;&gt;MIX&lt;/h3&gt;

&lt;p&gt;所谓 MIX，就是在前奏和间奏发动的活跃气氛（但没有实际意义）的呼喊。通行的 MIX 分为英语、日语、阿伊努语三部分，阿伊努语是日本北海道原住民的语言，之所以出现这门语言是因为偶像 MIX 的布道师 &lt;a href=&quot;https://www.youtube.com/watch?v=YhNg7JPrK7c&quot;&gt;園長&lt;/a&gt; 是北海道出身。如果前奏时间短就只打英语部分，等间奏再打日语和阿伊努语部分；如果前奏足够长就加上日语二连 MIX，或者再加上阿伊努语三连 MIX，亦或者打到日语「繊維」时再发动一次英语的 2.5 连 MIX。MIX 发展至今已有不少微妙的变化，下面以首次大规模投入使用的 AKB48 版本为基础进行介绍，不过 AKB48 Team 8 和 SNH48 原创曲的 MIX 更接近地下偶像。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;英语-mix&quot;&gt;英语 MIX&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;あーよっしゃいくぞー！&lt;br /&gt;
タイガー！ファイヤー！サイバー！ファイバー！ダイバー！バイバー！ジャージャー！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;地下偶像 MIX 通常将发动部分简化为「あー 👏👏 ジャージャー」或「👏👏👏👏👏 しゃーいくぞー」，最近还有虎火发动版本：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;タイガーファイヤー！&lt;br /&gt;
サイバー！ファイバー！ダイバー！バイバー！ジャージャー！ファイボー！ワイパー！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;日语-mix&quot;&gt;日语 MIX&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;あーもういっちょいくぞー！&lt;br /&gt;
&lt;ruby&gt;虎&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;とら&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;火&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;ひ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;人造&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;じんぞう&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;繊維&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;せんい&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;海女&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;あま&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;振動&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;しんどう&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;化繊飛除去&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;かせんとびじょきょ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;与英语部分类似，地下偶像 MIX 会简化发动部分，并且只喊「化繊」不喊「飛除去」，最近还有虎火发动版本：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;虎×12 虎火！&lt;br /&gt;
人造！繊維！海女！振動！化繊！飛！除去！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;阿伊努语-mix&quot;&gt;阿伊努语 MIX&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;チャペ！アペ！カラ！キナ！ララ！トゥスケ！ミョーホントゥスケ！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为很多歌曲的前奏和间奏不够长，所以阿伊努语部分相对罕见一些，而阿伊努语的另一个长版本就更罕见了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;チャペ！アペ！カラ！キナ！ララ！トゥスケ！ウィスゥペ！ケスィ！スィスゥパ！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;特殊-mix&quot;&gt;特殊 MIX&lt;/h4&gt;

&lt;p&gt;上面介绍的三段 MIX 几乎在所有偶像歌曲中都通用，还有很多特殊的 MIX 会在特定的歌曲中出现，有名的比如 Cheeky Parade『&lt;a href=&quot;https://www.bilibili.com/video/av7158148&quot;&gt;BUNBUN NINE9’&lt;/a&gt;』中的「チキパ MIX」、虹のコンキスタドール『&lt;a href=&quot;https://www.bilibili.com/video/av6216391?t=133&quot;&gt;トライアングル・ドリーマー&lt;/a&gt;』中的「三角関数 MIX」、まねきケチャ『&lt;a href=&quot;https://www.bilibili.com/video/av32045128?t=141&quot;&gt;冗談じゃないね&lt;/a&gt;』中的「林修 MIX」、SNH48『&lt;a href=&quot;https://www.bilibili.com/video/av15672385/?p=2&quot;&gt;春夏秋冬&lt;/a&gt;』中的「桃花庵 MIX」等等。这类特殊 MIX 中有一些脱颖而出，在近年得到了大规模应用，比如下面两个：由通行的三连 MIX 衍生出来的「可变三连 MIX」和另起炉灶的「混沌 MIX」。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;可变三连-mix&quot;&gt;可变三连 MIX&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;人造ファイヤファイボワイパー！&lt;br /&gt;
タイガー！タイガー！タタタタタイガー！&lt;br /&gt;
チャペアペカラキナ！チャペアペカラキナ！&lt;br /&gt;
ミョーホントゥスケ！👏 ワイパー！&lt;br /&gt;
ファイヤー！ファイヤー！虎虎カラキナ！&lt;br /&gt;
チャペアペファーマー！海女海女ジャスパー！&lt;br /&gt;
虎タイガー！虎タイガー！&lt;br /&gt;
人造繊維イエッタイガー！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;发动时间跟后面介绍的「ガチ恋口上」一模一样，属于比较进阶的 MIX 形式，实战案例比如 真っ白なキャンバス『&lt;a href=&quot;https://www.bilibili.com/video/av29393742?t=134&quot;&gt;SHOUT&lt;/a&gt;』、なんキニ！『&lt;a href=&quot;https://www.bilibili.com/video/av40742210?t=207&quot;&gt;僕を未来へ運ぶ列車&lt;/a&gt;』。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;混沌-mix&quot;&gt;混沌 MIX&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;ワー！ワー！ワールドカオス！&lt;br /&gt;
&lt;ruby&gt;諸行&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;しょぎょう&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;木暮&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;こぐれ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;時雨&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;しぐれ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;神楽&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;かぐら&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;金剛山&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;こんごうさん&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;翔襲叉&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;しょうしゅうしゃ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;br /&gt;
&lt;ruby&gt;黒雲&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;こくうん&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;無常&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;むじょう&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;ruby&gt;世界混沌&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;せかいこんとん&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大喊数声「ワー」发动，因为经常是合着歌词一起喊，所以比起 MIX 其实更像 CALL，实战案例比如 26時のマスカレイド『&lt;a href=&quot;https://www.bilibili.com/video/av39760291?t=500&quot;&gt;ハートサングラス&lt;/a&gt;』『&lt;a href=&quot;https://www.bilibili.com/video/av39760291?t=769&quot;&gt;チャプチャパ&lt;/a&gt;』。&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;口上&quot;&gt;口上&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;言いたいことがあるんだよ！&lt;br /&gt;
やっぱり〇〇〇はかわいいよ！&lt;br /&gt;
好き好き大好きやっぱ好き！&lt;br /&gt;
やっと見つけたお姫様！&lt;br /&gt;
俺が生まれてきた理由！&lt;br /&gt;
それはお前に出会うため！&lt;br /&gt;
俺と一緒に人生歩もう！&lt;br /&gt;
世界で一番愛してる！&lt;br /&gt;
ア！イ！シ！テ！ル！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最常见的口上是上面这个「ガチ恋口上」，翻译过来是真爱口述的意思，前奏、间奏、尾奏都有可能发动，其与 MIX 的不同在于口上的内容是有实际意义的。口上走出地下为大众所知的歌曲大概是 AKB48 Team 8 队歌『&lt;a href=&quot;https://www.bilibili.com/video/av3514790&quot;&gt;47の素敵な街へ&lt;/a&gt;』了，BEJ48 粉丝还在剧场公演曲『&lt;a href=&quot;https://www.bilibili.com/video/av5941977&quot;&gt;恋爱中的美人鱼&lt;/a&gt;』中喊出了中文版，堪称 MIX 本土化的典范：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有一些 心里话 想要说给你！&lt;br /&gt;
〇〇〇 就是你 最可爱的你！&lt;br /&gt;
喜欢你 喜欢你 就是喜欢你！&lt;br /&gt;
翻过山 越过海 你就是唯一！&lt;br /&gt;
有了你 生命里 全都是奇迹！&lt;br /&gt;
失去你 不再有 燃烧的意义！&lt;br /&gt;
让我们 再继续 绽放吧生命！&lt;br /&gt;
全世界所有人里我最喜欢你！&lt;br /&gt;
我！最！喜！欢！你！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;肢体动作&quot;&gt;肢体动作&lt;/h3&gt;

&lt;p&gt;地下偶像公演中，因为大家普遍不带荧光棒，所以肢体动作异常地多。虽然每首歌都有各自的套路，但仍有一个放之四海而皆准的做法，就是模仿台上偶像的动作，这被称为「振りコピ」。另外还有几个常见的动作，比如上升气流（ケチャ）和开花掌（咲きクラップ），前者是向前伸出双臂慢慢上举，后者是在面前击掌然后慢慢张开，两者一般都出现在节奏舒缓、伴奏音量下降以突出人声的部分，比如「落ちサビ」。前者之所以在日本叫做 Kecak，是因为这个动作特别像巴厘岛的传统舞蹈 &lt;a href=&quot;https://www.youtube.com/watch?v=eLc2cS8JZx4&quot;&gt;Kecak&lt;/a&gt;。「推しジャンプ」也非常常见，就是你推的成员在唱歌的话就不停地跳，但注意有的地方是禁止这种行为的。还有一些行为是大多数公演都禁止的，建议见到了也不要模仿，比如托举（リフト）、跳水（ダイブ）、狂舞（モッシュ）等。&lt;/p&gt;

&lt;h4 class=&quot;no_toc&quot; id=&quot;御宅艺&quot;&gt;御宅艺&lt;/h4&gt;

&lt;p&gt;御宅艺（ヲタ芸）是在动画歌曲或偶像歌曲演唱途中，粉丝在台下跳的一系列独特的舞蹈，拿着大闪打的又叫荧光棒舞，空手打的又叫地下艺。因为很多演唱会或剧场公演都没有空间来打御宅艺，我本人也不会（笑），这里就不详细介绍了。有兴趣的话可以参考 B 站上夜瞑的攻略手册&lt;a href=&quot;https://www.bilibili.com/video/av2708165&quot;&gt;新手入门篇&lt;/a&gt;、&lt;a href=&quot;https://www.bilibili.com/video/av2835230&quot;&gt;第二篇&lt;/a&gt;、&lt;a href=&quot;https://www.bilibili.com/video/av2975940&quot;&gt;完结篇&lt;/a&gt;、&lt;a href=&quot;https://www.bilibili.com/video/av4842571&quot;&gt;技巧理论篇&lt;/a&gt;，無用男的&lt;a href=&quot;https://www.bilibili.com/video/av20845434&quot;&gt;地下艺教学&lt;/a&gt;。&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;厄介&quot;&gt;厄介&lt;/h3&gt;

&lt;p&gt;偶像圈有一个常用语叫做「&lt;ruby&gt;厄介&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;やっかい&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」，这个词跟「&lt;ruby&gt;迷惑&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;めいわく&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」基本上是一个意思，在日语中都是指给别人添麻烦的行为，比如在公演中瞎搞。当然，不同场合的评价尺度不尽相同：在大众歌手的演唱会中，CALL 就已经有点厄介了；而在动画歌曲或坂道系列的演唱会中，CALL 不算厄介，MIX 才算；而在 AKB48 剧场公演中，MIX 也很正常，但以家虎为代表的地下偶像玩法还是比较厄介的；在会出警的地下偶像公演中，CALL / MIX 喊成什么样都没事，只要肢体动作别太过分就行；而一些地下偶像的野外公演，那跟摇滚现场就没区别了。&lt;/p&gt;

&lt;p&gt;下面介绍几种厄介行为，供大家批判：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av11395298&quot;&gt;在動漫演唱會中當厄介 入門五招&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av39762269&quot;&gt;【普通话对白】四十七条丢人的街【请勿模仿】&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av28649557&quot;&gt;在TIF2018上的夜明けBrand New Days，神回啊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av37629245&quot;&gt;打call很難嗎?從沒有概念到會一點點的基礎打call講座&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/av38193288&quot;&gt;★流行MIX大集合★ 簡單介紹2018年還會在各大偶像現場常聽到的call和MIX 卍最強鬼叫攻略卍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=BSmiGblnlOk&quot;&gt;アイドルのコール・ＭＩＸを集めてみたぉ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CPJx79ISf_o&quot;&gt;最近よく耳にする可変MIX BEST3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ameblo.jp/aoirokucho/entry-12274207791.html&quot;&gt;アイドルライブ MIX・コール・口上・ヲタ芸・縛り まとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shikaku-kenkyujyo.com/maneki-kecak/mix/&quot;&gt;まねきケチャのMIX・コール解説&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.popidolblog.com&quot;&gt;地下アイドルコールまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;握手会&quot;&gt;握手会&lt;/h2&gt;

&lt;p&gt;握手会制度是日系偶像的代表性标志，如果要判断一个团体是不是日系偶像，当今最行之有效的方法应该就是看她们握不握手了。&lt;/p&gt;

&lt;p&gt;AKB48 GROUP 和坂道系列的制度相似，握手会分为「全国握手会」和「個別握手会／大握手会」，分别简称全握和个握。全握就像列车的自由席，只要购买对应唱片的初回限定盘即可参加，通常开场前还会有一场 MINI LIVE，但排队时间极长、握手时间极短；个握就像列车的指定席，需要事先在网上指定成员和时间段，每档都有限额所以要进行多轮抽选。&lt;/p&gt;

&lt;p&gt;具体以 AKB48 为例，其单曲 CD 可以分为三类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;初回限定盘（Type 〇，CD+DVD，¥1646）内封全握券；&lt;/li&gt;
  &lt;li&gt;通常盘（Type 〇，CD+DVD，¥1646）内封生写真；&lt;/li&gt;
  &lt;li&gt;剧场盘（CD，¥1028）在 &lt;a href=&quot;https://akb48.chara-ani.com&quot;&gt;キャラアニ&lt;/a&gt; 抽选购入，外附生写真和个握券。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AKB48 大握手会（个握）的花样比较多，除了普通的握手还有签名会（サイン会）、合影会（２ショット写真会）、摄影会（１ショット動画会）等等，可以自由挑选喜欢的项目进行抽选。一些大握手会现场会同时举办「スペシャルステージ祭り」，通常是时长一刻钟的 MINI LIVE，和握手项目一样需要预约抽选。另外「推し増し制度」允许当天所有券都能当「当日メンバー指名参加券」用，可以在规定的时间段（每部 90 分钟的正中间 30 分钟）加推当天官方规定的成员（基本上是没卖完的成员），但只能握手不能参加特别的活动。根据以往经验，东京都市圈的场地一般都在神奈川县的横滨国际平和会议场（パシフィコ横浜）或千叶县的幕张展览馆（幕張メッセ），从东京都心出发都差不多一个小时到达。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/idol-02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中国国内的话，因为参加握手会的人数没有日本那么夸张，所以 SNH48 GROUP 没有分自由席和指定席两套制度，只要买了唱片就能凭券参加握手会，不过也时常有握手会规定部分人气成员需要网上预约时间段获取二维码。另外需要注意的是，有时丝芭会用「全握」一词表示每张券可以跟出席握手会的全体成员握手一次，相应地会把普通的握手叫做「单握」，这跟 AKB48 的全握和个握是不同的术语体系。丝芭官方商城每买 10 张（投票单要 20 张）唱片将随机赠送一张签名券或合影券，两券交替赠送；另有官方应援护照，凡参加官方活动即可敲章，比如北广集齐 100 个章可以跟全队 16 名成员合影等等。&lt;/p&gt;

&lt;p&gt;地下偶像的话，当然办不起专场握手会，因此通常是在公演之后跟物贩一起举行特典会。不同的偶像团体规则不同，但大体上都是终演后运营出来摆摊卖特典券，最常见的特典是拍立得（チェキ）合影加签名。如果参加的是拼盘，有时候工作人员会在检票时问你是来看哪个团的，然后会给你发这个团的物贩优先购入券。&lt;/p&gt;

&lt;h2 id=&quot;综艺&quot;&gt;综艺&lt;/h2&gt;

&lt;p&gt;前面说了这么多，然而也不是每个人都有机会到现场参加活动，对于屏幕饭来说综艺便成了深入了解成员们的唯一途径。秋元康担任制作人的偶像团体基本上都能拿到不错的资源，在电视上播放的冠番也很多，比如在 NHK BS Premium 播出就有 &lt;a href=&quot;https://www4.nhk.or.jp/akb48show/&quot;&gt;AKB48 SHOW!&lt;/a&gt; 和 &lt;a href=&quot;https://www4.nhk.or.jp/P4329/&quot;&gt;乃木坂46的学旅！&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在日本，只有 NHK 有资格进行全国放送，各地的民间放送局需要组建电视联播网才能覆盖全国，因此民放形成了五大电视网外加一批独立放送局的局面。譬如在东京，能够收到的地上放送共有八个台：① NHK 综合；② NHK 教育；［③ 未使用；］④ 日本电视台；⑤ 朝日电视台；⑥ TBS 电视台；⑦ 东京电视台；⑧ 富士电视台；⑨ 东京都会电视台（TOKYO MX，独立局）。除了依赖东京晴空塔的地上放送之外，还有放送卫星（BS）和通信卫星（CS）两种卫星放送方式，可以收看到额外的免费和付费电视频道。&lt;/p&gt;

&lt;p&gt;以下是目前东京地区地上放送的偶像常规番组（日本标准时间，三十小时制）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntv.co.jp/AKBINGO/&quot;&gt;AKBINGO!&lt;/a&gt;（日本电视台，周二 24:59，MC: Woman Rush Hour）&lt;/li&gt;
  &lt;li&gt;宾果系列（日本电视台，周一 25:29）：&lt;a href=&quot;http://www.ntv.co.jp/NOGIBINGO/&quot;&gt;NOGIBINGO!&lt;/a&gt;（MC: 冈田昇）、&lt;a href=&quot;http://www.ntv.co.jp/KEYABINGO/&quot;&gt;KEYABINGO!&lt;/a&gt;（MC: 三明治人）、&lt;a href=&quot;http://www.ntv.co.jp/SETOBINGO/&quot;&gt;SETOBINGO!&lt;/a&gt;（MC: 枫叶超合金）、&lt;a href=&quot;http://www.ntv.co.jp/HKTBINGO/&quot;&gt;HKTBINGO!&lt;/a&gt;（MC: 指原莉乃、三四郎）、&lt;a href=&quot;https://www.ntv.co.jp/SKEBINGO/&quot;&gt;SKEBINGO!&lt;/a&gt;（MC: 三四郎）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tv-aichi.co.jp/nogi-kou/&quot;&gt;乃木坂工事中&lt;/a&gt;（东京电视台，周日 24:00，MC: 香蕉人）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tv-tokyo.co.jp/keyaki/&quot;&gt;欅会不会写？&lt;/a&gt;（东京电视台，周日 24:35，MC: 土田晃之、泽部佑）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tv-tokyo.co.jp/hiraganaoshi/&quot;&gt;平假名推&lt;/a&gt;（东京电视台，周日 25:05，MC: 奥黛丽）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tv-tokyo.co.jp/yoshimotozaka/&quot;&gt;吉本坂46爆红前的全记录&lt;/a&gt;（东京电视台，周二 26:05，MC: 东野幸治、松村沙友理、古川洋平）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nanabunnonijyuuni.com/tv/&quot;&gt;22/7 计算中&lt;/a&gt;（东京都会电视台，周六 23:00，MC: 三四郎）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tv-asahi.co.jp/last-idol/&quot;&gt;最后的偶像&lt;/a&gt;（朝日电视台，周六 24:10，MC: 小木矢作）&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tv-asahi.co.jp/momocloch/&quot;&gt;桃草 Chan&lt;/a&gt;（朝日电视台，周二 26:24）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;最后的最后，祝正在大阪巨蛋举行毕业演唱会的西野七濑女士毕业快乐！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/idol-03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  collapsed = $('#call--mix');
  collapsed.click(function() {
    $(this).children().toggleClass('fa-caret-up').toggleClass('fa-caret-down');
    $(this).nextUntil('hr').toggle();
  });
  collapsed.append(' &lt;i class=&quot;fa fa-caret-up&quot;&gt;&lt;/i&gt;');
  collapsed.trigger('click');
&lt;/script&gt;</content><author><name>孙耀珠</name></author><category term="杂谈" /><summary type="html">刚刚过去的 2018 年，被一些媒体称为「中国偶像元年」，这一年里爱奇艺的《偶像练习生》和腾讯的《创造101》将偶像和粉丝经济的概念一下子推向了主流文化。很遗憾没有去萧山现场看《创造101》的录制，不过我去钱江世纪公园看了首届天猫亚洲偶像嘉年华（AIF2018），明显感觉在两大偶像综艺繁荣的背后，中国国内所谓的养成系偶像还不成气候。一般来说持续数日或者多舞台同时演出才称得上是音乐节，单日单舞台的 AIF 也就是地下偶像拼盘的水平吧，演出阵容和规模远不如日本的 TIF。不过在 AIF 上见证了 AKB48 Team SH 的首次公开亮相，我还是非常兴奋的，毕竟也算是跻身上海队的古参饭了。 对「偶像」这个词的理解，一千个读者眼中就有一千个哈姆雷特。在日本虽然也有汉语词「偶像」，但只有崇拜对象之意；我们现在讨论的偶像则为「IDOL」的音译词「アイドル」。虽然「IDOL」仍然是偶像的意思，但经过音译的转换已经退化为了表音符号；因此在当代日语的语境中，「アイドル」并不会自然而然地跟崇拜对象之意关联起来，而是被赋予了新的含义：与粉丝分享成长过程、以其存在本身为魅力的人物（参见维基百科）。请允许我将这个语义下的偶像称为日系偶像，本文便是个人对日系偶像领域的国内外研究现状综述，其中也结合了我在东京一年的见学体验以及赴北上广参加偶像活动的经历。</summary></entry><entry><title type="html">幽灵・熔毁・预兆</title><link href="https://blog.yzsun.me/spectre-meltdown-foreshadow/" rel="alternate" type="text/html" title="幽灵・熔毁・预兆" /><published>2019-01-31T00:00:00+00:00</published><updated>2019-01-31T00:00:00+00:00</updated><id>https://blog.yzsun.me/spectre-meltdown-foreshadow</id><content type="html" xml:base="https://blog.yzsun.me/spectre-meltdown-foreshadow/">&lt;p&gt;&lt;img src=&quot;/images/spectre-meltdown-foreshadow-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;去年肆虐了一年的幽灵系列漏洞似乎已经风平浪静了，但实际上它们对 CPU 微架构和系统软件领域依然有着长久而深远的影响。幽灵系列漏洞针对的并不是某个具体的硬件缺陷，而是将矛头对准了分支预测和乱序执行这两个现代 CPU 普遍采用的优化策略，并通过缓存旁路攻击完成对机密数据的任意读取，通用性极强，也极难做到全面的防御。本文将从幽灵系列漏洞的原理入手，介绍它们对现代计算机系统产生的影响和目前可行的对策。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;幽灵系列漏洞截至目前至少已有十种变体被通用漏洞披露（CVE）数据库收录，亦有未被单独收录的 SpectreRSB（USENIX WOOT 2018）、ret2spec（ACM CCS 2018）等攻击被陆续发现。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;漏洞编号&lt;/th&gt;
      &lt;th&gt;代号&lt;/th&gt;
      &lt;th&gt;正式名称&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Variant 1&lt;/td&gt;
      &lt;td&gt;CVE-2017-5753&lt;/td&gt;
      &lt;td&gt;Spectre-V1&lt;/td&gt;
      &lt;td&gt;Bounds Check Bypass&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Variant 2&lt;/td&gt;
      &lt;td&gt;CVE-2017-5715&lt;/td&gt;
      &lt;td&gt;Spectre-V2&lt;/td&gt;
      &lt;td&gt;Branch Target Injection&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Variant 3&lt;/td&gt;
      &lt;td&gt;CVE-2017-5754&lt;/td&gt;
      &lt;td&gt;Meltdown&lt;/td&gt;
      &lt;td&gt;Rogue Data Cache Load&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Variant 3a&lt;/td&gt;
      &lt;td&gt;CVE-2018-3640&lt;/td&gt;
      &lt;td&gt;Spectre-NG&lt;/td&gt;
      &lt;td&gt;Rogue System Register Read&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Variant 4&lt;/td&gt;
      &lt;td&gt;CVE-2018-3639&lt;/td&gt;
      &lt;td&gt;Spectre-NG&lt;/td&gt;
      &lt;td&gt;Speculative Store Bypass&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;CVE-2018-3665&lt;/td&gt;
      &lt;td&gt;LazyFP&lt;/td&gt;
      &lt;td&gt;Lazy FP State Restore&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;CVE-2018-3693&lt;/td&gt;
      &lt;td&gt;Spectre 1.1&lt;/td&gt;
      &lt;td&gt;Bounds Check Bypass Store&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;CVE-2018-3615&lt;/td&gt;
      &lt;td&gt;Foreshadow&lt;/td&gt;
      &lt;td&gt;L1 Terminal Fault - SGX&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;CVE-2018-3620&lt;/td&gt;
      &lt;td&gt;Foreshadow-NG&lt;/td&gt;
      &lt;td&gt;L1 Terminal Fault - OS/SMM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;CVE-2018-3646&lt;/td&gt;
      &lt;td&gt;Foreshadow-NG&lt;/td&gt;
      &lt;td&gt;L1 Terminal Fault - VMM&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;熔毁meltdown&quot;&gt;熔毁（Meltdown）&lt;/h2&gt;

&lt;p&gt;熔毁漏洞又称幽灵变体三，是这一系列漏洞中最容易利用、也最为人所知的一个。它由来自 Google Project Zero、德国 Cyberus 技术有限公司和奥地利格拉茨科技大学的三个团队各自独立地发现，论文发表在 USENIX Security 2018 上。要解释清楚熔毁漏洞的原理，需要综合三方面的知识：虚拟内存、乱序执行、基于缓存的旁路攻击。&lt;/p&gt;

&lt;p&gt;我们都知道，现代的操作系统都应用了&lt;strong&gt;虚拟内存&lt;/strong&gt;（Virtual Memory）技术，也就是说每个进程都拥有自己的虚拟地址空间，操作系统会根据页表将这些虚拟地址映射到物理地址。虚拟地址空间通常划分为用户和内核两部分，应用程序只能访问各自的用户地址空间，而只有在内核态下才能触及内核地址空间。为了进行访问权限控制，页表项中会有一个 User/Supervisor 位用来指定用户态能否访问，起到了隔离用户空间和内核空间的作用。在 Linux 和 macOS 等主流操作系统中，为了方便系统的访存操作，整个物理内存会直接映射到一部分内核空间上。而熔毁漏洞的目标便是攻破上述安全防线，在用户态也能任意访问所有物理内存。&lt;/p&gt;

&lt;p&gt;为了达到目的，熔毁漏洞选择了从处理器的微架构着手攻击。现代处理器普遍采用了指令级并行技术来最大程度地发挥计算性能，其中一个特性便是&lt;strong&gt;乱序执行&lt;/strong&gt;（Out-of-Order Execution）。在支持乱序执行的处理器上，所有指令在译码后将发往保留站（Reservation Station），一旦操作数就绪指令即可执行，不管先来后到。不过为了保证程序的正确性，指令执行的结果将以取指顺序写回程序员可见的寄存器，这被称为顺序提交（In-Order Commit）。而处理器的错误检测和异常处理都在提交阶段进行，如果发生异常则清空流水线并恢复原来的状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;旁路攻击&lt;/strong&gt;又称侧信道攻击（Side-Channel Attack），指绕开对加密算法的理论分析，而利用其硬件实现泄露的信息来进行攻击，譬如用时、功耗、电磁辐射等。在熔毁漏洞的例子中，缓存充当了攻击的旁路，基于缓存的 Flush+Reload 攻击击溃了乱序执行的最后一道防线。简单来讲，Flush+Reload 攻击首先利用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clflush&lt;/code&gt; 等指令预先清空缓存，再等待受害程序进行访存操作，然后通过数据访问的用时来判断某段数据在此期间是否被受害程序访问过。因为访问过的数据会载入缓存，所以下一次访问的速度会是第一次的两倍以上。如果没有权限调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clflush&lt;/code&gt; 等指令，也可以手动访问大量无关数据来达到清空缓存的目的，这种变体被称为 Evict+Reload 攻击。&lt;/p&gt;

&lt;p&gt;现在我们已经集齐了三片拼图，是时候把它们组合起来了。首先我们构造这样一段代码：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffffffff81a000e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到第一行访问了一个内核空间的地址，理论上会因无权访问而触发段错误，从而中止程序的运行。然而我们之前提到错误检查是在提交阶段才进行的，于是第二行的代码有很大概率会在读到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; 之后到触发异常之前的时间窗口内提前执行。虽然这种乱序执行最终不会对寄存器有任何可见的影响，但容易被忽略的一点是，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; 的部分数据被载入了缓存。虽然我们无法读取缓存中的数据，但我们可以通过 Flush+Reload 攻击来判断是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; 的哪部分被载入了缓存，从而得知 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; 的值是多少。比如我们可以根据下图的用时曲线推断出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data = 84&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spectre-meltdown-foreshadow-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;像这样在极短的时间窗口内留下副作用的指令，在论文中被称为&lt;strong&gt;暂态执行&lt;/strong&gt;（Transient Execution），这也是幽灵系列漏洞的核心技术。因为不少主流操作系统都在内核空间中直接映射了物理内存，所以通过暂态执行和缓存旁路攻击能够提取物理内存中的所有数据，危害性极强。&lt;/p&gt;

&lt;h3 id=&quot;影响范围&quot;&gt;影响范围&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;厂商&lt;/th&gt;
      &lt;th&gt;产品&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Intel&lt;/td&gt;
      &lt;td&gt;几乎所有在售的 CPU&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AMD&lt;/td&gt;
      &lt;td&gt;未受影响&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ARM&lt;/td&gt;
      &lt;td&gt;仅 Cortex-A75 受到影响&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IBM&lt;/td&gt;
      &lt;td&gt;z/Architecture 和 Power 架构均受影响&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Apple&lt;/td&gt;
      &lt;td&gt;所有在售的 Mac 和 iOS 设备&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;对策&quot;&gt;对策&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;硬件：重新设计 CPU 以确保在发射读取指令之前进行权限检查，英特尔已于 Coffee Lake Refresh 及后续微架构中修补熔毁漏洞，但之前的 CPU 就只能软件修补了；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;软件：各大操作系统都推出了内核页表隔离补丁来抵御熔毁漏洞：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Linux 4.15 已部署 Kernel Page-Table Isolation；&lt;/li&gt;
      &lt;li&gt;Windows 10 build 17035 已部署 KVA Shadow；&lt;/li&gt;
      &lt;li&gt;macOS 10.13.2 / iOS 11.2 已部署 Double Map；&lt;/li&gt;
      &lt;li&gt;……&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;内核页表隔离&quot;&gt;内核页表隔离&lt;/h2&gt;

&lt;p&gt;说起 Linux 这次针对熔毁漏洞的内核页表隔离补丁，其背后还有一段不短的历史，最早要从 Linux 的内核地址空间布局开始说起。&lt;/p&gt;

&lt;h3 id=&quot;kaslr&quot;&gt;KASLR&lt;/h3&gt;

&lt;p&gt;最早 Linux 的内核映像在地址空间中的地址是固定的，这使黑客能够硬编码地址对 Linux 进行攻击。为了使这类攻击不容易奏效，Linux 3.14 引入了&lt;strong&gt;内核地址空间布局随机化&lt;/strong&gt;（Kernel Address Space Layout Randomization），也就是说在每次系统启动时可以随机生成一个内核映像地址的偏移量，不过直到 Linux 4.12 开始 KASLR 才被默认开启。&lt;/p&gt;

&lt;h3 id=&quot;kaiser&quot;&gt;KAISER&lt;/h3&gt;

&lt;p&gt;虽然 KASLR 增加了攻击的难度，但不能杜绝黑客访问到内核映像。2017 年，格拉茨科技大学的研究人员提出了&lt;strong&gt;高效移除旁路的内核地址隔离&lt;/strong&gt;（Kernel Address Isolation to have Side-channels Efficiently Removed）补丁来进一步加固，恰好这个补丁对后来的熔毁漏洞也十分有效。KAISER 提议内核态和用户态使用两张不同的页表，内核态的页表还跟原来一样，而用户态的页表中不再暴露内核地址空间，除了少量 x86 架构必需的部分。不过其缺点也很明显，切换页表和清空转译后备缓冲器（Translation Lookaside Buffer）带来了不少额外的性能开销。&lt;/p&gt;

&lt;h3 id=&quot;kpti&quot;&gt;KPTI&lt;/h3&gt;

&lt;p&gt;在得知熔毁漏洞之后，Linux 社区开始着手从软件层面进行修补。开发团队在 KAISER 的基础上加入了一些优化，譬如支持进程上下文标识符（Process-Context Identifier）以避免清空页表缓存从而降低性能影响，并将其改名为&lt;strong&gt;内核页表隔离&lt;/strong&gt;（Kernel Page-Table Isolation）最终并入了 Linux 4.15。&lt;/p&gt;

&lt;h2 id=&quot;幽灵spectre&quot;&gt;幽灵（Spectre）&lt;/h2&gt;

&lt;p&gt;幽灵漏洞的影响范围比熔毁漏洞更加广泛，影响当下几乎所有计算机系统；不过幽灵漏洞相较而言更难利用，因为它需要被攻击的软件中包含特定形式的可利用代码。&lt;/p&gt;

&lt;p&gt;幽灵漏洞的核心也是暂态执行，暂态执行除了前面叙述的乱序执行之外还有其他的触发方式，而幽灵的论文中便提到了两种，这两种均与分支预测有关。因为分支指令可能涉及内存读取，需要上百个时钟周期才能完成，因此现代处理器都设计了分支预测器来预先推测执行。一个解耦的分支预测器通常包含两个部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分支方向预测器：预测分支的条件是真是假，通常利用模式历史表（Pattern History Table）等进行预测；&lt;/li&gt;
  &lt;li&gt;目标地址预测器：预测间接跳转的目标地址，通常利用分支目标缓冲器（Branch Target Buffer）等进行预测。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;幽灵漏洞的步骤与熔毁漏洞类似，也是通过缓存旁路攻击来获取暂态执行泄漏的信息。在攻击之前，通常还会训练分支预测器，使其运行目标代码时会进行特定的预测执行；同时可以把条件判断所需的数据挤出缓存，以提高预测执行发生的概率。&lt;/p&gt;

&lt;h3 id=&quot;变体一边界检查绕过&quot;&gt;变体一：边界检查绕过&lt;/h3&gt;

&lt;p&gt;我们设想系统调用或库中有这样一段代码：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; 是一个外部传入的变量，所以条件语句进行了数组越界的检查。我们可以训练分支预测器让它暂态执行第二行的代码，则 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array1[x]&lt;/code&gt; 可以访问任意数据，再对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array2&lt;/code&gt; 进行缓存旁路攻击即可。&lt;/p&gt;

&lt;p&gt;Spectre-V1 影响几乎所有 CPU，且不仅可以在系统级编程语言中构造，在带即时编译优化的 JavaScript 引擎中亦可复现。因此 Mozilla 宣布从 Firefox 57 开始 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;performance.now()&lt;/code&gt; 的精度将降到 20µs，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharedArrayBuffer&lt;/code&gt; 将默认禁用。而英特尔等厂商未推出硬件解决方案，建议开发者从软件层面解决，譬如 ICC 新增 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-mconditional-branch=pattern-fix&lt;/code&gt; 选项来自动插入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LFENCE&lt;/code&gt; 指令避免预测执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spectre-meltdown-foreshadow-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;变体二分支目标注入&quot;&gt;变体二：分支目标注入&lt;/h3&gt;

&lt;p&gt;第二个变体则是针对间接跳转目标地址的预测，我们可以训练分支预测器对方法调用等进行错误的目标地址预测，使其暂态执行我们挑选的可利用代码，辅以缓存旁路攻击获取机密数据。&lt;/p&gt;

&lt;p&gt;Spectre-V2 同样也影响几乎所有 CPU。英特尔发布了微码更新，引入了三种 Indirect Branch Control Mechanisms，可供对间接跳转预测进行限制。而谷歌工程师提出了 Retpoline，将间接跳转指令替换为返回指令，并将预测执行拖入死循环以缓解漏洞，ICC / GCC / Clang 等各大编译器均已提供支持。譬如 x86 (Intel Syntax) 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp rax&lt;/code&gt; 指令会被 Retpoline 替换为：&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;1:&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;set_up_target&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;capture_spec:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;2:&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;pause&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;3:&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capture_spec&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;set_up_target:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;4:&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;5:&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然处理器对于间接跳转目标地址的预测相对复杂，容易被投毒；但对于返回指令目标地址的预测是确定的，主要依赖一个后进先出的返回栈缓冲器（Return Stack Buffer）。在上面的例子中，指令 1 会将指令 2 的地址压入 RSB 中，并直接跳转到指令 4，指令 4 会将原来间接跳转的目标地址写入调用栈中返回地址的位置，于是下一行的返回指令 5 便完成了间接跳转的工作。另一方面，如果处理器进行了预测执行，在指令 5 处它会读取 RSB 并跳转到指令 2，接下来预测执行便陷入了死循环，直到处理器意识到预测并不正确。这样一来，Retpoline 便杜绝了目标地址预测被投毒的可能性。&lt;/p&gt;

&lt;h2 id=&quot;预兆foreshadow&quot;&gt;预兆（Foreshadow）&lt;/h2&gt;

&lt;p&gt;在全世界计算机安全风雨飘摇的一年里，大家都在寻找更加安全的可信计算环境，而其中经常被提到的便是 SGX。SGX 全称软件保护扩展（Software Guard Extensions），是英特尔处理器的一组扩展指令集。SGX 能够在内存上创建飞地（Enclave），这块空间受到处理器的严格保护，OS / Hypervisor / BIOS 等系统软件亦无法访问，相当于一个硬件级别的沙盒。&lt;/p&gt;

&lt;p&gt;可惜的是，SGX 也被熔毁漏洞的变体攻破了，这个变体被称为预兆漏洞。其流程与熔毁漏洞相似，但 SGX 的安全机制使攻击流程多了两步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;即使利用乱序执行漏洞，SGX 飞地数据也无法从内存读取，必须预先加载到 L1 缓存才能绕过限制，这也是该漏洞被英特尔官方命名为 L1 Terminal Fault 的原因；&lt;/li&gt;
  &lt;li&gt;对指向 SGX 飞地的指针解引用会返回中止页（Abort Page）使得结果为 -1，而不像之前因访问内核空间而缺页（Page Fault）。为了绕开这个限制，需要调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mprotect&lt;/code&gt; 函数将页表项的 Present 位设为无效，从而提前在传统页表检查时便抛出缺页。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;预兆漏洞影响英特尔所有支持 SGX 的 CPU，即 Skylake 及其后续微架构，Atom 系列除外。英特尔已经发布了微码更新，后续 CPU 也将进行硬件修复。&lt;/p&gt;

&lt;h2 id=&quot;系统性分类&quot;&gt;系统性分类&lt;/h2&gt;

&lt;p&gt;随着幽灵系列漏洞如雨后春笋般不断涌现，格拉茨科技大学的研究人员又撰写了论文对暂态执行攻击进行了系统性分类和梳理分析。首先论文以暂态执行的成因将攻击分为幽灵和熔毁两大类：前者是预测执行的误判，后者是乱序执行对异常的延时处理。&lt;/p&gt;

&lt;p&gt;对于幽灵类的攻击，论文以预测执行所依赖的处理器元件进行分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spectre-PHT：利用的是进行分支方向预测的模式历史表，包括 Spectre-V1、Spectre 1.1、NetSpectre；&lt;/li&gt;
  &lt;li&gt;Spectre-BTB：利用的是进行目标地址预测的分支目标缓冲器，包括 Spectre-V2；&lt;/li&gt;
  &lt;li&gt;Spectre-RSB：利用的是进行返回地址预测的返回栈缓冲器，包括 SpectreRSB、ret2spec；&lt;/li&gt;
  &lt;li&gt;Spectre-STL：利用的是进行内存依赖预测的 store-to-load 转发，包括 Spectre-V4。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于熔毁类的攻击，论文首先以异常类型分类，如果利用的异常是缺页则再基于页表项的属性位进行二级分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Meltdown-GP：使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDMSR&lt;/code&gt; 等指令非法读取系统寄存器会触发一般保护错误（General Protection Fault，#GP），利用这个异常进行暂态执行的攻击是 Spectre-V3a；&lt;/li&gt;
  &lt;li&gt;Meltdown-NM：FPU 的 SIMD 寄存器很大，然而不是所有进程都会用到它们，所以基于性能考虑，英特尔处理器没有在每次上下文切换的时候都保存和恢复这些寄存器。当新的进程第一次访问这些寄存器时，会触发设备不可用错误（Device Not Available，#NM），此时才会将它们保存进上一个进程的上下文中。利用这个异常进行暂态执行的攻击是 LazyFP；&lt;/li&gt;
  &lt;li&gt;Meltdown-BR：现代处理器通常支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOUND&lt;/code&gt; 指令来进行数组越界的检查，更新的还有英特尔的扩展指令集 MPX，它们都会在数组越界时触发越界错误（BOUND Range Exceeded，#BR），论文在英特尔和 AMD 的处理器上成功实施了基于该异常的攻击；&lt;/li&gt;
  &lt;li&gt;Meltdown-PF：基于缺页（Page Fault，#PF）的暂态执行攻击；
    &lt;ul&gt;
      &lt;li&gt;Meltdown-P：如前文所述，Foreshadow 和 Foreshadow-NG 为了绕开 SGX 的限制，通过将页表项的 Present 位设为无效引发缺页；&lt;/li&gt;
      &lt;li&gt;Meltdown-RW：Spectre 1.2 指出可以在暂态执行期间无视 Read/Write 位对只读数据进行写入；&lt;/li&gt;
      &lt;li&gt;Meltdown-US：元祖 Meltdown，利用了 User/Supervisor 位引发的缺页；&lt;/li&gt;
      &lt;li&gt;Meltdown-PK：英特尔的 Skylake-SP 服务器处理器支持了 Memory Protection Keys for Userspace，可在用户空间更改页的权限，但论文提出该权限控制可通过暂态执行绕过。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;论文中还分析了一些可能存在但实际上未能成功的攻击种类，在这里就不一一赘述了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/spectre-meltdown-foreshadow-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考论文&quot;&gt;参考论文&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Paul Kocher, et al. &lt;a href=&quot;https://spectreattack.com/spectre.pdf&quot;&gt;Spectre Attacks: Exploiting Speculative Execution&lt;/a&gt;. 40th IEEE Symposium on Security and Privacy. San Francisco, USA. May 20-22, 2019.&lt;/li&gt;
  &lt;li&gt;Moritz Lipp, et al. &lt;a href=&quot;https://meltdownattack.com/meltdown.pdf&quot;&gt;Meltdown: Reading Kernel Memory from User Space&lt;/a&gt;. 27th USENIX Security Symposium. Baltimore, USA. August 15-17, 2018.&lt;/li&gt;
  &lt;li&gt;Van Bulck, et al. &lt;a href=&quot;https://foreshadowattack.eu/foreshadow.pdf&quot;&gt;Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution&lt;/a&gt;. 27th USENIX Security Symposium. Baltimore, USA. August 15-17, 2018.&lt;/li&gt;
  &lt;li&gt;Claudio Canella, et al. &lt;a href=&quot;https://arxiv.org/pdf/1811.05441&quot;&gt;A Systematic Evaluation of Transient Execution Attacks and Defenses&lt;/a&gt;. arXiv:1811.05441.&lt;/li&gt;
  &lt;li&gt;Daniel Gruss, et al. &lt;a href=&quot;https://gruss.cc/files/kaiser.pdf&quot;&gt;KASLR is Dead: Long Live KASLR&lt;/a&gt;. 9th International Symposium on Engineering Secure Software and Systems. Bonn, Germany. July 4-5, 2017.&lt;/li&gt;
  &lt;li&gt;Daniel Gruss, et al. &lt;a href=&quot;https://www.usenix.org/system/files/login/articles/login_winter18_03_gruss.pdf&quot;&gt;Kernel Isolation: From an Academic Idea to an Effective Patch for Every Computer&lt;/a&gt;. USENIX ;login: Winter 2018.&lt;/li&gt;
  &lt;li&gt;Oliverio J. Santana, et al. &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.2.4047&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;A Comprehensive Analysis of Indirect Branch Prediction&lt;/a&gt;. 4th International Symposium on High Performance Computing. Kansai Science City, Japan. May 15-17, 2002.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>孙耀珠</name></author><category term="文献综述" /><summary type="html">去年肆虐了一年的幽灵系列漏洞似乎已经风平浪静了，但实际上它们对 CPU 微架构和系统软件领域依然有着长久而深远的影响。幽灵系列漏洞针对的并不是某个具体的硬件缺陷，而是将矛头对准了分支预测和乱序执行这两个现代 CPU 普遍采用的优化策略，并通过缓存旁路攻击完成对机密数据的任意读取，通用性极强，也极难做到全面的防御。本文将从幽灵系列漏洞的原理入手，介绍它们对现代计算机系统产生的影响和目前可行的对策。</summary></entry><entry><title type="html">关于 REST 的思考</title><link href="https://blog.yzsun.me/restful/" rel="alternate" type="text/html" title="关于 REST 的思考" /><published>2018-07-11T00:00:00+00:00</published><updated>2018-07-11T00:00:00+00:00</updated><id>https://blog.yzsun.me/restful</id><content type="html" xml:base="https://blog.yzsun.me/restful/">&lt;blockquote&gt;
  &lt;p&gt;这篇文章是我在《B/S 体系软件设计》课程的中期报告（命题作文）。因为在开发求是潮手机站时有写过与后端 API 通信的部分，在其他项目中也不时要考虑 API 设计的问题，所以在这方面也有一些自己粗浅的体悟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#http-和-uri&quot; id=&quot;markdown-toc-http-和-uri&quot;&gt;HTTP 和 URI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#restful-架构&quot; id=&quot;markdown-toc-restful-架构&quot;&gt;RESTful 架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实例一rails&quot; id=&quot;markdown-toc-实例一rails&quot;&gt;实例一：Rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实例二couchdb&quot; id=&quot;markdown-toc-实例二couchdb&quot;&gt;实例二：CouchDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关技术&quot; id=&quot;markdown-toc-相关技术&quot;&gt;相关技术&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#graphql&quot; id=&quot;markdown-toc-graphql&quot;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#grpc&quot; id=&quot;markdown-toc-grpc&quot;&gt;gRPC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#小结&quot; id=&quot;markdown-toc-小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;表现层状态转化&lt;/strong&gt;（REST）是一种网络应用程序的架构风格，通常体现在客户端与服务端的通信方式上。不过 REST 与简单对象访问协议（SOAP）等不同，它并不是一种规范化的协议，而是直接基于 HTTP 实现的一种接口风格。它相比 SOAP 等协议而言更加简单自然，因此在网站接口设计上得到了广泛应用。REST 这个名字起得有点令人费解，这是 Roy Fielding 在其博士论文&lt;sup id=&quot;fnref:dissertation&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:dissertation&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;中创造的名词，不过其思想也可以被解释为「HTTP 对象模型」，并且这些思想早已被用在 HTTP 和 URI 标准的设计上。因此，我们可以先从 HTTP 和 URI 谈起。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;http-和-uri&quot;&gt;HTTP 和 URI&lt;/h2&gt;

&lt;p&gt;众所周知，&lt;strong&gt;超文本传输协议&lt;/strong&gt;（HTTP）是大家浏览网页使用最频繁的协议，承载了互联网上传输的大部分数据量。我们使用浏览器访问网页，其实就是向网站所在的服务器发出一个 HTTP 请求，而我们收到的 HTTP 响应便是用超文本标记语言（HTML）表示的网页，最后通过浏览器的渲染引擎呈现在我们眼前。像这样，HTTP 提供了发布和接收 HTML 页面的方法，不过其功能并不局限于此，任何数据或者说网络资源都可以通过 HTTP 传输。HTTP 标准定义了若干请求方法&lt;sup id=&quot;fnref:rfc2068&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rfc2068&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:rfc5789&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rfc5789&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;，用以表示对资源的不同操作方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OPTIONS&lt;/strong&gt;：请求服务器返回资源支持的所有方法。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：对资源进行查询。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HEAD&lt;/strong&gt;：与 GET 相同，但只返回响应的头字段。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：向现有资源提交子项。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;：提交资源数据，若不存在则新建，若存在则替换。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;：对资源做部分修改。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;：请求删除资源。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TRACE&lt;/strong&gt;：回显服务器收到的请求。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上请求方法多次提到了「资源」这个词，实际上&lt;strong&gt;统一资源标识符&lt;/strong&gt;（URI）就是用于标识互联网资源的字符串，譬如网页便是资源的一种。URI 分为定位符（URL）和名称（URN）两类，前者 URL 就是我们俗称的网址，其格式如下&lt;sup id=&quot;fnref:rfc3986&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rfc3986&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                    authority               path
        ┌───────────────┴───────────────┐┌───┴────┐
  abc://username:password@example.com:123/path/data?key=value#fragid1
  └┬┘   └───────┬───────┘ └────┬────┘ └┬┘           └───┬───┘ └──┬──┘
scheme  user information     host     port            query   fragment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们有了 URI 和 HTTP 这两个基本概念，也就意味着我们对互联网上的资源及其操作有了具体的表达方法，这样一来 REST 便呼之欲出了。&lt;/p&gt;

&lt;h2 id=&quot;restful-架构&quot;&gt;RESTful 架构&lt;/h2&gt;

&lt;p&gt;RESTful 架构的核心便是对资源的抽象，这些资源通过 URI 标识，通过 HTTP 请求来进行操作。我们会预先定义一系列动作，让资源能够便捷地以文本形式来被访问和修改。RESTful 架构的另一个特点是，它是无状态的，因为 HTTP 请求本身就是无状态的。也就是说，服务器不会保存任何操作的上下文，每一次请求都必须提供足够的信息，这既简化了接口的设计，又提高了 RESTful 架构的可靠性。同时，RESTful 也继承了 HTTP 的安全性、幂等性（idempotence）等性质，在这里，「安全」表示 HTTP 请求方法是只读不写的，「幂等」表示相同的方法调用一次或是多次产生的效果相同&lt;sup id=&quot;fnref:rfc2068:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rfc2068&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:rfc5789:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rfc5789&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;对资源的操作可以借用关系型数据库中 &lt;strong&gt;CRUD&lt;/strong&gt;&lt;sup id=&quot;fnref:crud&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:crud&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; 的概念分为四类：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;CRUD&lt;/th&gt;
      &lt;th&gt;SQL&lt;/th&gt;
      &lt;th&gt;HTTP&lt;/th&gt;
      &lt;th&gt;安全&lt;/th&gt;
      &lt;th&gt;幂等&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Create&lt;/td&gt;
      &lt;td&gt;INSERT&lt;/td&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Read&lt;/td&gt;
      &lt;td&gt;SELECT&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;◯&lt;/td&gt;
      &lt;td&gt;◯&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update&lt;/td&gt;
      &lt;td&gt;UPDATE&lt;/td&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;◯&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Delete&lt;/td&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;✕&lt;/td&gt;
      &lt;td&gt;◯&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;从这张表可以看到，模型化后的资源亦可视为关系型数据库中的数据，HTTP 请求可以直接对应于 SQL 语句。不过在实际的 RESTful 后端实现中，我们可能会使用 ORM、NoSQL 等技术，因此并不一定会直接与 SQL 打交道。另外，RESTful 架构通常约定只有 POST 不是幂等的，因为资源创建一次和创建多次结果显然不一样；但剩下的查询、更新和删除，重复相同的请求应该永远得到相同的效果。&lt;/p&gt;

&lt;h2 id=&quot;实例一rails&quot;&gt;实例一：Rails&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://rubyonrails.org&quot;&gt;&lt;img src=&quot;https://rubyonrails.org/images/rails-logo.svg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby on Rails 是一个典型的 RESTful 框架，它提供了脚手架（scaffold）功能来快速创建一个资源，并生成对应的模板代码。我们以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt; 这个资源为例，以下便是脚手架自动生成的路由&lt;sup id=&quot;fnref:rails&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rails&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;URL&lt;/th&gt;
      &lt;th&gt;动作&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/users&lt;/td&gt;
      &lt;td&gt;index&lt;/td&gt;
      &lt;td&gt;列出所有用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/users/new&lt;/td&gt;
      &lt;td&gt;new&lt;/td&gt;
      &lt;td&gt;显示创建用户的页面&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;/users&lt;/td&gt;
      &lt;td&gt;create&lt;/td&gt;
      &lt;td&gt;创建新的用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/users/1&lt;/td&gt;
      &lt;td&gt;show&lt;/td&gt;
      &lt;td&gt;显示 ID 为 1 的用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/users/1/edit&lt;/td&gt;
      &lt;td&gt;edit&lt;/td&gt;
      &lt;td&gt;显示 ID 为 1 的用户的编辑页面&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH / PUT&lt;/td&gt;
      &lt;td&gt;/users/1&lt;/td&gt;
      &lt;td&gt;update&lt;/td&gt;
      &lt;td&gt;更新 ID 为 1 的用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;/users/1&lt;/td&gt;
      &lt;td&gt;destroy&lt;/td&gt;
      &lt;td&gt;删除 ID 为 1 的用户&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们可以从中发现一些基本原则：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users&lt;/code&gt; 表示用户总体，对其发出 GET 和 POST 请求分别意味着查询所有用户和添加新的用户；而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/:id&lt;/code&gt; 表示用户个体，对其发出 GET、PUT 和 DELETE 请求分别意味着查询、更新、删除该用户信息。另外，因为 POST 和 PUT 请求需要用户提供消息主体（message body），所以另有两个页面 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/new&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/:id/edit&lt;/code&gt; 来为添加新用户、更新用户信息两个操作提交表单。当然，如果是纯 API 项目就不需要这两个页面了。&lt;/p&gt;

&lt;p&gt;对于每个请求，Rails 也提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respond_to&lt;/code&gt; 方法根据请求头的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept&lt;/code&gt; 字段来确定响应的格式。譬如正常的浏览器访问的请求头为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept: text/html&lt;/code&gt;，控制器则正常渲染 HTML 页面；当客户端将请求头设为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accept: application/json&lt;/code&gt; 时，控制器则直接返回相应的 JSON 数据。我们看到，Rails 的 RESTful 架构既适用于服务端渲染页面的传统网站，也可用来搭建一个纯 API 的后端应用。&lt;/p&gt;

&lt;h2 id=&quot;实例二couchdb&quot;&gt;实例二：CouchDB&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://couchdb.apache.org&quot;&gt;&lt;img src=&quot;https://couchdb.apache.org/image/logo@2x.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apache CouchDB 是一个用 Erlang 语言编写的面向文档的 NoSQL 数据库。它使用 JSON 作为存储格式，使用 HTTP 作为数据库的接口，这也是非常典型的 RESTful API。我们这里就不介绍其多版本并发控制等有趣的特性了，只看看它的 API&lt;sup id=&quot;fnref:couchdb&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:couchdb&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;目的&lt;/th&gt;
      &lt;th&gt;方法&lt;/th&gt;
      &lt;th&gt;URL&lt;/th&gt;
      &lt;th&gt;请求主体&lt;/th&gt;
      &lt;th&gt;响应主体&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;创建名为 docs 的数据库&lt;/td&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;/docs&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;{“ok”: true}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;再次创建同名数据库&lt;/td&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;/docs&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;{“error”: “file_exists”, “reason”: “…”}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建一个文档&lt;/td&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;/docs&lt;/td&gt;
      &lt;td&gt;{“title”: “couchdb”}&lt;/td&gt;
      &lt;td&gt;{“ok”: true, “id”: “5f3759df”, “rev”: “1-qaz”}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;查询一个文档&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/docs/5f3759df&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;{“_id”: “5f3759df”, “_rev”: “1-qaz”, “title”: “couchdb”}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建或更新一个文档&lt;/td&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;/docs/5f3759df&lt;/td&gt;
      &lt;td&gt;{“_rev”: “1-qaz”, “title”: “couch”}&lt;/td&gt;
      &lt;td&gt;{“ok”: true, “id”: “5f3759df”, “rev”: “2-wsx”}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;删除一个文档&lt;/td&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;/docs/5f3759df?rev=2-wsx&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;{“ok”: true, “id”: “5f3759df”, “rev”: “2-wsx”}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;删除 docs 数据库&lt;/td&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;/docs&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;{“ok”: true}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;传统的关系型数据库譬如 MySQL、PostgreSQL，都是基于 TCP/IP 构建自己的二进制协议来传输数据的，而 CouchDB 却基于更高层的 HTTP 来构建 RESTful API，传输的也是人类可读的 JSON 文本。其好处显而易见：不需要任何额外封装和第三方库便可直接为前端提供简单易用的接口，易于调试；但这也有非常明显的缺点：相比于底层的自定义协议，HTTP 的文本请求会比二进制占用更大的空间，性能更差。&lt;/p&gt;

&lt;p&gt;说起来，如今也渐渐出现了一些将传统数据库包装成通用 RESTful API 服务器的实践，不少开发者也很喜欢这种开箱即用的数据库后端，譬如 PostgREST 之于 PostgreSQL。&lt;/p&gt;

&lt;h2 id=&quot;相关技术&quot;&gt;相关技术&lt;/h2&gt;

&lt;p&gt;因为 REST 和 HTTP 两者的想法高度重合，同时也自然地支持 API 与浏览器访问复用同一套 URL，所以 RESTful 架构一直是服务端渲染页面网站的最佳选择。不过随着移动设备的普及和前端技术的蓬勃发展，越来越多的网站选择了前后端分离的策略——后端只提供数据，一切显示工作由前端来完成，即前端成为了与客户端并列的独立应用。在剥离页面渲染的浪潮之下，后端 API 的设计又出现了新的技术，其中最引人注目的则是 GraphQL 和 gRPC。&lt;/p&gt;

&lt;h3 id=&quot;graphql&quot;&gt;&lt;a href=&quot;https://graphql.org&quot;&gt;GraphQL&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;GraphQL 是 Facebook 公司发明的数据查询语言，其已在 Facebook 内部投入使用，并于 2015 年正式公开。虽然它的名字长得非常像 SQL，但实际上它不是一种数据库的查询语言，而是能够取代 REST 的一种 API 查询语言。与 RESTful API 不同，GraphQL 并不根据资源的不同将 API 细分为多个 URL，它通常部署在一个固定的 URL 上，并由客户端通过一种查询语言自由指定需要查询的资源和属性。例如下面便是一个 GraphQL 的请求以及服务器对其的响应&lt;sup id=&quot;fnref:graphql&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:graphql&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;language-graphql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hero&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hero&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Luke Skywalker&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;friends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Obi-Wan Kenobi&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;R2-D2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Han Solo&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Leia Organa&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以看到查询语言的结构非常直观地对应了查询结果的 JSON，并且同一个请求中可以包含对多个对象的查询，所有属性亦是客户端自由指定的。另外，GraphQL 还定义了一种 schema 语言，这样在任何编程语言中都可以使用统一的形式来定义对象及其类型。&lt;/p&gt;

&lt;p&gt;GraphQL 的出现解决了 RESTful API 的一些痛点，这些问题在 API 开放平台上尤为致命：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不同的资源被分离在不同的接口，客户端通常需要多次请求才能取到足够的数据，这大大增加了服务器的负担。&lt;/li&gt;
  &lt;li&gt;对于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/1&lt;/code&gt; 这样的 API，客户端通常只能通过增加查询参数来自定义数据，譬如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/1?detail=false&lt;/code&gt; 代表不显示详细信息等等。不过，这样的自定义增加了后端开发的复杂度，同时也不够灵活。&lt;/li&gt;
  &lt;li&gt;客户端通常无法预知 API 的数据格式，需要阅读文档才能确切知道。&lt;/li&gt;
  &lt;li&gt;服务端和客户端没有统一的数据定义和类型约束，增加了交流的成本和出错的可能性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;介于以上原因，现在有越来越多的企业开始试用 GraphQL，譬如 GitHub 已经从 REST API v3 升级到了 GraphQL API v4。Relay 和 Apollo Client 等开源框架也为前端或客户端提供了可靠的 GraphQL 集成，Apollo Server 甚至还能帮助开发者将服务端的 RESTful API 包装成 GraphQL API。&lt;/p&gt;

&lt;h3 id=&quot;grpc&quot;&gt;&lt;a href=&quot;https://grpc.io&quot;&gt;gRPC&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;远程过程调用&lt;/strong&gt;（RPC）并不是一个新鲜的事物，至少在 1980 年代 Sun 公司就为网络文件系统（NFS）开发出了开放网络运算远程过程调用（ONC RPC）协议。之后 XML-RPC、JSON-RPC 等协议也陆续出现，其中前者已经演变成了如今的 SOAP。&lt;strong&gt;gRPC&lt;/strong&gt; 则是 Google 公司于 2015 年开源的一种 RPC 协议实现，其最大特点就是使用了 Google 早先公布的 Protocol Buffers 格式来序列化数据，并通过 HTTP/2 来传输数据。&lt;/p&gt;

&lt;p&gt;顾名思义，RPC 提供了远程调用服务器程序的接口，常常用于服务器集群节点之间的通信，在 Java 等面向对象编程语言中也叫远程方法调用（RMI）。与 REST 和 GraphQL 以数据为中心的概念不同，RPC 着眼于远程程序间的互相调用，不过各种类型的数据作为过程的参数和返回值，亦可在服务端和客户端之间自由传递。例如 gRPC 通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.proto&lt;/code&gt; 文件来定义服务和消息&lt;sup id=&quot;fnref:grpc&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:grpc&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;language-protobuf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Greeter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rpc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SayHello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HelloReply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloReply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以使用 gRPC 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protoc&lt;/code&gt; 将上述文件编译到各种各样的服务端和客户端语言，之后只需要在服务端和客户端调用其生成的类和方法即可实现远程调用。我们可以发现 gRPC 有不少明显的好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方法是否为远程调用对开发者是透明的，开发者只需要关心业务逻辑即可。&lt;/li&gt;
  &lt;li&gt;开发者不需要手动解析 XML、JSON 等数据格式，这些反序列化的工作都已经由 gRPC 自动生成的代码做好了。&lt;/li&gt;
  &lt;li&gt;gRPC 事先为服务端和客户端双方定义了参数和返回值的数据类型，也避免了 RESTful API 格式无法预知的问题。&lt;/li&gt;
  &lt;li&gt;gRPC 借助 protobuf 的二进制格式以及 HTTP/2 的全双工数据流等特性能够取得出色的性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然 gRPC 的设计与 REST 或 GraphQL 相当不同，但将资源的 URL 对应于方法的调用、HTTP 请求对应于输入参数、HTTP 响应对应于返回值，两种设计仍然可以实现同样的功能，因此 gRPC 也是客户端与服务端交互不错的选择。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;本文从 HTTP 和 URI 标准入手，介绍了 REST 的思想及其基本架构，接着通过 Rails 和 CouchDB 两个实例具体地展示 RESTful API 的设计。最后通过跟 GraphQL 和 gRPC 两个相关技术的比较，阐述了 RESTful API 的优缺点，以便对接口设计有一个全面的认识。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:dissertation&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Roy Fielding. Architectural Styles and the Design of Network-based Software Architectures. PhD dissertation, University of California, Irvine, 2000. &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;Chapter 5: Representational State Transfer (REST)&lt;/a&gt; &lt;a href=&quot;#fnref:dissertation&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rfc2068&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Network Working Group. Hypertext Transfer Protocol – HTTP/1.1 (RFC 2068). 1997. &lt;a href=&quot;https://tools.ietf.org/html/rfc2068#section-9&quot;&gt;Chapter 9: Method Definitions&lt;/a&gt; &lt;a href=&quot;#fnref:rfc2068&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:rfc2068:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rfc5789&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Internet Engineering Task Force. PATCH Method for HTTP (RFC 5789). 2010. &lt;a href=&quot;https://tools.ietf.org/html/rfc5789&quot;&gt;https://tools.ietf.org/html/rfc5789&lt;/a&gt; &lt;a href=&quot;#fnref:rfc5789&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:rfc5789:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rfc3986&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Network Working Group. Uniform Resource Identifier (URI): Generic Syntax (RFC 3986). 2005. &lt;a href=&quot;https://tools.ietf.org/html/rfc3986&quot;&gt;https://tools.ietf.org/html/rfc3986&lt;/a&gt; &lt;a href=&quot;#fnref:rfc3986&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:crud&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;Create, Read, Update, Delete&lt;/a&gt; &lt;a href=&quot;#fnref:crud&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rails&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/routing.html&quot;&gt;Rails Routing from the Outside In — Ruby on Rails Guides&lt;/a&gt; &lt;a href=&quot;#fnref:rails&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:couchdb&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.couchdb.org/en/2.1.1/intro/api.html&quot;&gt;The Core API — Apache CouchDB 2.1.1 Documentation&lt;/a&gt; &lt;a href=&quot;#fnref:couchdb&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:graphql&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://graphql.github.io/learn/&quot;&gt;Introduction to GraphQL — GraphQL&lt;/a&gt; &lt;a href=&quot;#fnref:graphql&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:grpc&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://grpc.io/docs/guides/&quot;&gt;Guides — gRPC&lt;/a&gt; &lt;a href=&quot;#fnref:grpc&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>孙耀珠</name></author><category term="文献综述" /><summary type="html">这篇文章是我在《B/S 体系软件设计》课程的中期报告（命题作文）。因为在开发求是潮手机站时有写过与后端 API 通信的部分，在其他项目中也不时要考虑 API 设计的问题，所以在这方面也有一些自己粗浅的体悟。 表现层状态转化（REST）是一种网络应用程序的架构风格，通常体现在客户端与服务端的通信方式上。不过 REST 与简单对象访问协议（SOAP）等不同，它并不是一种规范化的协议，而是直接基于 HTTP 实现的一种接口风格。它相比 SOAP 等协议而言更加简单自然，因此在网站接口设计上得到了广泛应用。REST 这个名字起得有点令人费解，这是 Roy Fielding 在其博士论文1中创造的名词，不过其思想也可以被解释为「HTTP 对象模型」，并且这些思想早已被用在 HTTP 和 URI 标准的设计上。因此，我们可以先从 HTTP 和 URI 谈起。 Roy Fielding. Architectural Styles and the Design of Network-based Software Architectures. PhD dissertation, University of California, Irvine, 2000. Chapter 5: Representational State Transfer (REST) &amp;#8617;</summary></entry><entry><title type="html">东京一年</title><link href="https://blog.yzsun.me/tokyo-ichinen/" rel="alternate" type="text/html" title="东京一年" /><published>2018-03-04T00:00:00+00:00</published><updated>2018-03-04T00:00:00+00:00</updated><id>https://blog.yzsun.me/tokyo-ichinen</id><content type="html" xml:base="https://blog.yzsun.me/tokyo-ichinen/">&lt;p&gt;&lt;img src=&quot;/images/tokyo-ichinen-00.jpg&quot; alt=&quot;東京工業大学&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说起来，第一次来日本还是四年前的高中毕业旅行，当时沿着东海道线一路游览了近畿、箱根和东京。如今作为留学生重踏东京的土地，身份从风尘仆仆的游客转变为一千三百万都民中的一员，想到能与真实的东京近距离接触就十分心动。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;浙大跟日本有不少校级交换留学项目，其中我比较感兴趣的是京都大学的 &lt;a href=&quot;http://www.kyoto-u.ac.jp/ja/international/students1/admissions/kuinep.html&quot;&gt;KUINEP&lt;/a&gt; 和东京工业大学的 &lt;a href=&quot;https://www.titech.ac.jp/graduate_school/international/exchange/acap.html&quot;&gt;ACAP&lt;/a&gt;。论学校当然是京都大学更胜一筹，不过作为交换留学生我还是更希望体验一下东京的生活，于是我选择了东工大。ACAP 是一个研究为导向的项目，所以基本上所有交换生都必须事先找到愿意接收自己的导师，也就是说自己得跟东工大的教授套磁了。课程方面，交换生原则上只能上英语授课的研究生课程，以及专门面向留学生开设的日语语言课，当然选择只做科研不上课也是完全可行的。恰好就在我挑选研究室的时间点，一位北邮的学长在知乎专栏上介绍了自己在东工大的硕士经历&lt;sup id=&quot;fnref:zhihu&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:zhihu&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，而他的研究方向——编程语言以及 JIT 正是我心仪的领域，于是我最后也选择了同一个研究室。&lt;/p&gt;

&lt;h2 id=&quot;留学生活&quot;&gt;留学生活&lt;/h2&gt;

&lt;p&gt;东工大拥有三个校区，我所在的是主校区大冈山，位于东京西南部目黑区与大田区的交界处。大冈山校区的大门正对着目黑线和大井町线的车站，再往里走是大冈山北口商店街，交通和购物都非常方便。东工大校内有两家生协（CO-OP）运营的食堂，一食只在中午 11:00 到 14:00 开放，二食从 11:00 不间断供应到 20:00，不过在休息日都不营业。日本的日常饮食其实与中国相差不大，也是以米饭和面类为主，我们更为熟悉的寿司、刺身等等并不会在生协食堂供应，需要下馆子才能吃到。日本将盖浇饭一类的料理称为「丼」，可以细分为&lt;ruby&gt;カツ丼&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;猪排饭&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;、&lt;ruby&gt;牛丼&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;肥牛饭&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;、&lt;ruby&gt;親子丼&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;滑蛋鸡肉饭&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;、&lt;ruby&gt;天丼&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;天妇罗饭&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;等等；日本的面类则分为三种，分别是拉面、乌冬面、荞麦面，口感各有特色。生协食堂还会定期推出期间限定菜单，譬如炸牡蛎等等，相关菜单都可以在「&lt;a href=&quot;http://gakushoku.coop&quot;&gt;学食どっとコープ&lt;/a&gt;」查到。如果食堂不开或是过了饭点，也可以去 7-11、全家、罗森三大便利店买便当，基本上也都很好吃。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tokyo-ichinen-01.jpg&quot; alt=&quot;PRG&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我在研究室期间一共有 13 名成员，其中有 8 位是日本同学、1 位美国硕士生、1 位德国博士生、以及包括我在内 3 位中国人。日本同学之间仍然是用日语交流，而我跟教授、学长们主要是用英语交流，聊天的时候偶尔会讲讲日语。教授为我们搭建了一个 Mailman 邮件列表，因此正式的在线交流我们都是通过邮件进行的，另外研究室还有一个 Slack 群组供我们日常聊天。很有意思的一件事是，日本与绝大多数北半球国家不同，在每年 4 月的樱花季开学，所以春季入学的基本上都是本国人，而秋季入学的都是外国人，时间正好交错开来。&lt;/p&gt;

&lt;p&gt;东工大为我们交换生分配的宿舍在驹场，都是带有独卫的单人间，包含网费在内的月租是 34900 日元。宿舍距离最近的京王电铁的车站徒步只需要三分钟左右，驹场的地理位置也相当不错，恰处涩谷和下北泽的正中间，到两地都只有两站车程。这里也是东京大学驹场校区的所在地，大一大二的本科生都会来这个校区上课，我们也经常来蹭东大的食堂。从地图上看，驹场位于目黑区的最北边，而东工大所在的大冈山则坐落在目黑区的最南边，甚至一部分校园已经属于大田区了，所以虽说我们的宿舍跟学校同属一个区，但上学还是挺远的。&lt;/p&gt;

&lt;h2 id=&quot;都内旅游&quot;&gt;都内旅游&lt;/h2&gt;

&lt;p&gt;在东京这一年，我最熟悉的商业区大概就是涩谷了。感觉在不少同学眼中，提到涩谷首先就会想到黑黑的辣妹，然而我在涩谷街头并没怎么见到过。涩谷是东京三大副都心之一，地标是站前广场上的忠犬八公像，而广场旁边的全向十字路口则是涩谷最有名的景观了，络绎不绝的人流加上绚丽的霓虹灯，简直像是迷失在赛博朋克的世界里。&lt;sup id=&quot;fnref:guwashi&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:guwashi&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tokyo-ichinen-02.jpg&quot; alt=&quot;Shibuya Night (HDR)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作为第二大副都心，涩谷的店铺大约是应有尽有，从东急百货到西武百货，从唐吉诃德到无印良品，从优衣库到青山洋服，从一兰拉面到叙叙苑烤肉，从 BOOKOFF 到 TOKYU HANDS，从 BIC CAMERA 到 TOHO CINEMAS，基本上所有我想要的东西都能在涩谷找到。另外，涩谷现在也是日本流行文化的中心之一，除了涩谷 109 聚集了众多时装品牌之外，涩谷地区拥有众多剧场以及 LIVE HOUSE，常常是小众乐队、地下偶像发迹的第一站，而每到万圣节各种 Cosplayer 就会把涩谷堵得水泄不通。不过说实话，涩谷中央街一带也是我见过全日本最脏的街道了（笑），这也跟涩谷人多而杂不无关系。当下东急集团正在对涩谷站周边进行大规模的&lt;a href=&quot;https://www.tokyu.co.jp/shibuya-redevelopment/&quot;&gt;再开发计划&lt;/a&gt;，下一次回东京的时候涩谷会变成什么样，我还真有点小期待呢。&lt;/p&gt;

&lt;p&gt;从涩谷再向北走一站路，就是明治神宫、表参道一带了。明治神宫顾名思义是祭奠明治天皇的神社，神宫四周是很大一片森林，在东京这样一座寸土寸金的城市里，能比明治神宫更大的绿地大概只有都心的皇居了。表参道则是通向明治神宫东南入口的参道，现在则是日本国内外知名品牌店林立的大马路；紧邻表参道的北边，有一条名为竹下通的步行街，这是跟涩谷齐名的时尚之街。广义来讲，以上地区都被统称为原宿；站在山手线原宿站的月台上，一面是宁静肃穆的明治神宫，另一面却是喧闹繁华的竹下通，感觉这体验还挺奇妙的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tokyo-ichinen-03.jpg&quot; alt=&quot;明治神宮 vs 竹下通り&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了我的住处附近，东京都内还有许多有意思的景点，譬如第一大副都心新宿周边，除了走不到头的商店街之外，既有灯红酒绿的歌舞伎町，又有绿意盎然的新宿御苑。上野公园附近则有不少博物馆和美术馆，以及大熊猫香香所在的上野动物园，再向东坐几站还能看到浅草寺和晴空塔。另外两个我比较喜欢的地方是六本木和台场，这正巧分别是朝日电视台和富士电视台的根据地。六本木新城的森大厦聚集了众多著名 IT 企业，其中包括谷歌日本、苹果日本、精灵宝可梦公司等等，在 52F 还有一层展望台「TOKYO CITY VIEW」正对着东京塔，眺望夜景非常漂亮；台场则是在东京湾填海造陆形成的人工岛，岛上不仅有各种购物广场和娱乐设施，还有一架等比例的独角兽高达、日本第三大的摩天轮、以及东京都内难得一见的沙滩，每年夏天的 TOKYO IDOL FESTIVAL 也是在此举行。其他众所周知的景点诸如东京迪士尼度假区、筑地市场、银座、秋叶原就不再赘述了。&lt;/p&gt;

&lt;h2 id=&quot;轨道交通&quot;&gt;轨道交通&lt;/h2&gt;

&lt;p&gt;如果说美国是车轮上的国家，那么东京应该是铁轨上的都市了。坐拥 9 条路线&lt;sup id=&quot;fnref:shibuya&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:shibuya&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;的涩谷站恰是我上学的必经之路，头几天免不了要迷失在涩谷如潮的人流中，也免不了赶时间时恰恰又坐错电车……&lt;/p&gt;

&lt;p&gt;日本的公共交通形式与中国略有不同，最大的区别大概在于日本比中国多了&lt;strong&gt;通勤铁路&lt;/strong&gt;这一角色。在中国，地铁和铁路的界限是很清晰的：地铁通常由市政府修建，负责市内交通；铁路由中国铁路总公司修建，负责城际交通。而在日本，尤其是在东京，铁路亦负责市内交通的部分，这部分铁路与地铁的界限十分模糊，通常被称为通勤铁路。以东京为例，东京地下铁（東京メトロ）和都营地下铁（都営地下鉄）的地铁线共 13 条，但这还占不到东京一半的轨道交通客流量，剩下的客流量则由 JR 和民营铁路分担。JR 集团的前身为日本国有铁道，相当于中国铁路总公司与铁道部，譬如东京最核心的环状线「山手線」即由 JR 东日本运营；东京都内还有数家大型民营铁路公司（大手私鉄），譬如东武铁道、西武铁道、京成电铁、京王电铁、东京急行电铁、京滨急行电铁、小田急电铁；当然还有许多中小型民营铁路。以上所有轨道交通方式的车辆都统称「電車」，如果把这些路线全部画出来，东京都市圈的电车路线图便会变成这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tokyo-ichinen-04.jpg&quot; alt=&quot;東京・横浜・千葉路線図&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以我每天的通学路线为例，我从离宿舍最近的驹场东大前站到学校所在的大冈山站，需要依次乘坐京王井之头线、东急东横线、东急大井町线，实际上这三条路线都不是地铁而是通勤铁路。不过在日本，有不少通勤铁路和地铁统一了铁道制式，于是不同公司的路线还可以直通运转——一共 13 条地铁线就有 10 条实行了直通运转。我每天上学乘坐的东急东横线，向北能直通东京地下铁副都心线、东武东上本线或西武池袋线到达埼玉县，向南则能直通横滨高速铁道港未来线。这事儿放在中国，就有点像从上海人民广场站能一路坐到苏州乐园站，是不是有些不可思议。为了让这些路线的运行更加高效，日本的轨道交通普遍有列车种别，停站次数各不相同，譬如东急东横线就分「各駅停車」「急行」「通勤特急」「特急」「S-TRAIN」，不同班次有时终点都不一样，所以刚到东京坐错电车真是再正常不过了。&lt;/p&gt;

&lt;p&gt;因为大家几乎每天都要坐电车出行，所以交通系 IC 卡在日本差不多是人手一张的程度。JR 集团各子公司以及其他交通组织都陆续推出过自己的 IC 卡，其中最早、最著名的大概是 JR 东日本的西瓜卡（Suica）了，不过有这么多种类的卡也不用担心，从 2013 年开始全国十大交通系 IC 卡就可以互通使用了&lt;sup id=&quot;fnref:pitapa&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pitapa&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。这些 IC 卡不仅可以用来乘坐电车和巴士，还可以作为电子钱包在商店、餐厅、便利店、自动贩卖机上使用，当然大学里的生协超市和食堂也是支持的。因为每天上学都得坐电车，学校还会帮我们开证明办理优惠月票「通学定期券」，乘坐区间和期限可以直接记录在 IC 卡上，乘车时会自动免除优惠区间的票价。另外，日本各大铁路公司通常都会提供不少针对游客的特价车票，譬如 JR 就有各地的铁路周游券和全国的日本铁路通票，如果留心调查一下的话能省下不少钱。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tokyo-ichinen-05.jpg&quot; alt=&quot;交通系ＩＣカード&quot; /&gt;&lt;/p&gt;

&lt;p&gt;日本最举世闻名的交通方式应该要数&lt;strong&gt;新干线&lt;/strong&gt;了，首条新干线于 1964 年正式通车，现在共有 9 条路线。新干线亦为 JR 集团运营，因此 JR 的其他路线为示区分被称为在来线。新干线同在来线一样可以购买自由席车票不分车次随时上车，也可以加钱指定座位，没有安检和实名制，不过票价要比中国高铁贵很多。得益于中国高铁的后发优势，如今京沪高铁的平均速度已经超过东海道新干线，目前世界上商业运营路线的最高速度亦是京沪高铁上的复兴号复速后的 350 km/h&lt;sup id=&quot;fnref:speed&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:speed&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;。不过现在 JR 东海正在新建东京通往大阪的中央新干线，其采用的 L0 系磁悬浮列车在山梨实验线上创下了 603 km/h 的世界纪录&lt;sup id=&quot;fnref:speed:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:speed&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;，我确实有点期待从东京到大阪只要一个小时的那一天。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:zhihu&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;「&lt;a href=&quot;https://zhuanlan.zhihu.com/p/23034724&quot;&gt;总结我在日本读研的这两年：我如何用英语项目来到日本并拿到6家知名国际企业的offer的&lt;/a&gt;」「&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24327825&quot;&gt;在东京工业大学读书是一种怎样的体验（非学术篇）&lt;/a&gt;」 &lt;a href=&quot;#fnref:zhihu&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:guwashi&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;照片来自 &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Shibuya_Night_(HDR).jpg&quot;&gt;Wikimedia Commons&lt;/a&gt;，作者为 Guwashi999。 &lt;a href=&quot;#fnref:guwashi&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:shibuya&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;分别是 JR 的山手线、埼京线、湘南新宿线，东京地下铁的银座线、副都心线、半藏门线，东急的东横线、田园都市线，京王的井之头线；另有收费列车成田特快、湘南 Liner 未算在内。 &lt;a href=&quot;#fnref:shibuya&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pitapa&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;其中关西地区的 PiTaPa 没有在图中表示出来，这张卡与其他九张卡不同，是后付卡而非预付卡，因此只有交通功能通用，电子钱包功能不通用。详情参考「&lt;a href=&quot;https://ja.wikipedia.org/wiki/交通系ICカード全国相互利用サービス&quot;&gt;交通系ICカード全国相互利用サービス&lt;/a&gt;」。 &lt;a href=&quot;#fnref:pitapa&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:speed&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Land_speed_record_for_rail_vehicles&quot;&gt;Land speed record for rail vehicles - Wikipedia&lt;/a&gt; &lt;a href=&quot;#fnref:speed&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:speed:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>孙耀珠</name></author><category term="游记" /><summary type="html">说起来，第一次来日本还是四年前的高中毕业旅行，当时沿着东海道线一路游览了近畿、箱根和东京。如今作为留学生重踏东京的土地，身份从风尘仆仆的游客转变为一千三百万都民中的一员，想到能与真实的东京近距离接触就十分心动。</summary></entry><entry><title type="html">使用 fastlane 自动化 iOS 部署</title><link href="https://blog.yzsun.me/automate-using-fastlane/" rel="alternate" type="text/html" title="使用 fastlane 自动化 iOS 部署" /><published>2016-11-30T00:00:00+00:00</published><updated>2016-11-30T00:00:00+00:00</updated><id>https://blog.yzsun.me/automate-using-fastlane</id><content type="html" xml:base="https://blog.yzsun.me/automate-using-fastlane/">&lt;p&gt;对于 iOS 开发者来说，应用发布和代码签名证书大概是最令人头疼的两个环节了，这倒不是因为技术上有多难，而是它们的操作流程相当麻烦，尤其是在中国的网络环境下。&lt;/p&gt;

&lt;p&gt;一般来讲，手动发布应用更新大致有以下流程：修改所有 Target 的版本号、用 Xcode 给项目 Archive、在 Xcode Organizer 中上传到 App Store、到 iTunes Connect 更新相关信息、提交给苹果审核。而其中上传那一步在不翻墙的情况下成功率极低，经常会卡在「Authenticating with the iTunes Store…」，而且系统 SOCKS 代理（如 Shadowsocks）在此时似乎并不起作用，只有使用 Proxifier 或者 VPN 才有效果。也是基于这个原因，我一般不会直接在 Organizer 中直接上传，而是先导出为 .ipa 文件，再使用 Xcode 附带的 Application Loader 上传，这样就免去了上传失败的话每次直接上传时将 .xcarchive 转为 .ipa 的时间。&lt;/p&gt;

&lt;p&gt;当然以上还没考虑第一次发布时配置证书的流程，一个初学者面对苹果开发者中心琳琅满目的 Certificates / Identifiers / Provisioning Profiles 多半是一脸懵逼，不过幸运的是从 Xcode 8 开始已经能够比较完美地自动管理代码签名了，不再像以前一样需要自己去 Fix issues。&lt;/p&gt;

&lt;p&gt;对于 iOS 应用的部署，如果你也像我一样饱受折磨，fastlane 也许是你的救星。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;fastlane&quot;&gt;fastlane&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://fastlane.tools&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastlane/fastlane/master/fastlane/assets/fastlane_text.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简而言之，fastlane 是一套用 Ruby 编写的 iOS 命令行工具集（后来也支持了 Android），主要组件包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cert&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigh&lt;/code&gt; 协助管理代码签名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pem&lt;/code&gt; 自动生成 APNs 证书&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scan&lt;/code&gt; 自动化测试&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gym&lt;/code&gt; 自动化编译并打包生成签名的 .ipa 文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshot&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frameit&lt;/code&gt; 协助处理 iOS 屏幕快照&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pilot&lt;/code&gt; 上传和管理 TestFlight&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deliver&lt;/code&gt; 将应用及其它信息上传到 App Store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而通过 fastlane 我们可以将上面这些独立的小工具有机地结合起来，从管理证书到单元测试，从编译打包到上传发布，都能在命令行轻松完成，乃至一键部署，听起来是不是生产力大增呢。&lt;/p&gt;

&lt;p&gt;因为 macOS 自带了 Ruby，所以 fastlane 的安装非常简单，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install fastlane&lt;/code&gt; 就搞定了，初始化也只需要在工程目录下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastlane init&lt;/code&gt; 即可。初始化成功后你会得到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Appfile&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deliverfile&lt;/code&gt;，前者是最核心的流程配置文件，后两者则分别用于访问 Apple Developer Portal 和 iTunes Connect，另外在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metadata&lt;/code&gt; 目录下会自动拉取 App Store 的相关信息，以供日后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deliver&lt;/code&gt; 使用。&lt;/p&gt;

&lt;p&gt;顺带一提，Terminal 也不读取系统代理设置，而是通过环境变量来设置代理的。譬如对于 ShadowsocksX-NG 的默认设置，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export ALL_PROXY=&quot;socks5://127.0.0.1:1086&quot;&lt;/code&gt; 即可。&lt;/p&gt;

&lt;h2 id=&quot;fastfile&quot;&gt;Fastfile&lt;/h2&gt;

&lt;p&gt;接下来最核心的部分就是来配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt; 了，虽然自动生成的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt; 已经囊括了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beta&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt; 这三支流程（在这里称为 lane），不过它们的默认操作只是简单的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scan&lt;/code&gt;  / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gym&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pilot&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gym&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deliver&lt;/code&gt;，尚未发挥出 fastlane 的全部威力。fastlane 除了上述的子工具之外，还内建了非常多实用的操作，在 &lt;a href=&quot;https://docs.fastlane.tools/actions/&quot;&gt;https://docs.fastlane.tools/actions/&lt;/a&gt; 可以查询 fastlane 所有支持的操作和已有的插件。因为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fastfile&lt;/code&gt; 本质上就是 Ruby DSL，所以你也可以直接在其中写 Ruby 代码，甚至为其创建插件。&lt;/p&gt;

&lt;p&gt;以我自己的项目（QSCMobileV3）为例，在常规的编译打包和上传之前，我需要用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;agvtool&lt;/code&gt; 增加 Build Number 并修改版本号，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 之后再打上包含更新日志的标签并推送到远程仓库。这一整套流程实际上都可以由 fastlane 代劳，而我需要做的只是预先书写一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release_notes.txt&lt;/code&gt;，接着敲下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastlane release&lt;/code&gt; 便能一键部署，剩下就是静静等待苹果审核了。&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_all&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_build_number&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;increment_version_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;bump_type: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;text: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bump type: (patch/minor/major)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;git_commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version bump to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lane_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:VERSION_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lane_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:CHANGE_LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./metadata/zh-Hans/release_notes.txt&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_git_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;tag: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lane_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:VERSION_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lane_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:CHANGE_LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;push_to_git_remote&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;scheme: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QSCMobileV3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;include_bitcode: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Submit a new Beta Build to Apple TestFlight&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:beta&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pilot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;changelog: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lane_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:CHANGE_LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;distribute_external: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deploy a new version to the App Store&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lane&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:release&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deliver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;force: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;submit_for_review: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;boarding&quot;&gt;boarding&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fastlane/boarding&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fastlane/boarding/master/assets/BoardingHuge.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;除了命令行工具之外，fastlane 还提供了一个自动建站工具 boarding，通过这个网站用户可以一键注册成为 TestFlight 外部测试员。也许你已经猜到了，boarding 用的是 Ruby on Rails 框架，你所需要做的就是将网站部署到 Heroku 上，填写好模板信息，就可以通过 xxx.herokuapp.com 来访问它了。&lt;/p&gt;

&lt;p&gt;之前在求是潮手机站 V3 公测时，是通过回复微信公众号来申请的，需要先在后台将用户数据处理为 CSV，然而再定期由我手动添加到 iTunes Connect，这相当不优雅。因为接下来还会推出 Today Widget / Box / Discover 等新功能，所以我现在用 boarding 搭建了「&lt;a href=&quot;https://ios.zjuqsc.com&quot;&gt;求是潮手机站 iOS 测试体验计划&lt;/a&gt;」，完全不需要手动干预，是不是优雅多了呢？&lt;/p&gt;</content><author><name>孙耀珠</name></author><category term="运维" /><summary type="html">对于 iOS 开发者来说，应用发布和代码签名证书大概是最令人头疼的两个环节了，这倒不是因为技术上有多难，而是它们的操作流程相当麻烦，尤其是在中国的网络环境下。 一般来讲，手动发布应用更新大致有以下流程：修改所有 Target 的版本号、用 Xcode 给项目 Archive、在 Xcode Organizer 中上传到 App Store、到 iTunes Connect 更新相关信息、提交给苹果审核。而其中上传那一步在不翻墙的情况下成功率极低，经常会卡在「Authenticating with the iTunes Store…」，而且系统 SOCKS 代理（如 Shadowsocks）在此时似乎并不起作用，只有使用 Proxifier 或者 VPN 才有效果。也是基于这个原因，我一般不会直接在 Organizer 中直接上传，而是先导出为 .ipa 文件，再使用 Xcode 附带的 Application Loader 上传，这样就免去了上传失败的话每次直接上传时将 .xcarchive 转为 .ipa 的时间。 当然以上还没考虑第一次发布时配置证书的流程，一个初学者面对苹果开发者中心琳琅满目的 Certificates / Identifiers / Provisioning Profiles 多半是一脸懵逼，不过幸运的是从 Xcode 8 开始已经能够比较完美地自动管理代码签名了，不再像以前一样需要自己去 Fix issues。 对于 iOS 应用的部署，如果你也像我一样饱受折磨，fastlane 也许是你的救星。</summary></entry><entry><title type="html">求是潮手机站 V3 for iOS</title><link href="https://blog.yzsun.me/qsc-mobile-ios-v3/" rel="alternate" type="text/html" title="求是潮手机站 V3 for iOS" /><published>2016-11-03T00:00:00+00:00</published><updated>2016-11-03T00:00:00+00:00</updated><id>https://blog.yzsun.me/qsc-mobile-ios-v3</id><content type="html" xml:base="https://blog.yzsun.me/qsc-mobile-ios-v3/">&lt;p&gt;&lt;img src=&quot;/images/qsc-mobile-ios-v3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;App Store: &lt;a href=&quot;https://itunes.apple.com/cn/app/id583334920&quot;&gt;https://itunes.apple.com/cn/app/id583334920&lt;/a&gt;&lt;br /&gt;
GitLab (Private): &lt;a href=&quot;https://git.zjuqsc.com/qsc-mobile/qsc-mobile-ios-v3&quot;&gt;https://git.zjuqsc.com/qsc-mobile/qsc-mobile-ios-v3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在深冬，写下第一行代码&lt;br /&gt;
在初春，设计第一版界面&lt;br /&gt;
在盛夏，开放第一次测试&lt;br /&gt;
只为在金秋，带给你第一流的体验&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;大不自多海纳江河&quot;&gt;大不自多，海纳江河&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;求是潮手机站 V3&lt;/strong&gt;（&lt;em&gt;QSCMobileV3&lt;/em&gt;）由浙江大学求是潮全新研发，是为浙江大学学生提供学习·生活·娱乐一站式服务的 iOS App。此次改版抛弃了上一版本的 Objective-C 代码，使用 Swift 完全重写，从底层架构到 UI 设计，从功能划分到交互体验，全新设计，全面换代。&lt;/p&gt;

&lt;p&gt;Mobile 诞生的初衷，是删去所有查询的繁琐，让校园动态尽在你手中。从上课考试到活动讲座，从学院通知到学园新闻，浙大似海辽远无际，Mobile 是潮，带来你最需要的信息。无论身处何时何地，即便足不出户，心已徜徉千里。我们的终极目的，是帮助你更加简便地学习与生活，用更短的时间，发现更好的自己。&lt;/p&gt;

&lt;h2 id=&quot;形上谓道形下谓器&quot;&gt;形上谓道，形下谓器&lt;/h2&gt;

&lt;p&gt;全新改版的求是潮手机站从「心」出发，创新且实用、严谨而有趣。团队从零开始的精心设计，具体落实为以下主要特性：&lt;/p&gt;

&lt;h4 id=&quot;今天&quot;&gt;今天&lt;/h4&gt;

&lt;p&gt;跑马拉松的最简单方法，就是将全程分解为数个目标，每次只朝一个目标努力奔跑。人生也是如此。「今天」视图显示你的当前行程与全天日程，让你分秒掌握当天行事，专注投身每项任务。&lt;/p&gt;

&lt;h4 id=&quot;日程&quot;&gt;日程&lt;/h4&gt;

&lt;p&gt;生活，就是一个七日接着又一个七日。Mobile 采用日程管理作为主线，串联起学习、生活、娱乐，妥善安排你的每一天。在从教务网导入的课程与考试外，还可以由你自行添加待办事项与活动事件。提醒功能与备注功能让你不再错过任何 Deadline，心无旁骛活好自己。&lt;/p&gt;

&lt;h4 id=&quot;发现&quot;&gt;发现&lt;/h4&gt;

&lt;p&gt;Mobile 愿为你打开一扇窗，发现浙大，发现精彩。「发现」功能提供最新社团活动与校网信息的整合，活动抢票或信息查询从未如此轻松简易；万千事项一键添加到日程，探索世界与经营生活无缝对接。&lt;/p&gt;

&lt;h4 id=&quot;工具&quot;&gt;工具&lt;/h4&gt;

&lt;p&gt;无数网站入口集于一身，行走校园的必备工具都在这里。成绩学分、体测锻炼、校车到站、自习教室……Mobile 的「查询」功能，是你必不可少的瑞士军刀。&lt;/p&gt;

&lt;h2 id=&quot;靡革匪因靡故匪新&quot;&gt;靡革匪因，靡故匪新&lt;/h2&gt;

&lt;p&gt;自 2010 年作为前身的 ZJUWAP 诞生以来，求是潮手机站始终位于浙大校园 App 的最前线。无论是 iOS 平台 5000 - 7000 的周活跃用户，还是浙大学子之间的口耳相传，都证明了它的优秀与坚定不衰的人气——然而这并不能成为求是潮手机站停滞不前的理由。2016年，求是潮手机站全面迎来第三次完全改版：全新设计，全面换代，全心全意，全力为你。&lt;/p&gt;

&lt;p&gt;潮水来去，四季更替；惟学无际，情驻心底。选择 Mobile，我们都将成为更好的自己。浙大求学路，有潮伴你行。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;开发者：孙耀珠&lt;br /&gt;
设计师：姚心仪、王朕&lt;br /&gt;
产品经理：边嘉蒙&lt;/p&gt;

  &lt;p&gt;题图：姚心仪／文案：边嘉蒙&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>求是潮</name></author><category term="广告" /><summary type="html">App Store: https://itunes.apple.com/cn/app/id583334920 GitLab (Private): https://git.zjuqsc.com/qsc-mobile/qsc-mobile-ios-v3 在深冬，写下第一行代码 在初春，设计第一版界面 在盛夏，开放第一次测试 只为在金秋，带给你第一流的体验</summary></entry></feed>